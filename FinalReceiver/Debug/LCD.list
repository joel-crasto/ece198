
LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032a8  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  0800343c  0800343c  0000443c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034bc  080034bc  00005068  2**0
                  CONTENTS
  4 .ARM          00000008  080034bc  080034bc  000044bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080034c4  080034c4  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034c4  080034c4  000044c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080034c8  080034c8  000044c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080034cc  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000218  20000068  08003534  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000280  08003534  00005280  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000839d  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017c8  00000000  00000000  0000d435  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000788  00000000  00000000  0000ec00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005bf  00000000  00000000  0000f388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000165f6  00000000  00000000  0000f947  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000960c  00000000  00000000  00025f3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086ecf  00000000  00000000  0002f549  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b6418  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000024a4  00000000  00000000  000b645c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000b8900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000068 	.word	0x20000068
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003424 	.word	0x08003424

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000006c 	.word	0x2000006c
 80001d0:	08003424 	.word	0x08003424

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <__aeabi_uldivmod>:
 80001e4:	b953      	cbnz	r3, 80001fc <__aeabi_uldivmod+0x18>
 80001e6:	b94a      	cbnz	r2, 80001fc <__aeabi_uldivmod+0x18>
 80001e8:	2900      	cmp	r1, #0
 80001ea:	bf08      	it	eq
 80001ec:	2800      	cmpeq	r0, #0
 80001ee:	bf1c      	itt	ne
 80001f0:	f04f 31ff 	movne.w	r1, #4294967295
 80001f4:	f04f 30ff 	movne.w	r0, #4294967295
 80001f8:	f000 b96a 	b.w	80004d0 <__aeabi_idiv0>
 80001fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000200:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000204:	f000 f806 	bl	8000214 <__udivmoddi4>
 8000208:	f8dd e004 	ldr.w	lr, [sp, #4]
 800020c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000210:	b004      	add	sp, #16
 8000212:	4770      	bx	lr

08000214 <__udivmoddi4>:
 8000214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000218:	9d08      	ldr	r5, [sp, #32]
 800021a:	460c      	mov	r4, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14e      	bne.n	80002be <__udivmoddi4+0xaa>
 8000220:	4694      	mov	ip, r2
 8000222:	458c      	cmp	ip, r1
 8000224:	4686      	mov	lr, r0
 8000226:	fab2 f282 	clz	r2, r2
 800022a:	d962      	bls.n	80002f2 <__udivmoddi4+0xde>
 800022c:	b14a      	cbz	r2, 8000242 <__udivmoddi4+0x2e>
 800022e:	f1c2 0320 	rsb	r3, r2, #32
 8000232:	4091      	lsls	r1, r2
 8000234:	fa20 f303 	lsr.w	r3, r0, r3
 8000238:	fa0c fc02 	lsl.w	ip, ip, r2
 800023c:	4319      	orrs	r1, r3
 800023e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000242:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000246:	fa1f f68c 	uxth.w	r6, ip
 800024a:	fbb1 f4f7 	udiv	r4, r1, r7
 800024e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000252:	fb07 1114 	mls	r1, r7, r4, r1
 8000256:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800025a:	fb04 f106 	mul.w	r1, r4, r6
 800025e:	4299      	cmp	r1, r3
 8000260:	d90a      	bls.n	8000278 <__udivmoddi4+0x64>
 8000262:	eb1c 0303 	adds.w	r3, ip, r3
 8000266:	f104 30ff 	add.w	r0, r4, #4294967295
 800026a:	f080 8112 	bcs.w	8000492 <__udivmoddi4+0x27e>
 800026e:	4299      	cmp	r1, r3
 8000270:	f240 810f 	bls.w	8000492 <__udivmoddi4+0x27e>
 8000274:	3c02      	subs	r4, #2
 8000276:	4463      	add	r3, ip
 8000278:	1a59      	subs	r1, r3, r1
 800027a:	fa1f f38e 	uxth.w	r3, lr
 800027e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000282:	fb07 1110 	mls	r1, r7, r0, r1
 8000286:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028a:	fb00 f606 	mul.w	r6, r0, r6
 800028e:	429e      	cmp	r6, r3
 8000290:	d90a      	bls.n	80002a8 <__udivmoddi4+0x94>
 8000292:	eb1c 0303 	adds.w	r3, ip, r3
 8000296:	f100 31ff 	add.w	r1, r0, #4294967295
 800029a:	f080 80fc 	bcs.w	8000496 <__udivmoddi4+0x282>
 800029e:	429e      	cmp	r6, r3
 80002a0:	f240 80f9 	bls.w	8000496 <__udivmoddi4+0x282>
 80002a4:	4463      	add	r3, ip
 80002a6:	3802      	subs	r0, #2
 80002a8:	1b9b      	subs	r3, r3, r6
 80002aa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ae:	2100      	movs	r1, #0
 80002b0:	b11d      	cbz	r5, 80002ba <__udivmoddi4+0xa6>
 80002b2:	40d3      	lsrs	r3, r2
 80002b4:	2200      	movs	r2, #0
 80002b6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	428b      	cmp	r3, r1
 80002c0:	d905      	bls.n	80002ce <__udivmoddi4+0xba>
 80002c2:	b10d      	cbz	r5, 80002c8 <__udivmoddi4+0xb4>
 80002c4:	e9c5 0100 	strd	r0, r1, [r5]
 80002c8:	2100      	movs	r1, #0
 80002ca:	4608      	mov	r0, r1
 80002cc:	e7f5      	b.n	80002ba <__udivmoddi4+0xa6>
 80002ce:	fab3 f183 	clz	r1, r3
 80002d2:	2900      	cmp	r1, #0
 80002d4:	d146      	bne.n	8000364 <__udivmoddi4+0x150>
 80002d6:	42a3      	cmp	r3, r4
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xcc>
 80002da:	4290      	cmp	r0, r2
 80002dc:	f0c0 80f0 	bcc.w	80004c0 <__udivmoddi4+0x2ac>
 80002e0:	1a86      	subs	r6, r0, r2
 80002e2:	eb64 0303 	sbc.w	r3, r4, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	d0e6      	beq.n	80002ba <__udivmoddi4+0xa6>
 80002ec:	e9c5 6300 	strd	r6, r3, [r5]
 80002f0:	e7e3      	b.n	80002ba <__udivmoddi4+0xa6>
 80002f2:	2a00      	cmp	r2, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x204>
 80002f8:	eba1 040c 	sub.w	r4, r1, ip
 80002fc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000300:	fa1f f78c 	uxth.w	r7, ip
 8000304:	2101      	movs	r1, #1
 8000306:	fbb4 f6f8 	udiv	r6, r4, r8
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb08 4416 	mls	r4, r8, r6, r4
 8000312:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000316:	fb07 f006 	mul.w	r0, r7, r6
 800031a:	4298      	cmp	r0, r3
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x11c>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 34ff 	add.w	r4, r6, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x11a>
 8000328:	4298      	cmp	r0, r3
 800032a:	f200 80cd 	bhi.w	80004c8 <__udivmoddi4+0x2b4>
 800032e:	4626      	mov	r6, r4
 8000330:	1a1c      	subs	r4, r3, r0
 8000332:	fa1f f38e 	uxth.w	r3, lr
 8000336:	fbb4 f0f8 	udiv	r0, r4, r8
 800033a:	fb08 4410 	mls	r4, r8, r0, r4
 800033e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000342:	fb00 f707 	mul.w	r7, r0, r7
 8000346:	429f      	cmp	r7, r3
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x148>
 800034a:	eb1c 0303 	adds.w	r3, ip, r3
 800034e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x146>
 8000354:	429f      	cmp	r7, r3
 8000356:	f200 80b0 	bhi.w	80004ba <__udivmoddi4+0x2a6>
 800035a:	4620      	mov	r0, r4
 800035c:	1bdb      	subs	r3, r3, r7
 800035e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000362:	e7a5      	b.n	80002b0 <__udivmoddi4+0x9c>
 8000364:	f1c1 0620 	rsb	r6, r1, #32
 8000368:	408b      	lsls	r3, r1
 800036a:	fa22 f706 	lsr.w	r7, r2, r6
 800036e:	431f      	orrs	r7, r3
 8000370:	fa20 fc06 	lsr.w	ip, r0, r6
 8000374:	fa04 f301 	lsl.w	r3, r4, r1
 8000378:	ea43 030c 	orr.w	r3, r3, ip
 800037c:	40f4      	lsrs	r4, r6
 800037e:	fa00 f801 	lsl.w	r8, r0, r1
 8000382:	0c38      	lsrs	r0, r7, #16
 8000384:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000388:	fbb4 fef0 	udiv	lr, r4, r0
 800038c:	fa1f fc87 	uxth.w	ip, r7
 8000390:	fb00 441e 	mls	r4, r0, lr, r4
 8000394:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000398:	fb0e f90c 	mul.w	r9, lr, ip
 800039c:	45a1      	cmp	r9, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	d90a      	bls.n	80003ba <__udivmoddi4+0x1a6>
 80003a4:	193c      	adds	r4, r7, r4
 80003a6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003aa:	f080 8084 	bcs.w	80004b6 <__udivmoddi4+0x2a2>
 80003ae:	45a1      	cmp	r9, r4
 80003b0:	f240 8081 	bls.w	80004b6 <__udivmoddi4+0x2a2>
 80003b4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b8:	443c      	add	r4, r7
 80003ba:	eba4 0409 	sub.w	r4, r4, r9
 80003be:	fa1f f983 	uxth.w	r9, r3
 80003c2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ca:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ce:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d907      	bls.n	80003e6 <__udivmoddi4+0x1d2>
 80003d6:	193c      	adds	r4, r7, r4
 80003d8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003dc:	d267      	bcs.n	80004ae <__udivmoddi4+0x29a>
 80003de:	45a4      	cmp	ip, r4
 80003e0:	d965      	bls.n	80004ae <__udivmoddi4+0x29a>
 80003e2:	3b02      	subs	r3, #2
 80003e4:	443c      	add	r4, r7
 80003e6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ea:	fba0 9302 	umull	r9, r3, r0, r2
 80003ee:	eba4 040c 	sub.w	r4, r4, ip
 80003f2:	429c      	cmp	r4, r3
 80003f4:	46ce      	mov	lr, r9
 80003f6:	469c      	mov	ip, r3
 80003f8:	d351      	bcc.n	800049e <__udivmoddi4+0x28a>
 80003fa:	d04e      	beq.n	800049a <__udivmoddi4+0x286>
 80003fc:	b155      	cbz	r5, 8000414 <__udivmoddi4+0x200>
 80003fe:	ebb8 030e 	subs.w	r3, r8, lr
 8000402:	eb64 040c 	sbc.w	r4, r4, ip
 8000406:	fa04 f606 	lsl.w	r6, r4, r6
 800040a:	40cb      	lsrs	r3, r1
 800040c:	431e      	orrs	r6, r3
 800040e:	40cc      	lsrs	r4, r1
 8000410:	e9c5 6400 	strd	r6, r4, [r5]
 8000414:	2100      	movs	r1, #0
 8000416:	e750      	b.n	80002ba <__udivmoddi4+0xa6>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f103 	lsr.w	r1, r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa24 f303 	lsr.w	r3, r4, r3
 8000428:	4094      	lsls	r4, r2
 800042a:	430c      	orrs	r4, r1
 800042c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000430:	fa00 fe02 	lsl.w	lr, r0, r2
 8000434:	fa1f f78c 	uxth.w	r7, ip
 8000438:	fbb3 f0f8 	udiv	r0, r3, r8
 800043c:	fb08 3110 	mls	r1, r8, r0, r3
 8000440:	0c23      	lsrs	r3, r4, #16
 8000442:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000446:	fb00 f107 	mul.w	r1, r0, r7
 800044a:	4299      	cmp	r1, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x24c>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 36ff 	add.w	r6, r0, #4294967295
 8000456:	d22c      	bcs.n	80004b2 <__udivmoddi4+0x29e>
 8000458:	4299      	cmp	r1, r3
 800045a:	d92a      	bls.n	80004b2 <__udivmoddi4+0x29e>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1a5b      	subs	r3, r3, r1
 8000462:	b2a4      	uxth	r4, r4
 8000464:	fbb3 f1f8 	udiv	r1, r3, r8
 8000468:	fb08 3311 	mls	r3, r8, r1, r3
 800046c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000470:	fb01 f307 	mul.w	r3, r1, r7
 8000474:	42a3      	cmp	r3, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x276>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000480:	d213      	bcs.n	80004aa <__udivmoddi4+0x296>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d911      	bls.n	80004aa <__udivmoddi4+0x296>
 8000486:	3902      	subs	r1, #2
 8000488:	4464      	add	r4, ip
 800048a:	1ae4      	subs	r4, r4, r3
 800048c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000490:	e739      	b.n	8000306 <__udivmoddi4+0xf2>
 8000492:	4604      	mov	r4, r0
 8000494:	e6f0      	b.n	8000278 <__udivmoddi4+0x64>
 8000496:	4608      	mov	r0, r1
 8000498:	e706      	b.n	80002a8 <__udivmoddi4+0x94>
 800049a:	45c8      	cmp	r8, r9
 800049c:	d2ae      	bcs.n	80003fc <__udivmoddi4+0x1e8>
 800049e:	ebb9 0e02 	subs.w	lr, r9, r2
 80004a2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a6:	3801      	subs	r0, #1
 80004a8:	e7a8      	b.n	80003fc <__udivmoddi4+0x1e8>
 80004aa:	4631      	mov	r1, r6
 80004ac:	e7ed      	b.n	800048a <__udivmoddi4+0x276>
 80004ae:	4603      	mov	r3, r0
 80004b0:	e799      	b.n	80003e6 <__udivmoddi4+0x1d2>
 80004b2:	4630      	mov	r0, r6
 80004b4:	e7d4      	b.n	8000460 <__udivmoddi4+0x24c>
 80004b6:	46d6      	mov	lr, sl
 80004b8:	e77f      	b.n	80003ba <__udivmoddi4+0x1a6>
 80004ba:	4463      	add	r3, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e74d      	b.n	800035c <__udivmoddi4+0x148>
 80004c0:	4606      	mov	r6, r0
 80004c2:	4623      	mov	r3, r4
 80004c4:	4608      	mov	r0, r1
 80004c6:	e70f      	b.n	80002e8 <__udivmoddi4+0xd4>
 80004c8:	3e02      	subs	r6, #2
 80004ca:	4463      	add	r3, ip
 80004cc:	e730      	b.n	8000330 <__udivmoddi4+0x11c>
 80004ce:	bf00      	nop

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 80004d4:	b5b0      	push	{r4, r5, r7, lr}
 80004d6:	b08a      	sub	sp, #40	@ 0x28
 80004d8:	af00      	add	r7, sp, #0
 80004da:	60f8      	str	r0, [r7, #12]
 80004dc:	60b9      	str	r1, [r7, #8]
 80004de:	607a      	str	r2, [r7, #4]
 80004e0:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 80004e2:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80004e6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	lcd.en_pin = en_pin;
 80004ea:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80004ee:	84bb      	strh	r3, [r7, #36]	@ 0x24
	lcd.en_port = en_port;
 80004f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80004f2:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 80004f4:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80004f6:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 80004f8:	683b      	ldr	r3, [r7, #0]
 80004fa:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 8000500:	68bb      	ldr	r3, [r7, #8]
 8000502:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 8000504:	f107 0310 	add.w	r3, r7, #16
 8000508:	4618      	mov	r0, r3
 800050a:	f000 f80e 	bl	800052a <Lcd_init>

	return lcd;
 800050e:	68fb      	ldr	r3, [r7, #12]
 8000510:	461d      	mov	r5, r3
 8000512:	f107 0410 	add.w	r4, r7, #16
 8000516:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000518:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800051a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800051e:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8000522:	68f8      	ldr	r0, [r7, #12]
 8000524:	3728      	adds	r7, #40	@ 0x28
 8000526:	46bd      	mov	sp, r7
 8000528:	bdb0      	pop	{r4, r5, r7, pc}

0800052a <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 800052a:	b580      	push	{r7, lr}
 800052c:	b082      	sub	sp, #8
 800052e:	af00      	add	r7, sp, #0
 8000530:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	7d9b      	ldrb	r3, [r3, #22]
 8000536:	2b00      	cmp	r3, #0
 8000538:	d10c      	bne.n	8000554 <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 800053a:	2133      	movs	r1, #51	@ 0x33
 800053c:	6878      	ldr	r0, [r7, #4]
 800053e:	f000 f857 	bl	80005f0 <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 8000542:	2132      	movs	r1, #50	@ 0x32
 8000544:	6878      	ldr	r0, [r7, #4]
 8000546:	f000 f853 	bl	80005f0 <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 800054a:	2128      	movs	r1, #40	@ 0x28
 800054c:	6878      	ldr	r0, [r7, #4]
 800054e:	f000 f84f 	bl	80005f0 <lcd_write_command>
 8000552:	e003      	b.n	800055c <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 8000554:	2138      	movs	r1, #56	@ 0x38
 8000556:	6878      	ldr	r0, [r7, #4]
 8000558:	f000 f84a 	bl	80005f0 <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 800055c:	2101      	movs	r1, #1
 800055e:	6878      	ldr	r0, [r7, #4]
 8000560:	f000 f846 	bl	80005f0 <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 8000564:	210c      	movs	r1, #12
 8000566:	6878      	ldr	r0, [r7, #4]
 8000568:	f000 f842 	bl	80005f0 <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 800056c:	2106      	movs	r1, #6
 800056e:	6878      	ldr	r0, [r7, #4]
 8000570:	f000 f83e 	bl	80005f0 <lcd_write_command>
}
 8000574:	bf00      	nop
 8000576:	3708      	adds	r7, #8
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}

0800057c <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 800057c:	b590      	push	{r4, r7, lr}
 800057e:	b085      	sub	sp, #20
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
 8000584:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 8000586:	2300      	movs	r3, #0
 8000588:	73fb      	strb	r3, [r7, #15]
 800058a:	e00a      	b.n	80005a2 <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 800058c:	7bfb      	ldrb	r3, [r7, #15]
 800058e:	683a      	ldr	r2, [r7, #0]
 8000590:	4413      	add	r3, r2
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	4619      	mov	r1, r3
 8000596:	6878      	ldr	r0, [r7, #4]
 8000598:	f000 f858 	bl	800064c <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 800059c:	7bfb      	ldrb	r3, [r7, #15]
 800059e:	3301      	adds	r3, #1
 80005a0:	73fb      	strb	r3, [r7, #15]
 80005a2:	7bfc      	ldrb	r4, [r7, #15]
 80005a4:	6838      	ldr	r0, [r7, #0]
 80005a6:	f7ff fe15 	bl	80001d4 <strlen>
 80005aa:	4603      	mov	r3, r0
 80005ac:	429c      	cmp	r4, r3
 80005ae:	d3ed      	bcc.n	800058c <Lcd_string+0x10>
	}
}
 80005b0:	bf00      	nop
 80005b2:	bf00      	nop
 80005b4:	3714      	adds	r7, #20
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd90      	pop	{r4, r7, pc}
	...

080005bc <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
 80005c4:	460b      	mov	r3, r1
 80005c6:	70fb      	strb	r3, [r7, #3]
 80005c8:	4613      	mov	r3, r2
 80005ca:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 80005cc:	78fb      	ldrb	r3, [r7, #3]
 80005ce:	4a07      	ldr	r2, [pc, #28]	@ (80005ec <Lcd_cursor+0x30>)
 80005d0:	5cd2      	ldrb	r2, [r2, r3]
 80005d2:	78bb      	ldrb	r3, [r7, #2]
 80005d4:	4413      	add	r3, r2
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	3b80      	subs	r3, #128	@ 0x80
 80005da:	b2db      	uxtb	r3, r3
 80005dc:	4619      	mov	r1, r3
 80005de:	6878      	ldr	r0, [r7, #4]
 80005e0:	f000 f806 	bl	80005f0 <lcd_write_command>
	#endif
}
 80005e4:	bf00      	nop
 80005e6:	3708      	adds	r7, #8
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	080034a0 	.word	0x080034a0

080005f0 <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
 80005f8:	460b      	mov	r3, r1
 80005fa:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	6898      	ldr	r0, [r3, #8]
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	899b      	ldrh	r3, [r3, #12]
 8000604:	2200      	movs	r2, #0
 8000606:	4619      	mov	r1, r3
 8000608:	f001 f93a 	bl	8001880 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	7d9b      	ldrb	r3, [r3, #22]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d111      	bne.n	8000638 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 8000614:	78fb      	ldrb	r3, [r7, #3]
 8000616:	091b      	lsrs	r3, r3, #4
 8000618:	b2db      	uxtb	r3, r3
 800061a:	2204      	movs	r2, #4
 800061c:	4619      	mov	r1, r3
 800061e:	6878      	ldr	r0, [r7, #4]
 8000620:	f000 f842 	bl	80006a8 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 8000624:	78fb      	ldrb	r3, [r7, #3]
 8000626:	f003 030f 	and.w	r3, r3, #15
 800062a:	b2db      	uxtb	r3, r3
 800062c:	2204      	movs	r2, #4
 800062e:	4619      	mov	r1, r3
 8000630:	6878      	ldr	r0, [r7, #4]
 8000632:	f000 f839 	bl	80006a8 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 8000636:	e005      	b.n	8000644 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 8000638:	78fb      	ldrb	r3, [r7, #3]
 800063a:	2208      	movs	r2, #8
 800063c:	4619      	mov	r1, r3
 800063e:	6878      	ldr	r0, [r7, #4]
 8000640:	f000 f832 	bl	80006a8 <lcd_write>
}
 8000644:	bf00      	nop
 8000646:	3708      	adds	r7, #8
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}

0800064c <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
 8000654:	460b      	mov	r3, r1
 8000656:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	6898      	ldr	r0, [r3, #8]
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	899b      	ldrh	r3, [r3, #12]
 8000660:	2201      	movs	r2, #1
 8000662:	4619      	mov	r1, r3
 8000664:	f001 f90c 	bl	8001880 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	7d9b      	ldrb	r3, [r3, #22]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d111      	bne.n	8000694 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 8000670:	78fb      	ldrb	r3, [r7, #3]
 8000672:	091b      	lsrs	r3, r3, #4
 8000674:	b2db      	uxtb	r3, r3
 8000676:	2204      	movs	r2, #4
 8000678:	4619      	mov	r1, r3
 800067a:	6878      	ldr	r0, [r7, #4]
 800067c:	f000 f814 	bl	80006a8 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 8000680:	78fb      	ldrb	r3, [r7, #3]
 8000682:	f003 030f 	and.w	r3, r3, #15
 8000686:	b2db      	uxtb	r3, r3
 8000688:	2204      	movs	r2, #4
 800068a:	4619      	mov	r1, r3
 800068c:	6878      	ldr	r0, [r7, #4]
 800068e:	f000 f80b 	bl	80006a8 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 8000692:	e005      	b.n	80006a0 <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 8000694:	78fb      	ldrb	r3, [r7, #3]
 8000696:	2208      	movs	r2, #8
 8000698:	4619      	mov	r1, r3
 800069a:	6878      	ldr	r0, [r7, #4]
 800069c:	f000 f804 	bl	80006a8 <lcd_write>
}
 80006a0:	bf00      	nop
 80006a2:	3708      	adds	r7, #8
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
 80006b0:	460b      	mov	r3, r1
 80006b2:	70fb      	strb	r3, [r7, #3]
 80006b4:	4613      	mov	r3, r2
 80006b6:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 80006b8:	2300      	movs	r3, #0
 80006ba:	73fb      	strb	r3, [r7, #15]
 80006bc:	e019      	b.n	80006f2 <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681a      	ldr	r2, [r3, #0]
 80006c2:	7bfb      	ldrb	r3, [r7, #15]
 80006c4:	009b      	lsls	r3, r3, #2
 80006c6:	4413      	add	r3, r2
 80006c8:	6818      	ldr	r0, [r3, #0]
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	685a      	ldr	r2, [r3, #4]
 80006ce:	7bfb      	ldrb	r3, [r7, #15]
 80006d0:	005b      	lsls	r3, r3, #1
 80006d2:	4413      	add	r3, r2
 80006d4:	8819      	ldrh	r1, [r3, #0]
 80006d6:	78fa      	ldrb	r2, [r7, #3]
 80006d8:	7bfb      	ldrb	r3, [r7, #15]
 80006da:	fa42 f303 	asr.w	r3, r2, r3
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	f003 0301 	and.w	r3, r3, #1
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	461a      	mov	r2, r3
 80006e8:	f001 f8ca 	bl	8001880 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 80006ec:	7bfb      	ldrb	r3, [r7, #15]
 80006ee:	3301      	adds	r3, #1
 80006f0:	73fb      	strb	r3, [r7, #15]
 80006f2:	7bfa      	ldrb	r2, [r7, #15]
 80006f4:	78bb      	ldrb	r3, [r7, #2]
 80006f6:	429a      	cmp	r2, r3
 80006f8:	d3e1      	bcc.n	80006be <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	6918      	ldr	r0, [r3, #16]
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	8a9b      	ldrh	r3, [r3, #20]
 8000702:	2201      	movs	r2, #1
 8000704:	4619      	mov	r1, r3
 8000706:	f001 f8bb 	bl	8001880 <HAL_GPIO_WritePin>
	DELAY(1);
 800070a:	2001      	movs	r0, #1
 800070c:	f000 fe12 	bl	8001334 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	6918      	ldr	r0, [r3, #16]
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	8a9b      	ldrh	r3, [r3, #20]
 8000718:	2200      	movs	r2, #0
 800071a:	4619      	mov	r1, r3
 800071c:	f001 f8b0 	bl	8001880 <HAL_GPIO_WritePin>
}
 8000720:	bf00      	nop
 8000722:	3710      	adds	r7, #16
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}

08000728 <decrypt>:
uint8_t current[5];
uint8_t rx_buff[5];
uint8_t button_val = 0;


void decrypt(uint8_t *tx_buff, size_t size, uint8_t *destination){
 8000728:	b480      	push	{r7}
 800072a:	b08f      	sub	sp, #60	@ 0x3c
 800072c:	af00      	add	r7, sp, #0
 800072e:	60f8      	str	r0, [r7, #12]
 8000730:	60b9      	str	r1, [r7, #8]
 8000732:	607a      	str	r2, [r7, #4]
  uint8_t key_1[] = {34, 20, 41, 97, 62};
 8000734:	4a3e      	ldr	r2, [pc, #248]	@ (8000830 <decrypt+0x108>)
 8000736:	f107 0320 	add.w	r3, r7, #32
 800073a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800073e:	6018      	str	r0, [r3, #0]
 8000740:	3304      	adds	r3, #4
 8000742:	7019      	strb	r1, [r3, #0]
  uint8_t key_2[] = {27, 25, 18, 48, 49};
 8000744:	4a3b      	ldr	r2, [pc, #236]	@ (8000834 <decrypt+0x10c>)
 8000746:	f107 0318 	add.w	r3, r7, #24
 800074a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800074e:	6018      	str	r0, [r3, #0]
 8000750:	3304      	adds	r3, #4
 8000752:	7019      	strb	r1, [r3, #0]
  uint8_t key_3[] = {35, 28, 24, 43, 21};
 8000754:	4a38      	ldr	r2, [pc, #224]	@ (8000838 <decrypt+0x110>)
 8000756:	f107 0310 	add.w	r3, r7, #16
 800075a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800075e:	6018      	str	r0, [r3, #0]
 8000760:	3304      	adds	r3, #4
 8000762:	7019      	strb	r1, [r3, #0]

  for (size_t i = 0; i < size; i++) {
 8000764:	2300      	movs	r3, #0
 8000766:	637b      	str	r3, [r7, #52]	@ 0x34
 8000768:	e00c      	b.n	8000784 <decrypt+0x5c>
	  destination[i] = ~(tx_buff[i]); // NOR operation
 800076a:	68fa      	ldr	r2, [r7, #12]
 800076c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800076e:	4413      	add	r3, r2
 8000770:	781a      	ldrb	r2, [r3, #0]
 8000772:	6879      	ldr	r1, [r7, #4]
 8000774:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000776:	440b      	add	r3, r1
 8000778:	43d2      	mvns	r2, r2
 800077a:	b2d2      	uxtb	r2, r2
 800077c:	701a      	strb	r2, [r3, #0]
  for (size_t i = 0; i < size; i++) {
 800077e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000780:	3301      	adds	r3, #1
 8000782:	637b      	str	r3, [r7, #52]	@ 0x34
 8000784:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000786:	68bb      	ldr	r3, [r7, #8]
 8000788:	429a      	cmp	r2, r3
 800078a:	d3ee      	bcc.n	800076a <decrypt+0x42>
  }

  for (size_t i = 0; i < size; i++) {
 800078c:	2300      	movs	r3, #0
 800078e:	633b      	str	r3, [r7, #48]	@ 0x30
 8000790:	e011      	b.n	80007b6 <decrypt+0x8e>
	  destination[i] = destination[i] ^ key_3[i];
 8000792:	687a      	ldr	r2, [r7, #4]
 8000794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000796:	4413      	add	r3, r2
 8000798:	7819      	ldrb	r1, [r3, #0]
 800079a:	f107 0210 	add.w	r2, r7, #16
 800079e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80007a0:	4413      	add	r3, r2
 80007a2:	781a      	ldrb	r2, [r3, #0]
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80007a8:	4403      	add	r3, r0
 80007aa:	404a      	eors	r2, r1
 80007ac:	b2d2      	uxtb	r2, r2
 80007ae:	701a      	strb	r2, [r3, #0]
  for (size_t i = 0; i < size; i++) {
 80007b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80007b2:	3301      	adds	r3, #1
 80007b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80007b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80007b8:	68bb      	ldr	r3, [r7, #8]
 80007ba:	429a      	cmp	r2, r3
 80007bc:	d3e9      	bcc.n	8000792 <decrypt+0x6a>
  }
  for (size_t i = 0; i < size; i++) {
 80007be:	2300      	movs	r3, #0
 80007c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80007c2:	e011      	b.n	80007e8 <decrypt+0xc0>
	  destination[i] = destination[i] ^ key_2[i];
 80007c4:	687a      	ldr	r2, [r7, #4]
 80007c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007c8:	4413      	add	r3, r2
 80007ca:	7819      	ldrb	r1, [r3, #0]
 80007cc:	f107 0218 	add.w	r2, r7, #24
 80007d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007d2:	4413      	add	r3, r2
 80007d4:	781a      	ldrb	r2, [r3, #0]
 80007d6:	6878      	ldr	r0, [r7, #4]
 80007d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007da:	4403      	add	r3, r0
 80007dc:	404a      	eors	r2, r1
 80007de:	b2d2      	uxtb	r2, r2
 80007e0:	701a      	strb	r2, [r3, #0]
  for (size_t i = 0; i < size; i++) {
 80007e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007e4:	3301      	adds	r3, #1
 80007e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80007e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80007ea:	68bb      	ldr	r3, [r7, #8]
 80007ec:	429a      	cmp	r2, r3
 80007ee:	d3e9      	bcc.n	80007c4 <decrypt+0x9c>
  }

  for (size_t i = 0; i < size; i++) {
 80007f0:	2300      	movs	r3, #0
 80007f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80007f4:	e011      	b.n	800081a <decrypt+0xf2>
	  destination[i] = destination[i] ^ key_1[i];
 80007f6:	687a      	ldr	r2, [r7, #4]
 80007f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80007fa:	4413      	add	r3, r2
 80007fc:	7819      	ldrb	r1, [r3, #0]
 80007fe:	f107 0220 	add.w	r2, r7, #32
 8000802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000804:	4413      	add	r3, r2
 8000806:	781a      	ldrb	r2, [r3, #0]
 8000808:	6878      	ldr	r0, [r7, #4]
 800080a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800080c:	4403      	add	r3, r0
 800080e:	404a      	eors	r2, r1
 8000810:	b2d2      	uxtb	r2, r2
 8000812:	701a      	strb	r2, [r3, #0]
  for (size_t i = 0; i < size; i++) {
 8000814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000816:	3301      	adds	r3, #1
 8000818:	62bb      	str	r3, [r7, #40]	@ 0x28
 800081a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800081c:	68bb      	ldr	r3, [r7, #8]
 800081e:	429a      	cmp	r2, r3
 8000820:	d3e9      	bcc.n	80007f6 <decrypt+0xce>
  }
}
 8000822:	bf00      	nop
 8000824:	bf00      	nop
 8000826:	373c      	adds	r7, #60	@ 0x3c
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr
 8000830:	0800343c 	.word	0x0800343c
 8000834:	08003444 	.word	0x08003444
 8000838:	0800344c 	.word	0x0800344c

0800083c <convert_to_char_array>:

char* convert_to_char_array(uint8_t *int_buffer, size_t buffer_size) {
 800083c:	b580      	push	{r7, lr}
 800083e:	b084      	sub	sp, #16
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
 8000844:	6039      	str	r1, [r7, #0]
    // Dynamically allocate memory for the char array (+1 for null terminator)
    char *char_array = (char *)malloc((buffer_size + 1) * sizeof(char));
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	3301      	adds	r3, #1
 800084a:	4618      	mov	r0, r3
 800084c:	f002 f8e2 	bl	8002a14 <malloc>
 8000850:	4603      	mov	r3, r0
 8000852:	60bb      	str	r3, [r7, #8]
    if (char_array == NULL) {
 8000854:	68bb      	ldr	r3, [r7, #8]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d104      	bne.n	8000864 <convert_to_char_array+0x28>
        // If memory allocation fails, return NULL
        printf("Memory allocation failed!\n");
 800085a:	4810      	ldr	r0, [pc, #64]	@ (800089c <convert_to_char_array+0x60>)
 800085c:	f002 fae6 	bl	8002e2c <puts>
        return NULL;
 8000860:	2300      	movs	r3, #0
 8000862:	e017      	b.n	8000894 <convert_to_char_array+0x58>
    }

    // Convert each integer to a character and store in the char array
    for (size_t i = 0; i < buffer_size; i++) {
 8000864:	2300      	movs	r3, #0
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	e00a      	b.n	8000880 <convert_to_char_array+0x44>
        char_array[i] = (char)int_buffer[i];  // Convert integer to char
 800086a:	687a      	ldr	r2, [r7, #4]
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	441a      	add	r2, r3
 8000870:	68b9      	ldr	r1, [r7, #8]
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	440b      	add	r3, r1
 8000876:	7812      	ldrb	r2, [r2, #0]
 8000878:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < buffer_size; i++) {
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	3301      	adds	r3, #1
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	68fa      	ldr	r2, [r7, #12]
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	429a      	cmp	r2, r3
 8000886:	d3f0      	bcc.n	800086a <convert_to_char_array+0x2e>
    }

    char_array[buffer_size] = '\0';  // Null-terminate the string
 8000888:	68ba      	ldr	r2, [r7, #8]
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	4413      	add	r3, r2
 800088e:	2200      	movs	r2, #0
 8000890:	701a      	strb	r2, [r3, #0]

    return char_array;  // Return the dynamically allocated char array
 8000892:	68bb      	ldr	r3, [r7, #8]
}
 8000894:	4618      	mov	r0, r3
 8000896:	3710      	adds	r7, #16
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	08003454 	.word	0x08003454

080008a0 <compare>:

// Function to compare two strings (returning 0 for equal, positive for str1 > str2, negative for str1 < str2)
int compare(const char *str1, const char *str2) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b086      	sub	sp, #24
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
 80008a8:	6039      	str	r1, [r7, #0]
    size_t lenString1 = strlen(str1);
 80008aa:	6878      	ldr	r0, [r7, #4]
 80008ac:	f7ff fc92 	bl	80001d4 <strlen>
 80008b0:	6138      	str	r0, [r7, #16]
    size_t lenString2 = strlen(str2);
 80008b2:	6838      	ldr	r0, [r7, #0]
 80008b4:	f7ff fc8e 	bl	80001d4 <strlen>
 80008b8:	60f8      	str	r0, [r7, #12]
    size_t minString = (lenString1 < lenString2) ? lenString1 : lenString2;
 80008ba:	68fa      	ldr	r2, [r7, #12]
 80008bc:	693b      	ldr	r3, [r7, #16]
 80008be:	4293      	cmp	r3, r2
 80008c0:	bf28      	it	cs
 80008c2:	4613      	movcs	r3, r2
 80008c4:	60bb      	str	r3, [r7, #8]

    for (size_t i = 0; i < minString; i++) {
 80008c6:	2300      	movs	r3, #0
 80008c8:	617b      	str	r3, [r7, #20]
 80008ca:	e01b      	b.n	8000904 <compare+0x64>
        if (str1[i] > str2[i]) {
 80008cc:	687a      	ldr	r2, [r7, #4]
 80008ce:	697b      	ldr	r3, [r7, #20]
 80008d0:	4413      	add	r3, r2
 80008d2:	781a      	ldrb	r2, [r3, #0]
 80008d4:	6839      	ldr	r1, [r7, #0]
 80008d6:	697b      	ldr	r3, [r7, #20]
 80008d8:	440b      	add	r3, r1
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	429a      	cmp	r2, r3
 80008de:	d901      	bls.n	80008e4 <compare+0x44>
            return 1;
 80008e0:	2301      	movs	r3, #1
 80008e2:	e021      	b.n	8000928 <compare+0x88>
        } else if (str1[i] < str2[i]) {
 80008e4:	687a      	ldr	r2, [r7, #4]
 80008e6:	697b      	ldr	r3, [r7, #20]
 80008e8:	4413      	add	r3, r2
 80008ea:	781a      	ldrb	r2, [r3, #0]
 80008ec:	6839      	ldr	r1, [r7, #0]
 80008ee:	697b      	ldr	r3, [r7, #20]
 80008f0:	440b      	add	r3, r1
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	429a      	cmp	r2, r3
 80008f6:	d202      	bcs.n	80008fe <compare+0x5e>
            return -1;
 80008f8:	f04f 33ff 	mov.w	r3, #4294967295
 80008fc:	e014      	b.n	8000928 <compare+0x88>
    for (size_t i = 0; i < minString; i++) {
 80008fe:	697b      	ldr	r3, [r7, #20]
 8000900:	3301      	adds	r3, #1
 8000902:	617b      	str	r3, [r7, #20]
 8000904:	697a      	ldr	r2, [r7, #20]
 8000906:	68bb      	ldr	r3, [r7, #8]
 8000908:	429a      	cmp	r2, r3
 800090a:	d3df      	bcc.n	80008cc <compare+0x2c>
        }
    }

    if (lenString1 > lenString2) {
 800090c:	693a      	ldr	r2, [r7, #16]
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	429a      	cmp	r2, r3
 8000912:	d901      	bls.n	8000918 <compare+0x78>
        return 1;
 8000914:	2301      	movs	r3, #1
 8000916:	e007      	b.n	8000928 <compare+0x88>
    } else if (lenString1 == lenString2) {
 8000918:	693a      	ldr	r2, [r7, #16]
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	429a      	cmp	r2, r3
 800091e:	d101      	bne.n	8000924 <compare+0x84>
        return 0;
 8000920:	2300      	movs	r3, #0
 8000922:	e001      	b.n	8000928 <compare+0x88>
    } else {
        return -1;
 8000924:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 8000928:	4618      	mov	r0, r3
 800092a:	3718      	adds	r7, #24
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}

08000930 <assign>:

// Function to assign a string (copy str2 to str1)
void assign(char *str1, const char *str2) {
 8000930:	b480      	push	{r7}
 8000932:	b085      	sub	sp, #20
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
 8000938:	6039      	str	r1, [r7, #0]
    size_t i = 0;
 800093a:	2300      	movs	r3, #0
 800093c:	60fb      	str	r3, [r7, #12]
    while (str2[i] != '\0') {
 800093e:	e00a      	b.n	8000956 <assign+0x26>
        str1[i] = str2[i];
 8000940:	683a      	ldr	r2, [r7, #0]
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	441a      	add	r2, r3
 8000946:	6879      	ldr	r1, [r7, #4]
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	440b      	add	r3, r1
 800094c:	7812      	ldrb	r2, [r2, #0]
 800094e:	701a      	strb	r2, [r3, #0]
        i++;
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	3301      	adds	r3, #1
 8000954:	60fb      	str	r3, [r7, #12]
    while (str2[i] != '\0') {
 8000956:	683a      	ldr	r2, [r7, #0]
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	4413      	add	r3, r2
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d1ee      	bne.n	8000940 <assign+0x10>
    }
    str1[i] = '\0'; // Null-terminate str1
 8000962:	687a      	ldr	r2, [r7, #4]
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	4413      	add	r3, r2
 8000968:	2200      	movs	r2, #0
 800096a:	701a      	strb	r2, [r3, #0]
}
 800096c:	bf00      	nop
 800096e:	3714      	adds	r7, #20
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr

08000978 <insert>:

// Function to insert a string into the array if it's not already present
void insert(char ***array, size_t *capacity, char *value) {
 8000978:	b590      	push	{r4, r7, lr}
 800097a:	b087      	sub	sp, #28
 800097c:	af00      	add	r7, sp, #0
 800097e:	60f8      	str	r0, [r7, #12]
 8000980:	60b9      	str	r1, [r7, #8]
 8000982:	607a      	str	r2, [r7, #4]
    // Check for duplicates
    for (size_t i = 0; i < *capacity; i++) {
 8000984:	2300      	movs	r3, #0
 8000986:	617b      	str	r3, [r7, #20]
 8000988:	e00f      	b.n	80009aa <insert+0x32>
        if (compare((*array)[i], value) == 0) {
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	681a      	ldr	r2, [r3, #0]
 800098e:	697b      	ldr	r3, [r7, #20]
 8000990:	009b      	lsls	r3, r3, #2
 8000992:	4413      	add	r3, r2
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	6879      	ldr	r1, [r7, #4]
 8000998:	4618      	mov	r0, r3
 800099a:	f7ff ff81 	bl	80008a0 <compare>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d042      	beq.n	8000a2a <insert+0xb2>
    for (size_t i = 0; i < *capacity; i++) {
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	3301      	adds	r3, #1
 80009a8:	617b      	str	r3, [r7, #20]
 80009aa:	68bb      	ldr	r3, [r7, #8]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	697a      	ldr	r2, [r7, #20]
 80009b0:	429a      	cmp	r2, r3
 80009b2:	d3ea      	bcc.n	800098a <insert+0x12>
            return;  // Duplicate found, do not insert
        }
    }

    // Reallocate memory for the new string
    *array = realloc(*array, (*capacity + 1) * sizeof(char *));
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	681a      	ldr	r2, [r3, #0]
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	3301      	adds	r3, #1
 80009be:	009b      	lsls	r3, r3, #2
 80009c0:	4619      	mov	r1, r3
 80009c2:	4610      	mov	r0, r2
 80009c4:	f002 f8e4 	bl	8002b90 <realloc>
 80009c8:	4602      	mov	r2, r0
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	601a      	str	r2, [r3, #0]
    if (*array == NULL) {
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d02b      	beq.n	8000a2e <insert+0xb6>
        // Memory allocation failed, handle error
        return;
    }

    // Allocate memory for the new string and assign it
    (*array)[*capacity] = malloc(strlen(value) + 1);
 80009d6:	6878      	ldr	r0, [r7, #4]
 80009d8:	f7ff fbfc 	bl	80001d4 <strlen>
 80009dc:	4603      	mov	r3, r0
 80009de:	1c59      	adds	r1, r3, #1
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	681a      	ldr	r2, [r3, #0]
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	009b      	lsls	r3, r3, #2
 80009ea:	18d4      	adds	r4, r2, r3
 80009ec:	4608      	mov	r0, r1
 80009ee:	f002 f811 	bl	8002a14 <malloc>
 80009f2:	4603      	mov	r3, r0
 80009f4:	6023      	str	r3, [r4, #0]
    if ((*array)[*capacity] == NULL) {
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	681a      	ldr	r2, [r3, #0]
 80009fa:	68bb      	ldr	r3, [r7, #8]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	009b      	lsls	r3, r3, #2
 8000a00:	4413      	add	r3, r2
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d014      	beq.n	8000a32 <insert+0xba>
        // Memory allocation failed, handle error
        return;
    }

    assign((*array)[*capacity], value);  // Copy the string into the array
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	681a      	ldr	r2, [r3, #0]
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	009b      	lsls	r3, r3, #2
 8000a12:	4413      	add	r3, r2
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	6879      	ldr	r1, [r7, #4]
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f7ff ff89 	bl	8000930 <assign>
    (*capacity)++;  // Increase the array capacity
 8000a1e:	68bb      	ldr	r3, [r7, #8]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	1c5a      	adds	r2, r3, #1
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	601a      	str	r2, [r3, #0]
 8000a28:	e004      	b.n	8000a34 <insert+0xbc>
            return;  // Duplicate found, do not insert
 8000a2a:	bf00      	nop
 8000a2c:	e002      	b.n	8000a34 <insert+0xbc>
        return;
 8000a2e:	bf00      	nop
 8000a30:	e000      	b.n	8000a34 <insert+0xbc>
        return;
 8000a32:	bf00      	nop
}
 8000a34:	371c      	adds	r7, #28
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd90      	pop	{r4, r7, pc}
	...

08000a3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a3c:	b5b0      	push	{r4, r5, r7, lr}
 8000a3e:	b09a      	sub	sp, #104	@ 0x68
 8000a40:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a42:	f000 fc05 	bl	8001250 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a46:	f000 f8e9 	bl	8000c1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a4a:	f000 f9a7 	bl	8000d9c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a4e:	f000 f97b 	bl	8000d48 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000a52:	f000 f94f 	bl	8000cf4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  // Lcd_PortType ports[] = { D4_GPIO_Port, D5_GPIO_Port, D6_GPIO_Port, D7_GPIO_Port };
    Lcd_PortType ports[] = { GPIOA, GPIOA, GPIOB, GPIOB };
 8000a56:	4b65      	ldr	r3, [pc, #404]	@ (8000bec <main+0x1b0>)
 8000a58:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000a5c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a5e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    // Lcd_PinType pins[] = {D4_Pin, D5_Pin, D6_Pin, D7_Pin};
    Lcd_PinType pins[] = {GPIO_PIN_6, GPIO_PIN_5, GPIO_PIN_9, GPIO_PIN_8};
 8000a62:	4a63      	ldr	r2, [pc, #396]	@ (8000bf0 <main+0x1b4>)
 8000a64:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000a68:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a6c:	e883 0003 	stmia.w	r3, {r0, r1}
    Lcd_HandleTypeDef lcd;
    // Lcd_create(ports, pins, RS_GPIO_Port, RS_Pin, EN_GPIO_Port, EN_Pin, LCD_4_BIT_MODE);
    lcd = Lcd_create(ports, pins, GPIOB, GPIO_PIN_6, GPIOA, GPIO_PIN_7, LCD_4_BIT_MODE);
 8000a70:	4638      	mov	r0, r7
 8000a72:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8000a76:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	9303      	str	r3, [sp, #12]
 8000a7e:	2380      	movs	r3, #128	@ 0x80
 8000a80:	9302      	str	r3, [sp, #8]
 8000a82:	4b5c      	ldr	r3, [pc, #368]	@ (8000bf4 <main+0x1b8>)
 8000a84:	9301      	str	r3, [sp, #4]
 8000a86:	2340      	movs	r3, #64	@ 0x40
 8000a88:	9300      	str	r3, [sp, #0]
 8000a8a:	4b5b      	ldr	r3, [pc, #364]	@ (8000bf8 <main+0x1bc>)
 8000a8c:	f7ff fd22 	bl	80004d4 <Lcd_create>
 8000a90:	f107 041c 	add.w	r4, r7, #28
 8000a94:	463d      	mov	r5, r7
 8000a96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a9a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000a9e:	e884 0003 	stmia.w	r4, {r0, r1}
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    button_val = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000aa2:	2101      	movs	r1, #1
 8000aa4:	4853      	ldr	r0, [pc, #332]	@ (8000bf4 <main+0x1b8>)
 8000aa6:	f000 fed3 	bl	8001850 <HAL_GPIO_ReadPin>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	461a      	mov	r2, r3
 8000aae:	4b53      	ldr	r3, [pc, #332]	@ (8000bfc <main+0x1c0>)
 8000ab0:	701a      	strb	r2, [r3, #0]
    if (button_val == 1) {
 8000ab2:	4b52      	ldr	r3, [pc, #328]	@ (8000bfc <main+0x1c0>)
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	2b01      	cmp	r3, #1
 8000ab8:	d13b      	bne.n	8000b32 <main+0xf6>
	      Lcd_cursor(&lcd, 1, 1);
 8000aba:	f107 031c 	add.w	r3, r7, #28
 8000abe:	2201      	movs	r2, #1
 8000ac0:	2101      	movs	r1, #1
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f7ff fd7a 	bl	80005bc <Lcd_cursor>
	    Lcd_string(&lcd, "Students...");
 8000ac8:	f107 031c 	add.w	r3, r7, #28
 8000acc:	494c      	ldr	r1, [pc, #304]	@ (8000c00 <main+0x1c4>)
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f7ff fd54 	bl	800057c <Lcd_string>
    	for (int i = 0; i < capacity; i++){
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	657b      	str	r3, [r7, #84]	@ 0x54
 8000ad8:	e019      	b.n	8000b0e <main+0xd2>
    		  	    	Lcd_cursor(&lcd, 0,1);
 8000ada:	f107 031c 	add.w	r3, r7, #28
 8000ade:	2201      	movs	r2, #1
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f7ff fd6a 	bl	80005bc <Lcd_cursor>
    		  	    	Lcd_string(&lcd, array[i]);
 8000ae8:	4b46      	ldr	r3, [pc, #280]	@ (8000c04 <main+0x1c8>)
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000aee:	009b      	lsls	r3, r3, #2
 8000af0:	4413      	add	r3, r2
 8000af2:	681a      	ldr	r2, [r3, #0]
 8000af4:	f107 031c 	add.w	r3, r7, #28
 8000af8:	4611      	mov	r1, r2
 8000afa:	4618      	mov	r0, r3
 8000afc:	f7ff fd3e 	bl	800057c <Lcd_string>
    		  	    	HAL_Delay (2000);
 8000b00:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000b04:	f000 fc16 	bl	8001334 <HAL_Delay>
    	for (int i = 0; i < capacity; i++){
 8000b08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	657b      	str	r3, [r7, #84]	@ 0x54
 8000b0e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000b10:	4b3d      	ldr	r3, [pc, #244]	@ (8000c08 <main+0x1cc>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	d3e0      	bcc.n	8000ada <main+0x9e>
    		  	      }

    	Lcd_cursor(&lcd, 1,1);
 8000b18:	f107 031c 	add.w	r3, r7, #28
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	2101      	movs	r1, #1
 8000b20:	4618      	mov	r0, r3
 8000b22:	f7ff fd4b 	bl	80005bc <Lcd_cursor>
    	Lcd_string(&lcd, "End of List");
 8000b26:	f107 031c 	add.w	r3, r7, #28
 8000b2a:	4938      	ldr	r1, [pc, #224]	@ (8000c0c <main+0x1d0>)
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f7ff fd25 	bl	800057c <Lcd_string>
    }
    /* USER CODE BEGIN 3 */

	  if(HAL_UART_Receive(&huart1, rx_buff, 5, 1000)==HAL_OK) //if transfer is successful
 8000b32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b36:	2205      	movs	r2, #5
 8000b38:	4935      	ldr	r1, [pc, #212]	@ (8000c10 <main+0x1d4>)
 8000b3a:	4836      	ldr	r0, [pc, #216]	@ (8000c14 <main+0x1d8>)
 8000b3c:	f001 fba2 	bl	8002284 <HAL_UART_Receive>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d14f      	bne.n	8000be6 <main+0x1aa>
	  	    {
	  	      __NOP(); //You need to toggle a breakpoint on this line!
 8000b46:	bf00      	nop

	  	      Lcd_cursor(&lcd, 1, 1);
 8000b48:	f107 031c 	add.w	r3, r7, #28
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	2101      	movs	r1, #1
 8000b50:	4618      	mov	r0, r3
 8000b52:	f7ff fd33 	bl	80005bc <Lcd_cursor>
	  	    Lcd_string(&lcd, "Students...");
 8000b56:	f107 031c 	add.w	r3, r7, #28
 8000b5a:	4929      	ldr	r1, [pc, #164]	@ (8000c00 <main+0x1c4>)
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f7ff fd0d 	bl	800057c <Lcd_string>


	  	      decrypt(rx_buff, 5, current);
 8000b62:	4a2d      	ldr	r2, [pc, #180]	@ (8000c18 <main+0x1dc>)
 8000b64:	2105      	movs	r1, #5
 8000b66:	482a      	ldr	r0, [pc, #168]	@ (8000c10 <main+0x1d4>)
 8000b68:	f7ff fdde 	bl	8000728 <decrypt>
	  	      char *char_array1 = convert_to_char_array(current, sizeof(current));
 8000b6c:	2105      	movs	r1, #5
 8000b6e:	482a      	ldr	r0, [pc, #168]	@ (8000c18 <main+0x1dc>)
 8000b70:	f7ff fe64 	bl	800083c <convert_to_char_array>
 8000b74:	64f8      	str	r0, [r7, #76]	@ 0x4c
	  	      insert(&array, &capacity, char_array1);  // Insert "Hello"
 8000b76:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000b78:	4923      	ldr	r1, [pc, #140]	@ (8000c08 <main+0x1cc>)
 8000b7a:	4822      	ldr	r0, [pc, #136]	@ (8000c04 <main+0x1c8>)
 8000b7c:	f7ff fefc 	bl	8000978 <insert>
	  	      free(char_array1);
 8000b80:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8000b82:	f001 ff4f 	bl	8002a24 <free>
	  	      for (int i = 0; i < capacity; i++){
 8000b86:	2300      	movs	r3, #0
 8000b88:	653b      	str	r3, [r7, #80]	@ 0x50
 8000b8a:	e019      	b.n	8000bc0 <main+0x184>
	  	    	Lcd_cursor(&lcd, 0,1);
 8000b8c:	f107 031c 	add.w	r3, r7, #28
 8000b90:	2201      	movs	r2, #1
 8000b92:	2100      	movs	r1, #0
 8000b94:	4618      	mov	r0, r3
 8000b96:	f7ff fd11 	bl	80005bc <Lcd_cursor>
	  	    	Lcd_string(&lcd, array[i]);
 8000b9a:	4b1a      	ldr	r3, [pc, #104]	@ (8000c04 <main+0x1c8>)
 8000b9c:	681a      	ldr	r2, [r3, #0]
 8000b9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000ba0:	009b      	lsls	r3, r3, #2
 8000ba2:	4413      	add	r3, r2
 8000ba4:	681a      	ldr	r2, [r3, #0]
 8000ba6:	f107 031c 	add.w	r3, r7, #28
 8000baa:	4611      	mov	r1, r2
 8000bac:	4618      	mov	r0, r3
 8000bae:	f7ff fce5 	bl	800057c <Lcd_string>
	  	    	HAL_Delay (2000);
 8000bb2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000bb6:	f000 fbbd 	bl	8001334 <HAL_Delay>
	  	      for (int i = 0; i < capacity; i++){
 8000bba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	653b      	str	r3, [r7, #80]	@ 0x50
 8000bc0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8000bc2:	4b11      	ldr	r3, [pc, #68]	@ (8000c08 <main+0x1cc>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	429a      	cmp	r2, r3
 8000bc8:	d3e0      	bcc.n	8000b8c <main+0x150>
	  	      }

	  	   	Lcd_cursor(&lcd, 1,1);
 8000bca:	f107 031c 	add.w	r3, r7, #28
 8000bce:	2201      	movs	r2, #1
 8000bd0:	2101      	movs	r1, #1
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f7ff fcf2 	bl	80005bc <Lcd_cursor>
	  	    	Lcd_string(&lcd, "End of List");
 8000bd8:	f107 031c 	add.w	r3, r7, #28
 8000bdc:	490b      	ldr	r1, [pc, #44]	@ (8000c0c <main+0x1d0>)
 8000bde:	4618      	mov	r0, r3
 8000be0:	f7ff fccc 	bl	800057c <Lcd_string>
 8000be4:	e75d      	b.n	8000aa2 <main+0x66>

	  	    } else {
	  	      __NOP();
 8000be6:	bf00      	nop
    button_val = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000be8:	e75b      	b.n	8000aa2 <main+0x66>
 8000bea:	bf00      	nop
 8000bec:	08003488 	.word	0x08003488
 8000bf0:	08003498 	.word	0x08003498
 8000bf4:	40020000 	.word	0x40020000
 8000bf8:	40020400 	.word	0x40020400
 8000bfc:	20000121 	.word	0x20000121
 8000c00:	08003470 	.word	0x08003470
 8000c04:	20000124 	.word	0x20000124
 8000c08:	20000128 	.word	0x20000128
 8000c0c:	0800347c 	.word	0x0800347c
 8000c10:	2000011c 	.word	0x2000011c
 8000c14:	20000084 	.word	0x20000084
 8000c18:	20000114 	.word	0x20000114

08000c1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b094      	sub	sp, #80	@ 0x50
 8000c20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c22:	f107 0320 	add.w	r3, r7, #32
 8000c26:	2230      	movs	r2, #48	@ 0x30
 8000c28:	2100      	movs	r1, #0
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f002 f9de 	bl	8002fec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c30:	f107 030c 	add.w	r3, r7, #12
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
 8000c3a:	609a      	str	r2, [r3, #8]
 8000c3c:	60da      	str	r2, [r3, #12]
 8000c3e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c40:	2300      	movs	r3, #0
 8000c42:	60bb      	str	r3, [r7, #8]
 8000c44:	4b29      	ldr	r3, [pc, #164]	@ (8000cec <SystemClock_Config+0xd0>)
 8000c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c48:	4a28      	ldr	r2, [pc, #160]	@ (8000cec <SystemClock_Config+0xd0>)
 8000c4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c4e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c50:	4b26      	ldr	r3, [pc, #152]	@ (8000cec <SystemClock_Config+0xd0>)
 8000c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c58:	60bb      	str	r3, [r7, #8]
 8000c5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	607b      	str	r3, [r7, #4]
 8000c60:	4b23      	ldr	r3, [pc, #140]	@ (8000cf0 <SystemClock_Config+0xd4>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000c68:	4a21      	ldr	r2, [pc, #132]	@ (8000cf0 <SystemClock_Config+0xd4>)
 8000c6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000c6e:	6013      	str	r3, [r2, #0]
 8000c70:	4b1f      	ldr	r3, [pc, #124]	@ (8000cf0 <SystemClock_Config+0xd4>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c78:	607b      	str	r3, [r7, #4]
 8000c7a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c80:	2301      	movs	r3, #1
 8000c82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c84:	2310      	movs	r3, #16
 8000c86:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000c90:	2310      	movs	r3, #16
 8000c92:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000c94:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000c98:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000c9a:	2304      	movs	r3, #4
 8000c9c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000c9e:	2307      	movs	r3, #7
 8000ca0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ca2:	f107 0320 	add.w	r3, r7, #32
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f000 fe04 	bl	80018b4 <HAL_RCC_OscConfig>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000cb2:	f000 f915 	bl	8000ee0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cb6:	230f      	movs	r3, #15
 8000cb8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cc2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cc6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ccc:	f107 030c 	add.w	r3, r7, #12
 8000cd0:	2102      	movs	r1, #2
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f001 f866 	bl	8001da4 <HAL_RCC_ClockConfig>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000cde:	f000 f8ff 	bl	8000ee0 <Error_Handler>
  }
}
 8000ce2:	bf00      	nop
 8000ce4:	3750      	adds	r7, #80	@ 0x50
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40023800 	.word	0x40023800
 8000cf0:	40007000 	.word	0x40007000

08000cf4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000cf8:	4b11      	ldr	r3, [pc, #68]	@ (8000d40 <MX_USART1_UART_Init+0x4c>)
 8000cfa:	4a12      	ldr	r2, [pc, #72]	@ (8000d44 <MX_USART1_UART_Init+0x50>)
 8000cfc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000cfe:	4b10      	ldr	r3, [pc, #64]	@ (8000d40 <MX_USART1_UART_Init+0x4c>)
 8000d00:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d04:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d06:	4b0e      	ldr	r3, [pc, #56]	@ (8000d40 <MX_USART1_UART_Init+0x4c>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d40 <MX_USART1_UART_Init+0x4c>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d12:	4b0b      	ldr	r3, [pc, #44]	@ (8000d40 <MX_USART1_UART_Init+0x4c>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d18:	4b09      	ldr	r3, [pc, #36]	@ (8000d40 <MX_USART1_UART_Init+0x4c>)
 8000d1a:	220c      	movs	r2, #12
 8000d1c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d1e:	4b08      	ldr	r3, [pc, #32]	@ (8000d40 <MX_USART1_UART_Init+0x4c>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d24:	4b06      	ldr	r3, [pc, #24]	@ (8000d40 <MX_USART1_UART_Init+0x4c>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d2a:	4805      	ldr	r0, [pc, #20]	@ (8000d40 <MX_USART1_UART_Init+0x4c>)
 8000d2c:	f001 fa5a 	bl	80021e4 <HAL_UART_Init>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d36:	f000 f8d3 	bl	8000ee0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20000084 	.word	0x20000084
 8000d44:	40011000 	.word	0x40011000

08000d48 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d4c:	4b11      	ldr	r3, [pc, #68]	@ (8000d94 <MX_USART2_UART_Init+0x4c>)
 8000d4e:	4a12      	ldr	r2, [pc, #72]	@ (8000d98 <MX_USART2_UART_Init+0x50>)
 8000d50:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d52:	4b10      	ldr	r3, [pc, #64]	@ (8000d94 <MX_USART2_UART_Init+0x4c>)
 8000d54:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d58:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d94 <MX_USART2_UART_Init+0x4c>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d60:	4b0c      	ldr	r3, [pc, #48]	@ (8000d94 <MX_USART2_UART_Init+0x4c>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d66:	4b0b      	ldr	r3, [pc, #44]	@ (8000d94 <MX_USART2_UART_Init+0x4c>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d6c:	4b09      	ldr	r3, [pc, #36]	@ (8000d94 <MX_USART2_UART_Init+0x4c>)
 8000d6e:	220c      	movs	r2, #12
 8000d70:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d72:	4b08      	ldr	r3, [pc, #32]	@ (8000d94 <MX_USART2_UART_Init+0x4c>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d78:	4b06      	ldr	r3, [pc, #24]	@ (8000d94 <MX_USART2_UART_Init+0x4c>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d7e:	4805      	ldr	r0, [pc, #20]	@ (8000d94 <MX_USART2_UART_Init+0x4c>)
 8000d80:	f001 fa30 	bl	80021e4 <HAL_UART_Init>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d8a:	f000 f8a9 	bl	8000ee0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	200000cc 	.word	0x200000cc
 8000d98:	40004400 	.word	0x40004400

08000d9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b08a      	sub	sp, #40	@ 0x28
 8000da0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da2:	f107 0314 	add.w	r3, r7, #20
 8000da6:	2200      	movs	r2, #0
 8000da8:	601a      	str	r2, [r3, #0]
 8000daa:	605a      	str	r2, [r3, #4]
 8000dac:	609a      	str	r2, [r3, #8]
 8000dae:	60da      	str	r2, [r3, #12]
 8000db0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	613b      	str	r3, [r7, #16]
 8000db6:	4b46      	ldr	r3, [pc, #280]	@ (8000ed0 <MX_GPIO_Init+0x134>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dba:	4a45      	ldr	r2, [pc, #276]	@ (8000ed0 <MX_GPIO_Init+0x134>)
 8000dbc:	f043 0304 	orr.w	r3, r3, #4
 8000dc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dc2:	4b43      	ldr	r3, [pc, #268]	@ (8000ed0 <MX_GPIO_Init+0x134>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc6:	f003 0304 	and.w	r3, r3, #4
 8000dca:	613b      	str	r3, [r7, #16]
 8000dcc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dce:	2300      	movs	r3, #0
 8000dd0:	60fb      	str	r3, [r7, #12]
 8000dd2:	4b3f      	ldr	r3, [pc, #252]	@ (8000ed0 <MX_GPIO_Init+0x134>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd6:	4a3e      	ldr	r2, [pc, #248]	@ (8000ed0 <MX_GPIO_Init+0x134>)
 8000dd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ddc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dde:	4b3c      	ldr	r3, [pc, #240]	@ (8000ed0 <MX_GPIO_Init+0x134>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	60bb      	str	r3, [r7, #8]
 8000dee:	4b38      	ldr	r3, [pc, #224]	@ (8000ed0 <MX_GPIO_Init+0x134>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df2:	4a37      	ldr	r2, [pc, #220]	@ (8000ed0 <MX_GPIO_Init+0x134>)
 8000df4:	f043 0301 	orr.w	r3, r3, #1
 8000df8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dfa:	4b35      	ldr	r3, [pc, #212]	@ (8000ed0 <MX_GPIO_Init+0x134>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfe:	f003 0301 	and.w	r3, r3, #1
 8000e02:	60bb      	str	r3, [r7, #8]
 8000e04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	607b      	str	r3, [r7, #4]
 8000e0a:	4b31      	ldr	r3, [pc, #196]	@ (8000ed0 <MX_GPIO_Init+0x134>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e0e:	4a30      	ldr	r2, [pc, #192]	@ (8000ed0 <MX_GPIO_Init+0x134>)
 8000e10:	f043 0302 	orr.w	r3, r3, #2
 8000e14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e16:	4b2e      	ldr	r3, [pc, #184]	@ (8000ed0 <MX_GPIO_Init+0x134>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1a:	f003 0302 	and.w	r3, r3, #2
 8000e1e:	607b      	str	r3, [r7, #4]
 8000e20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000e22:	2200      	movs	r2, #0
 8000e24:	21e0      	movs	r1, #224	@ 0xe0
 8000e26:	482b      	ldr	r0, [pc, #172]	@ (8000ed4 <MX_GPIO_Init+0x138>)
 8000e28:	f000 fd2a 	bl	8001880 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	f44f 7150 	mov.w	r1, #832	@ 0x340
 8000e32:	4829      	ldr	r0, [pc, #164]	@ (8000ed8 <MX_GPIO_Init+0x13c>)
 8000e34:	f000 fd24 	bl	8001880 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e38:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e3e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000e42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	2300      	movs	r3, #0
 8000e46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e48:	f107 0314 	add.w	r3, r7, #20
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4823      	ldr	r0, [pc, #140]	@ (8000edc <MX_GPIO_Init+0x140>)
 8000e50:	f000 fb7a 	bl	8001548 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e54:	2301      	movs	r3, #1
 8000e56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e60:	f107 0314 	add.w	r3, r7, #20
 8000e64:	4619      	mov	r1, r3
 8000e66:	481b      	ldr	r0, [pc, #108]	@ (8000ed4 <MX_GPIO_Init+0x138>)
 8000e68:	f000 fb6e 	bl	8001548 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000e6c:	23e0      	movs	r3, #224	@ 0xe0
 8000e6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e70:	2301      	movs	r3, #1
 8000e72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e74:	2300      	movs	r3, #0
 8000e76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7c:	f107 0314 	add.w	r3, r7, #20
 8000e80:	4619      	mov	r1, r3
 8000e82:	4814      	ldr	r0, [pc, #80]	@ (8000ed4 <MX_GPIO_Init+0x138>)
 8000e84:	f000 fb60 	bl	8001548 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e88:	2310      	movs	r3, #16
 8000e8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e8c:	2312      	movs	r3, #18
 8000e8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	2300      	movs	r3, #0
 8000e92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e94:	2303      	movs	r3, #3
 8000e96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 8000e98:	2309      	movs	r3, #9
 8000e9a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e9c:	f107 0314 	add.w	r3, r7, #20
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	480d      	ldr	r0, [pc, #52]	@ (8000ed8 <MX_GPIO_Init+0x13c>)
 8000ea4:	f000 fb50 	bl	8001548 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 8000ea8:	f44f 7350 	mov.w	r3, #832	@ 0x340
 8000eac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eba:	f107 0314 	add.w	r3, r7, #20
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	4805      	ldr	r0, [pc, #20]	@ (8000ed8 <MX_GPIO_Init+0x13c>)
 8000ec2:	f000 fb41 	bl	8001548 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ec6:	bf00      	nop
 8000ec8:	3728      	adds	r7, #40	@ 0x28
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	40023800 	.word	0x40023800
 8000ed4:	40020000 	.word	0x40020000
 8000ed8:	40020400 	.word	0x40020400
 8000edc:	40020800 	.word	0x40020800

08000ee0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ee4:	b672      	cpsid	i
}
 8000ee6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ee8:	bf00      	nop
 8000eea:	e7fd      	b.n	8000ee8 <Error_Handler+0x8>

08000eec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	607b      	str	r3, [r7, #4]
 8000ef6:	4b10      	ldr	r3, [pc, #64]	@ (8000f38 <HAL_MspInit+0x4c>)
 8000ef8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000efa:	4a0f      	ldr	r2, [pc, #60]	@ (8000f38 <HAL_MspInit+0x4c>)
 8000efc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f00:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f02:	4b0d      	ldr	r3, [pc, #52]	@ (8000f38 <HAL_MspInit+0x4c>)
 8000f04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f0a:	607b      	str	r3, [r7, #4]
 8000f0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	603b      	str	r3, [r7, #0]
 8000f12:	4b09      	ldr	r3, [pc, #36]	@ (8000f38 <HAL_MspInit+0x4c>)
 8000f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f16:	4a08      	ldr	r2, [pc, #32]	@ (8000f38 <HAL_MspInit+0x4c>)
 8000f18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f1e:	4b06      	ldr	r3, [pc, #24]	@ (8000f38 <HAL_MspInit+0x4c>)
 8000f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f26:	603b      	str	r3, [r7, #0]
 8000f28:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f2a:	2007      	movs	r0, #7
 8000f2c:	f000 fad8 	bl	80014e0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f30:	bf00      	nop
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	40023800 	.word	0x40023800

08000f3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b08c      	sub	sp, #48	@ 0x30
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f44:	f107 031c 	add.w	r3, r7, #28
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]
 8000f52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a32      	ldr	r2, [pc, #200]	@ (8001024 <HAL_UART_MspInit+0xe8>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d12d      	bne.n	8000fba <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f5e:	2300      	movs	r3, #0
 8000f60:	61bb      	str	r3, [r7, #24]
 8000f62:	4b31      	ldr	r3, [pc, #196]	@ (8001028 <HAL_UART_MspInit+0xec>)
 8000f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f66:	4a30      	ldr	r2, [pc, #192]	@ (8001028 <HAL_UART_MspInit+0xec>)
 8000f68:	f043 0310 	orr.w	r3, r3, #16
 8000f6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f6e:	4b2e      	ldr	r3, [pc, #184]	@ (8001028 <HAL_UART_MspInit+0xec>)
 8000f70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f72:	f003 0310 	and.w	r3, r3, #16
 8000f76:	61bb      	str	r3, [r7, #24]
 8000f78:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	617b      	str	r3, [r7, #20]
 8000f7e:	4b2a      	ldr	r3, [pc, #168]	@ (8001028 <HAL_UART_MspInit+0xec>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f82:	4a29      	ldr	r2, [pc, #164]	@ (8001028 <HAL_UART_MspInit+0xec>)
 8000f84:	f043 0301 	orr.w	r3, r3, #1
 8000f88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f8a:	4b27      	ldr	r3, [pc, #156]	@ (8001028 <HAL_UART_MspInit+0xec>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8e:	f003 0301 	and.w	r3, r3, #1
 8000f92:	617b      	str	r3, [r7, #20]
 8000f94:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000f96:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000f9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fa8:	2307      	movs	r3, #7
 8000faa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fac:	f107 031c 	add.w	r3, r7, #28
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	481e      	ldr	r0, [pc, #120]	@ (800102c <HAL_UART_MspInit+0xf0>)
 8000fb4:	f000 fac8 	bl	8001548 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000fb8:	e030      	b.n	800101c <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a1c      	ldr	r2, [pc, #112]	@ (8001030 <HAL_UART_MspInit+0xf4>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d12b      	bne.n	800101c <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	613b      	str	r3, [r7, #16]
 8000fc8:	4b17      	ldr	r3, [pc, #92]	@ (8001028 <HAL_UART_MspInit+0xec>)
 8000fca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fcc:	4a16      	ldr	r2, [pc, #88]	@ (8001028 <HAL_UART_MspInit+0xec>)
 8000fce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fd2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fd4:	4b14      	ldr	r3, [pc, #80]	@ (8001028 <HAL_UART_MspInit+0xec>)
 8000fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fdc:	613b      	str	r3, [r7, #16]
 8000fde:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	4b10      	ldr	r3, [pc, #64]	@ (8001028 <HAL_UART_MspInit+0xec>)
 8000fe6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe8:	4a0f      	ldr	r2, [pc, #60]	@ (8001028 <HAL_UART_MspInit+0xec>)
 8000fea:	f043 0301 	orr.w	r3, r3, #1
 8000fee:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ff0:	4b0d      	ldr	r3, [pc, #52]	@ (8001028 <HAL_UART_MspInit+0xec>)
 8000ff2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff4:	f003 0301 	and.w	r3, r3, #1
 8000ff8:	60fb      	str	r3, [r7, #12]
 8000ffa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ffc:	230c      	movs	r3, #12
 8000ffe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001000:	2302      	movs	r3, #2
 8001002:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001004:	2300      	movs	r3, #0
 8001006:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001008:	2300      	movs	r3, #0
 800100a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800100c:	2307      	movs	r3, #7
 800100e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001010:	f107 031c 	add.w	r3, r7, #28
 8001014:	4619      	mov	r1, r3
 8001016:	4805      	ldr	r0, [pc, #20]	@ (800102c <HAL_UART_MspInit+0xf0>)
 8001018:	f000 fa96 	bl	8001548 <HAL_GPIO_Init>
}
 800101c:	bf00      	nop
 800101e:	3730      	adds	r7, #48	@ 0x30
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	40011000 	.word	0x40011000
 8001028:	40023800 	.word	0x40023800
 800102c:	40020000 	.word	0x40020000
 8001030:	40004400 	.word	0x40004400

08001034 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001038:	bf00      	nop
 800103a:	e7fd      	b.n	8001038 <NMI_Handler+0x4>

0800103c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001040:	bf00      	nop
 8001042:	e7fd      	b.n	8001040 <HardFault_Handler+0x4>

08001044 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001048:	bf00      	nop
 800104a:	e7fd      	b.n	8001048 <MemManage_Handler+0x4>

0800104c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001050:	bf00      	nop
 8001052:	e7fd      	b.n	8001050 <BusFault_Handler+0x4>

08001054 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001058:	bf00      	nop
 800105a:	e7fd      	b.n	8001058 <UsageFault_Handler+0x4>

0800105c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001060:	bf00      	nop
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr

0800106a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800106a:	b480      	push	{r7}
 800106c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800106e:	bf00      	nop
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800107c:	bf00      	nop
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr

08001086 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001086:	b580      	push	{r7, lr}
 8001088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800108a:	f000 f933 	bl	80012f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}

08001092 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001092:	b580      	push	{r7, lr}
 8001094:	b086      	sub	sp, #24
 8001096:	af00      	add	r7, sp, #0
 8001098:	60f8      	str	r0, [r7, #12]
 800109a:	60b9      	str	r1, [r7, #8]
 800109c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800109e:	2300      	movs	r3, #0
 80010a0:	617b      	str	r3, [r7, #20]
 80010a2:	e00a      	b.n	80010ba <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80010a4:	f3af 8000 	nop.w
 80010a8:	4601      	mov	r1, r0
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	1c5a      	adds	r2, r3, #1
 80010ae:	60ba      	str	r2, [r7, #8]
 80010b0:	b2ca      	uxtb	r2, r1
 80010b2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	3301      	adds	r3, #1
 80010b8:	617b      	str	r3, [r7, #20]
 80010ba:	697a      	ldr	r2, [r7, #20]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	429a      	cmp	r2, r3
 80010c0:	dbf0      	blt.n	80010a4 <_read+0x12>
  }

  return len;
 80010c2:	687b      	ldr	r3, [r7, #4]
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3718      	adds	r7, #24
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	60b9      	str	r1, [r7, #8]
 80010d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010d8:	2300      	movs	r3, #0
 80010da:	617b      	str	r3, [r7, #20]
 80010dc:	e009      	b.n	80010f2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80010de:	68bb      	ldr	r3, [r7, #8]
 80010e0:	1c5a      	adds	r2, r3, #1
 80010e2:	60ba      	str	r2, [r7, #8]
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	4618      	mov	r0, r3
 80010e8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	3301      	adds	r3, #1
 80010f0:	617b      	str	r3, [r7, #20]
 80010f2:	697a      	ldr	r2, [r7, #20]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	429a      	cmp	r2, r3
 80010f8:	dbf1      	blt.n	80010de <_write+0x12>
  }
  return len;
 80010fa:	687b      	ldr	r3, [r7, #4]
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3718      	adds	r7, #24
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}

08001104 <_close>:

int _close(int file)
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800110c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001110:	4618      	mov	r0, r3
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800112c:	605a      	str	r2, [r3, #4]
  return 0;
 800112e:	2300      	movs	r3, #0
}
 8001130:	4618      	mov	r0, r3
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr

0800113c <_isatty>:

int _isatty(int file)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001144:	2301      	movs	r3, #1
}
 8001146:	4618      	mov	r0, r3
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr

08001152 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001152:	b480      	push	{r7}
 8001154:	b085      	sub	sp, #20
 8001156:	af00      	add	r7, sp, #0
 8001158:	60f8      	str	r0, [r7, #12]
 800115a:	60b9      	str	r1, [r7, #8]
 800115c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800115e:	2300      	movs	r3, #0
}
 8001160:	4618      	mov	r0, r3
 8001162:	3714      	adds	r7, #20
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr

0800116c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b086      	sub	sp, #24
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001174:	4a14      	ldr	r2, [pc, #80]	@ (80011c8 <_sbrk+0x5c>)
 8001176:	4b15      	ldr	r3, [pc, #84]	@ (80011cc <_sbrk+0x60>)
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001180:	4b13      	ldr	r3, [pc, #76]	@ (80011d0 <_sbrk+0x64>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d102      	bne.n	800118e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001188:	4b11      	ldr	r3, [pc, #68]	@ (80011d0 <_sbrk+0x64>)
 800118a:	4a12      	ldr	r2, [pc, #72]	@ (80011d4 <_sbrk+0x68>)
 800118c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800118e:	4b10      	ldr	r3, [pc, #64]	@ (80011d0 <_sbrk+0x64>)
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4413      	add	r3, r2
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	429a      	cmp	r2, r3
 800119a:	d207      	bcs.n	80011ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800119c:	f001 ff84 	bl	80030a8 <__errno>
 80011a0:	4603      	mov	r3, r0
 80011a2:	220c      	movs	r2, #12
 80011a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011a6:	f04f 33ff 	mov.w	r3, #4294967295
 80011aa:	e009      	b.n	80011c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011ac:	4b08      	ldr	r3, [pc, #32]	@ (80011d0 <_sbrk+0x64>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011b2:	4b07      	ldr	r3, [pc, #28]	@ (80011d0 <_sbrk+0x64>)
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4413      	add	r3, r2
 80011ba:	4a05      	ldr	r2, [pc, #20]	@ (80011d0 <_sbrk+0x64>)
 80011bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011be:	68fb      	ldr	r3, [r7, #12]
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3718      	adds	r7, #24
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	20018000 	.word	0x20018000
 80011cc:	00000400 	.word	0x00000400
 80011d0:	2000012c 	.word	0x2000012c
 80011d4:	20000280 	.word	0x20000280

080011d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011dc:	4b06      	ldr	r3, [pc, #24]	@ (80011f8 <SystemInit+0x20>)
 80011de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011e2:	4a05      	ldr	r2, [pc, #20]	@ (80011f8 <SystemInit+0x20>)
 80011e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011ec:	bf00      	nop
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	e000ed00 	.word	0xe000ed00

080011fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80011fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001234 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001200:	f7ff ffea 	bl	80011d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001204:	480c      	ldr	r0, [pc, #48]	@ (8001238 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001206:	490d      	ldr	r1, [pc, #52]	@ (800123c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001208:	4a0d      	ldr	r2, [pc, #52]	@ (8001240 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800120a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800120c:	e002      	b.n	8001214 <LoopCopyDataInit>

0800120e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800120e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001210:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001212:	3304      	adds	r3, #4

08001214 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001214:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001216:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001218:	d3f9      	bcc.n	800120e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800121a:	4a0a      	ldr	r2, [pc, #40]	@ (8001244 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800121c:	4c0a      	ldr	r4, [pc, #40]	@ (8001248 <LoopFillZerobss+0x22>)
  movs r3, #0
 800121e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001220:	e001      	b.n	8001226 <LoopFillZerobss>

08001222 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001222:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001224:	3204      	adds	r2, #4

08001226 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001226:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001228:	d3fb      	bcc.n	8001222 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800122a:	f001 ff43 	bl	80030b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800122e:	f7ff fc05 	bl	8000a3c <main>
  bx  lr    
 8001232:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001234:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001238:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800123c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001240:	080034cc 	.word	0x080034cc
  ldr r2, =_sbss
 8001244:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001248:	20000280 	.word	0x20000280

0800124c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800124c:	e7fe      	b.n	800124c <ADC_IRQHandler>
	...

08001250 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001254:	4b0e      	ldr	r3, [pc, #56]	@ (8001290 <HAL_Init+0x40>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a0d      	ldr	r2, [pc, #52]	@ (8001290 <HAL_Init+0x40>)
 800125a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800125e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001260:	4b0b      	ldr	r3, [pc, #44]	@ (8001290 <HAL_Init+0x40>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a0a      	ldr	r2, [pc, #40]	@ (8001290 <HAL_Init+0x40>)
 8001266:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800126a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800126c:	4b08      	ldr	r3, [pc, #32]	@ (8001290 <HAL_Init+0x40>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a07      	ldr	r2, [pc, #28]	@ (8001290 <HAL_Init+0x40>)
 8001272:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001276:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001278:	2003      	movs	r0, #3
 800127a:	f000 f931 	bl	80014e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800127e:	2000      	movs	r0, #0
 8001280:	f000 f808 	bl	8001294 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001284:	f7ff fe32 	bl	8000eec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001288:	2300      	movs	r3, #0
}
 800128a:	4618      	mov	r0, r3
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40023c00 	.word	0x40023c00

08001294 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800129c:	4b12      	ldr	r3, [pc, #72]	@ (80012e8 <HAL_InitTick+0x54>)
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	4b12      	ldr	r3, [pc, #72]	@ (80012ec <HAL_InitTick+0x58>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	4619      	mov	r1, r3
 80012a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80012ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80012b2:	4618      	mov	r0, r3
 80012b4:	f000 f93b 	bl	800152e <HAL_SYSTICK_Config>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e00e      	b.n	80012e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2b0f      	cmp	r3, #15
 80012c6:	d80a      	bhi.n	80012de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012c8:	2200      	movs	r2, #0
 80012ca:	6879      	ldr	r1, [r7, #4]
 80012cc:	f04f 30ff 	mov.w	r0, #4294967295
 80012d0:	f000 f911 	bl	80014f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012d4:	4a06      	ldr	r2, [pc, #24]	@ (80012f0 <HAL_InitTick+0x5c>)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012da:	2300      	movs	r3, #0
 80012dc:	e000      	b.n	80012e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	20000000 	.word	0x20000000
 80012ec:	20000008 	.word	0x20000008
 80012f0:	20000004 	.word	0x20000004

080012f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012f8:	4b06      	ldr	r3, [pc, #24]	@ (8001314 <HAL_IncTick+0x20>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	461a      	mov	r2, r3
 80012fe:	4b06      	ldr	r3, [pc, #24]	@ (8001318 <HAL_IncTick+0x24>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4413      	add	r3, r2
 8001304:	4a04      	ldr	r2, [pc, #16]	@ (8001318 <HAL_IncTick+0x24>)
 8001306:	6013      	str	r3, [r2, #0]
}
 8001308:	bf00      	nop
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	20000008 	.word	0x20000008
 8001318:	20000130 	.word	0x20000130

0800131c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  return uwTick;
 8001320:	4b03      	ldr	r3, [pc, #12]	@ (8001330 <HAL_GetTick+0x14>)
 8001322:	681b      	ldr	r3, [r3, #0]
}
 8001324:	4618      	mov	r0, r3
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	20000130 	.word	0x20000130

08001334 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800133c:	f7ff ffee 	bl	800131c <HAL_GetTick>
 8001340:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800134c:	d005      	beq.n	800135a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800134e:	4b0a      	ldr	r3, [pc, #40]	@ (8001378 <HAL_Delay+0x44>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	461a      	mov	r2, r3
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	4413      	add	r3, r2
 8001358:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800135a:	bf00      	nop
 800135c:	f7ff ffde 	bl	800131c <HAL_GetTick>
 8001360:	4602      	mov	r2, r0
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	68fa      	ldr	r2, [r7, #12]
 8001368:	429a      	cmp	r2, r3
 800136a:	d8f7      	bhi.n	800135c <HAL_Delay+0x28>
  {
  }
}
 800136c:	bf00      	nop
 800136e:	bf00      	nop
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	20000008 	.word	0x20000008

0800137c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800137c:	b480      	push	{r7}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	f003 0307 	and.w	r3, r3, #7
 800138a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800138c:	4b0c      	ldr	r3, [pc, #48]	@ (80013c0 <__NVIC_SetPriorityGrouping+0x44>)
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001392:	68ba      	ldr	r2, [r7, #8]
 8001394:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001398:	4013      	ands	r3, r2
 800139a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80013a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013ae:	4a04      	ldr	r2, [pc, #16]	@ (80013c0 <__NVIC_SetPriorityGrouping+0x44>)
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	60d3      	str	r3, [r2, #12]
}
 80013b4:	bf00      	nop
 80013b6:	3714      	adds	r7, #20
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	e000ed00 	.word	0xe000ed00

080013c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013c8:	4b04      	ldr	r3, [pc, #16]	@ (80013dc <__NVIC_GetPriorityGrouping+0x18>)
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	0a1b      	lsrs	r3, r3, #8
 80013ce:	f003 0307 	and.w	r3, r3, #7
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	e000ed00 	.word	0xe000ed00

080013e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	6039      	str	r1, [r7, #0]
 80013ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	db0a      	blt.n	800140a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	b2da      	uxtb	r2, r3
 80013f8:	490c      	ldr	r1, [pc, #48]	@ (800142c <__NVIC_SetPriority+0x4c>)
 80013fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fe:	0112      	lsls	r2, r2, #4
 8001400:	b2d2      	uxtb	r2, r2
 8001402:	440b      	add	r3, r1
 8001404:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001408:	e00a      	b.n	8001420 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	b2da      	uxtb	r2, r3
 800140e:	4908      	ldr	r1, [pc, #32]	@ (8001430 <__NVIC_SetPriority+0x50>)
 8001410:	79fb      	ldrb	r3, [r7, #7]
 8001412:	f003 030f 	and.w	r3, r3, #15
 8001416:	3b04      	subs	r3, #4
 8001418:	0112      	lsls	r2, r2, #4
 800141a:	b2d2      	uxtb	r2, r2
 800141c:	440b      	add	r3, r1
 800141e:	761a      	strb	r2, [r3, #24]
}
 8001420:	bf00      	nop
 8001422:	370c      	adds	r7, #12
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr
 800142c:	e000e100 	.word	0xe000e100
 8001430:	e000ed00 	.word	0xe000ed00

08001434 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001434:	b480      	push	{r7}
 8001436:	b089      	sub	sp, #36	@ 0x24
 8001438:	af00      	add	r7, sp, #0
 800143a:	60f8      	str	r0, [r7, #12]
 800143c:	60b9      	str	r1, [r7, #8]
 800143e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	f003 0307 	and.w	r3, r3, #7
 8001446:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	f1c3 0307 	rsb	r3, r3, #7
 800144e:	2b04      	cmp	r3, #4
 8001450:	bf28      	it	cs
 8001452:	2304      	movcs	r3, #4
 8001454:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	3304      	adds	r3, #4
 800145a:	2b06      	cmp	r3, #6
 800145c:	d902      	bls.n	8001464 <NVIC_EncodePriority+0x30>
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	3b03      	subs	r3, #3
 8001462:	e000      	b.n	8001466 <NVIC_EncodePriority+0x32>
 8001464:	2300      	movs	r3, #0
 8001466:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001468:	f04f 32ff 	mov.w	r2, #4294967295
 800146c:	69bb      	ldr	r3, [r7, #24]
 800146e:	fa02 f303 	lsl.w	r3, r2, r3
 8001472:	43da      	mvns	r2, r3
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	401a      	ands	r2, r3
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800147c:	f04f 31ff 	mov.w	r1, #4294967295
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	fa01 f303 	lsl.w	r3, r1, r3
 8001486:	43d9      	mvns	r1, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800148c:	4313      	orrs	r3, r2
         );
}
 800148e:	4618      	mov	r0, r3
 8001490:	3724      	adds	r7, #36	@ 0x24
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
	...

0800149c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	3b01      	subs	r3, #1
 80014a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014ac:	d301      	bcc.n	80014b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014ae:	2301      	movs	r3, #1
 80014b0:	e00f      	b.n	80014d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014b2:	4a0a      	ldr	r2, [pc, #40]	@ (80014dc <SysTick_Config+0x40>)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	3b01      	subs	r3, #1
 80014b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014ba:	210f      	movs	r1, #15
 80014bc:	f04f 30ff 	mov.w	r0, #4294967295
 80014c0:	f7ff ff8e 	bl	80013e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014c4:	4b05      	ldr	r3, [pc, #20]	@ (80014dc <SysTick_Config+0x40>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014ca:	4b04      	ldr	r3, [pc, #16]	@ (80014dc <SysTick_Config+0x40>)
 80014cc:	2207      	movs	r2, #7
 80014ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014d0:	2300      	movs	r3, #0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	e000e010 	.word	0xe000e010

080014e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f7ff ff47 	bl	800137c <__NVIC_SetPriorityGrouping>
}
 80014ee:	bf00      	nop
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b086      	sub	sp, #24
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	4603      	mov	r3, r0
 80014fe:	60b9      	str	r1, [r7, #8]
 8001500:	607a      	str	r2, [r7, #4]
 8001502:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001504:	2300      	movs	r3, #0
 8001506:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001508:	f7ff ff5c 	bl	80013c4 <__NVIC_GetPriorityGrouping>
 800150c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	68b9      	ldr	r1, [r7, #8]
 8001512:	6978      	ldr	r0, [r7, #20]
 8001514:	f7ff ff8e 	bl	8001434 <NVIC_EncodePriority>
 8001518:	4602      	mov	r2, r0
 800151a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800151e:	4611      	mov	r1, r2
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff ff5d 	bl	80013e0 <__NVIC_SetPriority>
}
 8001526:	bf00      	nop
 8001528:	3718      	adds	r7, #24
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}

0800152e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800152e:	b580      	push	{r7, lr}
 8001530:	b082      	sub	sp, #8
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f7ff ffb0 	bl	800149c <SysTick_Config>
 800153c:	4603      	mov	r3, r0
}
 800153e:	4618      	mov	r0, r3
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
	...

08001548 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001548:	b480      	push	{r7}
 800154a:	b089      	sub	sp, #36	@ 0x24
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001552:	2300      	movs	r3, #0
 8001554:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001556:	2300      	movs	r3, #0
 8001558:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800155a:	2300      	movs	r3, #0
 800155c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800155e:	2300      	movs	r3, #0
 8001560:	61fb      	str	r3, [r7, #28]
 8001562:	e159      	b.n	8001818 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001564:	2201      	movs	r2, #1
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	697a      	ldr	r2, [r7, #20]
 8001574:	4013      	ands	r3, r2
 8001576:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001578:	693a      	ldr	r2, [r7, #16]
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	429a      	cmp	r2, r3
 800157e:	f040 8148 	bne.w	8001812 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f003 0303 	and.w	r3, r3, #3
 800158a:	2b01      	cmp	r3, #1
 800158c:	d005      	beq.n	800159a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001596:	2b02      	cmp	r3, #2
 8001598:	d130      	bne.n	80015fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	005b      	lsls	r3, r3, #1
 80015a4:	2203      	movs	r2, #3
 80015a6:	fa02 f303 	lsl.w	r3, r2, r3
 80015aa:	43db      	mvns	r3, r3
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	4013      	ands	r3, r2
 80015b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	68da      	ldr	r2, [r3, #12]
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	fa02 f303 	lsl.w	r3, r2, r3
 80015be:	69ba      	ldr	r2, [r7, #24]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	69ba      	ldr	r2, [r7, #24]
 80015c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015d0:	2201      	movs	r2, #1
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	fa02 f303 	lsl.w	r3, r2, r3
 80015d8:	43db      	mvns	r3, r3
 80015da:	69ba      	ldr	r2, [r7, #24]
 80015dc:	4013      	ands	r3, r2
 80015de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	091b      	lsrs	r3, r3, #4
 80015e6:	f003 0201 	and.w	r2, r3, #1
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	4313      	orrs	r3, r2
 80015f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f003 0303 	and.w	r3, r3, #3
 8001604:	2b03      	cmp	r3, #3
 8001606:	d017      	beq.n	8001638 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	2203      	movs	r2, #3
 8001614:	fa02 f303 	lsl.w	r3, r2, r3
 8001618:	43db      	mvns	r3, r3
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	4013      	ands	r3, r2
 800161e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	689a      	ldr	r2, [r3, #8]
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	4313      	orrs	r3, r2
 8001630:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f003 0303 	and.w	r3, r3, #3
 8001640:	2b02      	cmp	r3, #2
 8001642:	d123      	bne.n	800168c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	08da      	lsrs	r2, r3, #3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	3208      	adds	r2, #8
 800164c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001650:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	f003 0307 	and.w	r3, r3, #7
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	220f      	movs	r2, #15
 800165c:	fa02 f303 	lsl.w	r3, r2, r3
 8001660:	43db      	mvns	r3, r3
 8001662:	69ba      	ldr	r2, [r7, #24]
 8001664:	4013      	ands	r3, r2
 8001666:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	691a      	ldr	r2, [r3, #16]
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	f003 0307 	and.w	r3, r3, #7
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	fa02 f303 	lsl.w	r3, r2, r3
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	4313      	orrs	r3, r2
 800167c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	08da      	lsrs	r2, r3, #3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	3208      	adds	r2, #8
 8001686:	69b9      	ldr	r1, [r7, #24]
 8001688:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	2203      	movs	r2, #3
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	43db      	mvns	r3, r3
 800169e:	69ba      	ldr	r2, [r7, #24]
 80016a0:	4013      	ands	r3, r2
 80016a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f003 0203 	and.w	r2, r3, #3
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	005b      	lsls	r3, r3, #1
 80016b0:	fa02 f303 	lsl.w	r3, r2, r3
 80016b4:	69ba      	ldr	r2, [r7, #24]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	f000 80a2 	beq.w	8001812 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	60fb      	str	r3, [r7, #12]
 80016d2:	4b57      	ldr	r3, [pc, #348]	@ (8001830 <HAL_GPIO_Init+0x2e8>)
 80016d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016d6:	4a56      	ldr	r2, [pc, #344]	@ (8001830 <HAL_GPIO_Init+0x2e8>)
 80016d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80016de:	4b54      	ldr	r3, [pc, #336]	@ (8001830 <HAL_GPIO_Init+0x2e8>)
 80016e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016ea:	4a52      	ldr	r2, [pc, #328]	@ (8001834 <HAL_GPIO_Init+0x2ec>)
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	089b      	lsrs	r3, r3, #2
 80016f0:	3302      	adds	r3, #2
 80016f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	f003 0303 	and.w	r3, r3, #3
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	220f      	movs	r2, #15
 8001702:	fa02 f303 	lsl.w	r3, r2, r3
 8001706:	43db      	mvns	r3, r3
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	4013      	ands	r3, r2
 800170c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4a49      	ldr	r2, [pc, #292]	@ (8001838 <HAL_GPIO_Init+0x2f0>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d019      	beq.n	800174a <HAL_GPIO_Init+0x202>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4a48      	ldr	r2, [pc, #288]	@ (800183c <HAL_GPIO_Init+0x2f4>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d013      	beq.n	8001746 <HAL_GPIO_Init+0x1fe>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4a47      	ldr	r2, [pc, #284]	@ (8001840 <HAL_GPIO_Init+0x2f8>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d00d      	beq.n	8001742 <HAL_GPIO_Init+0x1fa>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4a46      	ldr	r2, [pc, #280]	@ (8001844 <HAL_GPIO_Init+0x2fc>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d007      	beq.n	800173e <HAL_GPIO_Init+0x1f6>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4a45      	ldr	r2, [pc, #276]	@ (8001848 <HAL_GPIO_Init+0x300>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d101      	bne.n	800173a <HAL_GPIO_Init+0x1f2>
 8001736:	2304      	movs	r3, #4
 8001738:	e008      	b.n	800174c <HAL_GPIO_Init+0x204>
 800173a:	2307      	movs	r3, #7
 800173c:	e006      	b.n	800174c <HAL_GPIO_Init+0x204>
 800173e:	2303      	movs	r3, #3
 8001740:	e004      	b.n	800174c <HAL_GPIO_Init+0x204>
 8001742:	2302      	movs	r3, #2
 8001744:	e002      	b.n	800174c <HAL_GPIO_Init+0x204>
 8001746:	2301      	movs	r3, #1
 8001748:	e000      	b.n	800174c <HAL_GPIO_Init+0x204>
 800174a:	2300      	movs	r3, #0
 800174c:	69fa      	ldr	r2, [r7, #28]
 800174e:	f002 0203 	and.w	r2, r2, #3
 8001752:	0092      	lsls	r2, r2, #2
 8001754:	4093      	lsls	r3, r2
 8001756:	69ba      	ldr	r2, [r7, #24]
 8001758:	4313      	orrs	r3, r2
 800175a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800175c:	4935      	ldr	r1, [pc, #212]	@ (8001834 <HAL_GPIO_Init+0x2ec>)
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	089b      	lsrs	r3, r3, #2
 8001762:	3302      	adds	r3, #2
 8001764:	69ba      	ldr	r2, [r7, #24]
 8001766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800176a:	4b38      	ldr	r3, [pc, #224]	@ (800184c <HAL_GPIO_Init+0x304>)
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	43db      	mvns	r3, r3
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	4013      	ands	r3, r2
 8001778:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d003      	beq.n	800178e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001786:	69ba      	ldr	r2, [r7, #24]
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	4313      	orrs	r3, r2
 800178c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800178e:	4a2f      	ldr	r2, [pc, #188]	@ (800184c <HAL_GPIO_Init+0x304>)
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001794:	4b2d      	ldr	r3, [pc, #180]	@ (800184c <HAL_GPIO_Init+0x304>)
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	43db      	mvns	r3, r3
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	4013      	ands	r3, r2
 80017a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d003      	beq.n	80017b8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80017b0:	69ba      	ldr	r2, [r7, #24]
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017b8:	4a24      	ldr	r2, [pc, #144]	@ (800184c <HAL_GPIO_Init+0x304>)
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017be:	4b23      	ldr	r3, [pc, #140]	@ (800184c <HAL_GPIO_Init+0x304>)
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	43db      	mvns	r3, r3
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	4013      	ands	r3, r2
 80017cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d003      	beq.n	80017e2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80017da:	69ba      	ldr	r2, [r7, #24]
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	4313      	orrs	r3, r2
 80017e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017e2:	4a1a      	ldr	r2, [pc, #104]	@ (800184c <HAL_GPIO_Init+0x304>)
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017e8:	4b18      	ldr	r3, [pc, #96]	@ (800184c <HAL_GPIO_Init+0x304>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	43db      	mvns	r3, r3
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	4013      	ands	r3, r2
 80017f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d003      	beq.n	800180c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	4313      	orrs	r3, r2
 800180a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800180c:	4a0f      	ldr	r2, [pc, #60]	@ (800184c <HAL_GPIO_Init+0x304>)
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	3301      	adds	r3, #1
 8001816:	61fb      	str	r3, [r7, #28]
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	2b0f      	cmp	r3, #15
 800181c:	f67f aea2 	bls.w	8001564 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001820:	bf00      	nop
 8001822:	bf00      	nop
 8001824:	3724      	adds	r7, #36	@ 0x24
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	40023800 	.word	0x40023800
 8001834:	40013800 	.word	0x40013800
 8001838:	40020000 	.word	0x40020000
 800183c:	40020400 	.word	0x40020400
 8001840:	40020800 	.word	0x40020800
 8001844:	40020c00 	.word	0x40020c00
 8001848:	40021000 	.word	0x40021000
 800184c:	40013c00 	.word	0x40013c00

08001850 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001850:	b480      	push	{r7}
 8001852:	b085      	sub	sp, #20
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	460b      	mov	r3, r1
 800185a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	691a      	ldr	r2, [r3, #16]
 8001860:	887b      	ldrh	r3, [r7, #2]
 8001862:	4013      	ands	r3, r2
 8001864:	2b00      	cmp	r3, #0
 8001866:	d002      	beq.n	800186e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001868:	2301      	movs	r3, #1
 800186a:	73fb      	strb	r3, [r7, #15]
 800186c:	e001      	b.n	8001872 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800186e:	2300      	movs	r3, #0
 8001870:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001872:	7bfb      	ldrb	r3, [r7, #15]
}
 8001874:	4618      	mov	r0, r3
 8001876:	3714      	adds	r7, #20
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	460b      	mov	r3, r1
 800188a:	807b      	strh	r3, [r7, #2]
 800188c:	4613      	mov	r3, r2
 800188e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001890:	787b      	ldrb	r3, [r7, #1]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d003      	beq.n	800189e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001896:	887a      	ldrh	r2, [r7, #2]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800189c:	e003      	b.n	80018a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800189e:	887b      	ldrh	r3, [r7, #2]
 80018a0:	041a      	lsls	r2, r3, #16
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	619a      	str	r2, [r3, #24]
}
 80018a6:	bf00      	nop
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
	...

080018b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b086      	sub	sp, #24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d101      	bne.n	80018c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e267      	b.n	8001d96 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0301 	and.w	r3, r3, #1
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d075      	beq.n	80019be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80018d2:	4b88      	ldr	r3, [pc, #544]	@ (8001af4 <HAL_RCC_OscConfig+0x240>)
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	f003 030c 	and.w	r3, r3, #12
 80018da:	2b04      	cmp	r3, #4
 80018dc:	d00c      	beq.n	80018f8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018de:	4b85      	ldr	r3, [pc, #532]	@ (8001af4 <HAL_RCC_OscConfig+0x240>)
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80018e6:	2b08      	cmp	r3, #8
 80018e8:	d112      	bne.n	8001910 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018ea:	4b82      	ldr	r3, [pc, #520]	@ (8001af4 <HAL_RCC_OscConfig+0x240>)
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80018f6:	d10b      	bne.n	8001910 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018f8:	4b7e      	ldr	r3, [pc, #504]	@ (8001af4 <HAL_RCC_OscConfig+0x240>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d05b      	beq.n	80019bc <HAL_RCC_OscConfig+0x108>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d157      	bne.n	80019bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e242      	b.n	8001d96 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001918:	d106      	bne.n	8001928 <HAL_RCC_OscConfig+0x74>
 800191a:	4b76      	ldr	r3, [pc, #472]	@ (8001af4 <HAL_RCC_OscConfig+0x240>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a75      	ldr	r2, [pc, #468]	@ (8001af4 <HAL_RCC_OscConfig+0x240>)
 8001920:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001924:	6013      	str	r3, [r2, #0]
 8001926:	e01d      	b.n	8001964 <HAL_RCC_OscConfig+0xb0>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001930:	d10c      	bne.n	800194c <HAL_RCC_OscConfig+0x98>
 8001932:	4b70      	ldr	r3, [pc, #448]	@ (8001af4 <HAL_RCC_OscConfig+0x240>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a6f      	ldr	r2, [pc, #444]	@ (8001af4 <HAL_RCC_OscConfig+0x240>)
 8001938:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800193c:	6013      	str	r3, [r2, #0]
 800193e:	4b6d      	ldr	r3, [pc, #436]	@ (8001af4 <HAL_RCC_OscConfig+0x240>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a6c      	ldr	r2, [pc, #432]	@ (8001af4 <HAL_RCC_OscConfig+0x240>)
 8001944:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001948:	6013      	str	r3, [r2, #0]
 800194a:	e00b      	b.n	8001964 <HAL_RCC_OscConfig+0xb0>
 800194c:	4b69      	ldr	r3, [pc, #420]	@ (8001af4 <HAL_RCC_OscConfig+0x240>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a68      	ldr	r2, [pc, #416]	@ (8001af4 <HAL_RCC_OscConfig+0x240>)
 8001952:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001956:	6013      	str	r3, [r2, #0]
 8001958:	4b66      	ldr	r3, [pc, #408]	@ (8001af4 <HAL_RCC_OscConfig+0x240>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a65      	ldr	r2, [pc, #404]	@ (8001af4 <HAL_RCC_OscConfig+0x240>)
 800195e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001962:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d013      	beq.n	8001994 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800196c:	f7ff fcd6 	bl	800131c <HAL_GetTick>
 8001970:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001972:	e008      	b.n	8001986 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001974:	f7ff fcd2 	bl	800131c <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	2b64      	cmp	r3, #100	@ 0x64
 8001980:	d901      	bls.n	8001986 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e207      	b.n	8001d96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001986:	4b5b      	ldr	r3, [pc, #364]	@ (8001af4 <HAL_RCC_OscConfig+0x240>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d0f0      	beq.n	8001974 <HAL_RCC_OscConfig+0xc0>
 8001992:	e014      	b.n	80019be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001994:	f7ff fcc2 	bl	800131c <HAL_GetTick>
 8001998:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800199a:	e008      	b.n	80019ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800199c:	f7ff fcbe 	bl	800131c <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b64      	cmp	r3, #100	@ 0x64
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e1f3      	b.n	8001d96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019ae:	4b51      	ldr	r3, [pc, #324]	@ (8001af4 <HAL_RCC_OscConfig+0x240>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d1f0      	bne.n	800199c <HAL_RCC_OscConfig+0xe8>
 80019ba:	e000      	b.n	80019be <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0302 	and.w	r3, r3, #2
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d063      	beq.n	8001a92 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80019ca:	4b4a      	ldr	r3, [pc, #296]	@ (8001af4 <HAL_RCC_OscConfig+0x240>)
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	f003 030c 	and.w	r3, r3, #12
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d00b      	beq.n	80019ee <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019d6:	4b47      	ldr	r3, [pc, #284]	@ (8001af4 <HAL_RCC_OscConfig+0x240>)
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80019de:	2b08      	cmp	r3, #8
 80019e0:	d11c      	bne.n	8001a1c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019e2:	4b44      	ldr	r3, [pc, #272]	@ (8001af4 <HAL_RCC_OscConfig+0x240>)
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d116      	bne.n	8001a1c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ee:	4b41      	ldr	r3, [pc, #260]	@ (8001af4 <HAL_RCC_OscConfig+0x240>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0302 	and.w	r3, r3, #2
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d005      	beq.n	8001a06 <HAL_RCC_OscConfig+0x152>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d001      	beq.n	8001a06 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e1c7      	b.n	8001d96 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a06:	4b3b      	ldr	r3, [pc, #236]	@ (8001af4 <HAL_RCC_OscConfig+0x240>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	691b      	ldr	r3, [r3, #16]
 8001a12:	00db      	lsls	r3, r3, #3
 8001a14:	4937      	ldr	r1, [pc, #220]	@ (8001af4 <HAL_RCC_OscConfig+0x240>)
 8001a16:	4313      	orrs	r3, r2
 8001a18:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a1a:	e03a      	b.n	8001a92 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d020      	beq.n	8001a66 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a24:	4b34      	ldr	r3, [pc, #208]	@ (8001af8 <HAL_RCC_OscConfig+0x244>)
 8001a26:	2201      	movs	r2, #1
 8001a28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a2a:	f7ff fc77 	bl	800131c <HAL_GetTick>
 8001a2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a30:	e008      	b.n	8001a44 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a32:	f7ff fc73 	bl	800131c <HAL_GetTick>
 8001a36:	4602      	mov	r2, r0
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d901      	bls.n	8001a44 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e1a8      	b.n	8001d96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a44:	4b2b      	ldr	r3, [pc, #172]	@ (8001af4 <HAL_RCC_OscConfig+0x240>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0302 	and.w	r3, r3, #2
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d0f0      	beq.n	8001a32 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a50:	4b28      	ldr	r3, [pc, #160]	@ (8001af4 <HAL_RCC_OscConfig+0x240>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	691b      	ldr	r3, [r3, #16]
 8001a5c:	00db      	lsls	r3, r3, #3
 8001a5e:	4925      	ldr	r1, [pc, #148]	@ (8001af4 <HAL_RCC_OscConfig+0x240>)
 8001a60:	4313      	orrs	r3, r2
 8001a62:	600b      	str	r3, [r1, #0]
 8001a64:	e015      	b.n	8001a92 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a66:	4b24      	ldr	r3, [pc, #144]	@ (8001af8 <HAL_RCC_OscConfig+0x244>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a6c:	f7ff fc56 	bl	800131c <HAL_GetTick>
 8001a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a72:	e008      	b.n	8001a86 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a74:	f7ff fc52 	bl	800131c <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d901      	bls.n	8001a86 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e187      	b.n	8001d96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a86:	4b1b      	ldr	r3, [pc, #108]	@ (8001af4 <HAL_RCC_OscConfig+0x240>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d1f0      	bne.n	8001a74 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0308 	and.w	r3, r3, #8
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d036      	beq.n	8001b0c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	695b      	ldr	r3, [r3, #20]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d016      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001aa6:	4b15      	ldr	r3, [pc, #84]	@ (8001afc <HAL_RCC_OscConfig+0x248>)
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aac:	f7ff fc36 	bl	800131c <HAL_GetTick>
 8001ab0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ab2:	e008      	b.n	8001ac6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ab4:	f7ff fc32 	bl	800131c <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d901      	bls.n	8001ac6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e167      	b.n	8001d96 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ac6:	4b0b      	ldr	r3, [pc, #44]	@ (8001af4 <HAL_RCC_OscConfig+0x240>)
 8001ac8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001aca:	f003 0302 	and.w	r3, r3, #2
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d0f0      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x200>
 8001ad2:	e01b      	b.n	8001b0c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ad4:	4b09      	ldr	r3, [pc, #36]	@ (8001afc <HAL_RCC_OscConfig+0x248>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ada:	f7ff fc1f 	bl	800131c <HAL_GetTick>
 8001ade:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ae0:	e00e      	b.n	8001b00 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ae2:	f7ff fc1b 	bl	800131c <HAL_GetTick>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d907      	bls.n	8001b00 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001af0:	2303      	movs	r3, #3
 8001af2:	e150      	b.n	8001d96 <HAL_RCC_OscConfig+0x4e2>
 8001af4:	40023800 	.word	0x40023800
 8001af8:	42470000 	.word	0x42470000
 8001afc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b00:	4b88      	ldr	r3, [pc, #544]	@ (8001d24 <HAL_RCC_OscConfig+0x470>)
 8001b02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b04:	f003 0302 	and.w	r3, r3, #2
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d1ea      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0304 	and.w	r3, r3, #4
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	f000 8097 	beq.w	8001c48 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b1e:	4b81      	ldr	r3, [pc, #516]	@ (8001d24 <HAL_RCC_OscConfig+0x470>)
 8001b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d10f      	bne.n	8001b4a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	60bb      	str	r3, [r7, #8]
 8001b2e:	4b7d      	ldr	r3, [pc, #500]	@ (8001d24 <HAL_RCC_OscConfig+0x470>)
 8001b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b32:	4a7c      	ldr	r2, [pc, #496]	@ (8001d24 <HAL_RCC_OscConfig+0x470>)
 8001b34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b38:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b3a:	4b7a      	ldr	r3, [pc, #488]	@ (8001d24 <HAL_RCC_OscConfig+0x470>)
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b42:	60bb      	str	r3, [r7, #8]
 8001b44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b46:	2301      	movs	r3, #1
 8001b48:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b4a:	4b77      	ldr	r3, [pc, #476]	@ (8001d28 <HAL_RCC_OscConfig+0x474>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d118      	bne.n	8001b88 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b56:	4b74      	ldr	r3, [pc, #464]	@ (8001d28 <HAL_RCC_OscConfig+0x474>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a73      	ldr	r2, [pc, #460]	@ (8001d28 <HAL_RCC_OscConfig+0x474>)
 8001b5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b62:	f7ff fbdb 	bl	800131c <HAL_GetTick>
 8001b66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b68:	e008      	b.n	8001b7c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b6a:	f7ff fbd7 	bl	800131c <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d901      	bls.n	8001b7c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	e10c      	b.n	8001d96 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b7c:	4b6a      	ldr	r3, [pc, #424]	@ (8001d28 <HAL_RCC_OscConfig+0x474>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d0f0      	beq.n	8001b6a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d106      	bne.n	8001b9e <HAL_RCC_OscConfig+0x2ea>
 8001b90:	4b64      	ldr	r3, [pc, #400]	@ (8001d24 <HAL_RCC_OscConfig+0x470>)
 8001b92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b94:	4a63      	ldr	r2, [pc, #396]	@ (8001d24 <HAL_RCC_OscConfig+0x470>)
 8001b96:	f043 0301 	orr.w	r3, r3, #1
 8001b9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b9c:	e01c      	b.n	8001bd8 <HAL_RCC_OscConfig+0x324>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	2b05      	cmp	r3, #5
 8001ba4:	d10c      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x30c>
 8001ba6:	4b5f      	ldr	r3, [pc, #380]	@ (8001d24 <HAL_RCC_OscConfig+0x470>)
 8001ba8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001baa:	4a5e      	ldr	r2, [pc, #376]	@ (8001d24 <HAL_RCC_OscConfig+0x470>)
 8001bac:	f043 0304 	orr.w	r3, r3, #4
 8001bb0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bb2:	4b5c      	ldr	r3, [pc, #368]	@ (8001d24 <HAL_RCC_OscConfig+0x470>)
 8001bb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bb6:	4a5b      	ldr	r2, [pc, #364]	@ (8001d24 <HAL_RCC_OscConfig+0x470>)
 8001bb8:	f043 0301 	orr.w	r3, r3, #1
 8001bbc:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bbe:	e00b      	b.n	8001bd8 <HAL_RCC_OscConfig+0x324>
 8001bc0:	4b58      	ldr	r3, [pc, #352]	@ (8001d24 <HAL_RCC_OscConfig+0x470>)
 8001bc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bc4:	4a57      	ldr	r2, [pc, #348]	@ (8001d24 <HAL_RCC_OscConfig+0x470>)
 8001bc6:	f023 0301 	bic.w	r3, r3, #1
 8001bca:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bcc:	4b55      	ldr	r3, [pc, #340]	@ (8001d24 <HAL_RCC_OscConfig+0x470>)
 8001bce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bd0:	4a54      	ldr	r2, [pc, #336]	@ (8001d24 <HAL_RCC_OscConfig+0x470>)
 8001bd2:	f023 0304 	bic.w	r3, r3, #4
 8001bd6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d015      	beq.n	8001c0c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001be0:	f7ff fb9c 	bl	800131c <HAL_GetTick>
 8001be4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001be6:	e00a      	b.n	8001bfe <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001be8:	f7ff fb98 	bl	800131c <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e0cb      	b.n	8001d96 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bfe:	4b49      	ldr	r3, [pc, #292]	@ (8001d24 <HAL_RCC_OscConfig+0x470>)
 8001c00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d0ee      	beq.n	8001be8 <HAL_RCC_OscConfig+0x334>
 8001c0a:	e014      	b.n	8001c36 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c0c:	f7ff fb86 	bl	800131c <HAL_GetTick>
 8001c10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c12:	e00a      	b.n	8001c2a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c14:	f7ff fb82 	bl	800131c <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d901      	bls.n	8001c2a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001c26:	2303      	movs	r3, #3
 8001c28:	e0b5      	b.n	8001d96 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c2a:	4b3e      	ldr	r3, [pc, #248]	@ (8001d24 <HAL_RCC_OscConfig+0x470>)
 8001c2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c2e:	f003 0302 	and.w	r3, r3, #2
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d1ee      	bne.n	8001c14 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c36:	7dfb      	ldrb	r3, [r7, #23]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d105      	bne.n	8001c48 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c3c:	4b39      	ldr	r3, [pc, #228]	@ (8001d24 <HAL_RCC_OscConfig+0x470>)
 8001c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c40:	4a38      	ldr	r2, [pc, #224]	@ (8001d24 <HAL_RCC_OscConfig+0x470>)
 8001c42:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c46:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	699b      	ldr	r3, [r3, #24]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	f000 80a1 	beq.w	8001d94 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c52:	4b34      	ldr	r3, [pc, #208]	@ (8001d24 <HAL_RCC_OscConfig+0x470>)
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f003 030c 	and.w	r3, r3, #12
 8001c5a:	2b08      	cmp	r3, #8
 8001c5c:	d05c      	beq.n	8001d18 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	699b      	ldr	r3, [r3, #24]
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d141      	bne.n	8001cea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c66:	4b31      	ldr	r3, [pc, #196]	@ (8001d2c <HAL_RCC_OscConfig+0x478>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c6c:	f7ff fb56 	bl	800131c <HAL_GetTick>
 8001c70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c72:	e008      	b.n	8001c86 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c74:	f7ff fb52 	bl	800131c <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d901      	bls.n	8001c86 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	e087      	b.n	8001d96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c86:	4b27      	ldr	r3, [pc, #156]	@ (8001d24 <HAL_RCC_OscConfig+0x470>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d1f0      	bne.n	8001c74 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	69da      	ldr	r2, [r3, #28]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6a1b      	ldr	r3, [r3, #32]
 8001c9a:	431a      	orrs	r2, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ca0:	019b      	lsls	r3, r3, #6
 8001ca2:	431a      	orrs	r2, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ca8:	085b      	lsrs	r3, r3, #1
 8001caa:	3b01      	subs	r3, #1
 8001cac:	041b      	lsls	r3, r3, #16
 8001cae:	431a      	orrs	r2, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cb4:	061b      	lsls	r3, r3, #24
 8001cb6:	491b      	ldr	r1, [pc, #108]	@ (8001d24 <HAL_RCC_OscConfig+0x470>)
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cbc:	4b1b      	ldr	r3, [pc, #108]	@ (8001d2c <HAL_RCC_OscConfig+0x478>)
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc2:	f7ff fb2b 	bl	800131c <HAL_GetTick>
 8001cc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cc8:	e008      	b.n	8001cdc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cca:	f7ff fb27 	bl	800131c <HAL_GetTick>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d901      	bls.n	8001cdc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	e05c      	b.n	8001d96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cdc:	4b11      	ldr	r3, [pc, #68]	@ (8001d24 <HAL_RCC_OscConfig+0x470>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d0f0      	beq.n	8001cca <HAL_RCC_OscConfig+0x416>
 8001ce8:	e054      	b.n	8001d94 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cea:	4b10      	ldr	r3, [pc, #64]	@ (8001d2c <HAL_RCC_OscConfig+0x478>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf0:	f7ff fb14 	bl	800131c <HAL_GetTick>
 8001cf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cf6:	e008      	b.n	8001d0a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cf8:	f7ff fb10 	bl	800131c <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e045      	b.n	8001d96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d0a:	4b06      	ldr	r3, [pc, #24]	@ (8001d24 <HAL_RCC_OscConfig+0x470>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d1f0      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x444>
 8001d16:	e03d      	b.n	8001d94 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	699b      	ldr	r3, [r3, #24]
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d107      	bne.n	8001d30 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e038      	b.n	8001d96 <HAL_RCC_OscConfig+0x4e2>
 8001d24:	40023800 	.word	0x40023800
 8001d28:	40007000 	.word	0x40007000
 8001d2c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d30:	4b1b      	ldr	r3, [pc, #108]	@ (8001da0 <HAL_RCC_OscConfig+0x4ec>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	699b      	ldr	r3, [r3, #24]
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d028      	beq.n	8001d90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d121      	bne.n	8001d90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d11a      	bne.n	8001d90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d5a:	68fa      	ldr	r2, [r7, #12]
 8001d5c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001d60:	4013      	ands	r3, r2
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001d66:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d111      	bne.n	8001d90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d76:	085b      	lsrs	r3, r3, #1
 8001d78:	3b01      	subs	r3, #1
 8001d7a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d107      	bne.n	8001d90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d8a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d001      	beq.n	8001d94 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e000      	b.n	8001d96 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3718      	adds	r7, #24
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	40023800 	.word	0x40023800

08001da4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d101      	bne.n	8001db8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e0cc      	b.n	8001f52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001db8:	4b68      	ldr	r3, [pc, #416]	@ (8001f5c <HAL_RCC_ClockConfig+0x1b8>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0307 	and.w	r3, r3, #7
 8001dc0:	683a      	ldr	r2, [r7, #0]
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d90c      	bls.n	8001de0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dc6:	4b65      	ldr	r3, [pc, #404]	@ (8001f5c <HAL_RCC_ClockConfig+0x1b8>)
 8001dc8:	683a      	ldr	r2, [r7, #0]
 8001dca:	b2d2      	uxtb	r2, r2
 8001dcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dce:	4b63      	ldr	r3, [pc, #396]	@ (8001f5c <HAL_RCC_ClockConfig+0x1b8>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0307 	and.w	r3, r3, #7
 8001dd6:	683a      	ldr	r2, [r7, #0]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d001      	beq.n	8001de0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e0b8      	b.n	8001f52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0302 	and.w	r3, r3, #2
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d020      	beq.n	8001e2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 0304 	and.w	r3, r3, #4
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d005      	beq.n	8001e04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001df8:	4b59      	ldr	r3, [pc, #356]	@ (8001f60 <HAL_RCC_ClockConfig+0x1bc>)
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	4a58      	ldr	r2, [pc, #352]	@ (8001f60 <HAL_RCC_ClockConfig+0x1bc>)
 8001dfe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001e02:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0308 	and.w	r3, r3, #8
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d005      	beq.n	8001e1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e10:	4b53      	ldr	r3, [pc, #332]	@ (8001f60 <HAL_RCC_ClockConfig+0x1bc>)
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	4a52      	ldr	r2, [pc, #328]	@ (8001f60 <HAL_RCC_ClockConfig+0x1bc>)
 8001e16:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001e1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e1c:	4b50      	ldr	r3, [pc, #320]	@ (8001f60 <HAL_RCC_ClockConfig+0x1bc>)
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	494d      	ldr	r1, [pc, #308]	@ (8001f60 <HAL_RCC_ClockConfig+0x1bc>)
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0301 	and.w	r3, r3, #1
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d044      	beq.n	8001ec4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d107      	bne.n	8001e52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e42:	4b47      	ldr	r3, [pc, #284]	@ (8001f60 <HAL_RCC_ClockConfig+0x1bc>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d119      	bne.n	8001e82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e07f      	b.n	8001f52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d003      	beq.n	8001e62 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e5e:	2b03      	cmp	r3, #3
 8001e60:	d107      	bne.n	8001e72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e62:	4b3f      	ldr	r3, [pc, #252]	@ (8001f60 <HAL_RCC_ClockConfig+0x1bc>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d109      	bne.n	8001e82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e06f      	b.n	8001f52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e72:	4b3b      	ldr	r3, [pc, #236]	@ (8001f60 <HAL_RCC_ClockConfig+0x1bc>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0302 	and.w	r3, r3, #2
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d101      	bne.n	8001e82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e067      	b.n	8001f52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e82:	4b37      	ldr	r3, [pc, #220]	@ (8001f60 <HAL_RCC_ClockConfig+0x1bc>)
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	f023 0203 	bic.w	r2, r3, #3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	4934      	ldr	r1, [pc, #208]	@ (8001f60 <HAL_RCC_ClockConfig+0x1bc>)
 8001e90:	4313      	orrs	r3, r2
 8001e92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e94:	f7ff fa42 	bl	800131c <HAL_GetTick>
 8001e98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e9a:	e00a      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e9c:	f7ff fa3e 	bl	800131c <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e04f      	b.n	8001f52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eb2:	4b2b      	ldr	r3, [pc, #172]	@ (8001f60 <HAL_RCC_ClockConfig+0x1bc>)
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	f003 020c 	and.w	r2, r3, #12
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d1eb      	bne.n	8001e9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ec4:	4b25      	ldr	r3, [pc, #148]	@ (8001f5c <HAL_RCC_ClockConfig+0x1b8>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0307 	and.w	r3, r3, #7
 8001ecc:	683a      	ldr	r2, [r7, #0]
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d20c      	bcs.n	8001eec <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ed2:	4b22      	ldr	r3, [pc, #136]	@ (8001f5c <HAL_RCC_ClockConfig+0x1b8>)
 8001ed4:	683a      	ldr	r2, [r7, #0]
 8001ed6:	b2d2      	uxtb	r2, r2
 8001ed8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eda:	4b20      	ldr	r3, [pc, #128]	@ (8001f5c <HAL_RCC_ClockConfig+0x1b8>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0307 	and.w	r3, r3, #7
 8001ee2:	683a      	ldr	r2, [r7, #0]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d001      	beq.n	8001eec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e032      	b.n	8001f52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0304 	and.w	r3, r3, #4
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d008      	beq.n	8001f0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ef8:	4b19      	ldr	r3, [pc, #100]	@ (8001f60 <HAL_RCC_ClockConfig+0x1bc>)
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	4916      	ldr	r1, [pc, #88]	@ (8001f60 <HAL_RCC_ClockConfig+0x1bc>)
 8001f06:	4313      	orrs	r3, r2
 8001f08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0308 	and.w	r3, r3, #8
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d009      	beq.n	8001f2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f16:	4b12      	ldr	r3, [pc, #72]	@ (8001f60 <HAL_RCC_ClockConfig+0x1bc>)
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	691b      	ldr	r3, [r3, #16]
 8001f22:	00db      	lsls	r3, r3, #3
 8001f24:	490e      	ldr	r1, [pc, #56]	@ (8001f60 <HAL_RCC_ClockConfig+0x1bc>)
 8001f26:	4313      	orrs	r3, r2
 8001f28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f2a:	f000 f821 	bl	8001f70 <HAL_RCC_GetSysClockFreq>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	4b0b      	ldr	r3, [pc, #44]	@ (8001f60 <HAL_RCC_ClockConfig+0x1bc>)
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	091b      	lsrs	r3, r3, #4
 8001f36:	f003 030f 	and.w	r3, r3, #15
 8001f3a:	490a      	ldr	r1, [pc, #40]	@ (8001f64 <HAL_RCC_ClockConfig+0x1c0>)
 8001f3c:	5ccb      	ldrb	r3, [r1, r3]
 8001f3e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f42:	4a09      	ldr	r2, [pc, #36]	@ (8001f68 <HAL_RCC_ClockConfig+0x1c4>)
 8001f44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001f46:	4b09      	ldr	r3, [pc, #36]	@ (8001f6c <HAL_RCC_ClockConfig+0x1c8>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7ff f9a2 	bl	8001294 <HAL_InitTick>

  return HAL_OK;
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3710      	adds	r7, #16
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	40023c00 	.word	0x40023c00
 8001f60:	40023800 	.word	0x40023800
 8001f64:	080034a4 	.word	0x080034a4
 8001f68:	20000000 	.word	0x20000000
 8001f6c:	20000004 	.word	0x20000004

08001f70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f74:	b094      	sub	sp, #80	@ 0x50
 8001f76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001f80:	2300      	movs	r3, #0
 8001f82:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001f84:	2300      	movs	r3, #0
 8001f86:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f88:	4b79      	ldr	r3, [pc, #484]	@ (8002170 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	f003 030c 	and.w	r3, r3, #12
 8001f90:	2b08      	cmp	r3, #8
 8001f92:	d00d      	beq.n	8001fb0 <HAL_RCC_GetSysClockFreq+0x40>
 8001f94:	2b08      	cmp	r3, #8
 8001f96:	f200 80e1 	bhi.w	800215c <HAL_RCC_GetSysClockFreq+0x1ec>
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d002      	beq.n	8001fa4 <HAL_RCC_GetSysClockFreq+0x34>
 8001f9e:	2b04      	cmp	r3, #4
 8001fa0:	d003      	beq.n	8001faa <HAL_RCC_GetSysClockFreq+0x3a>
 8001fa2:	e0db      	b.n	800215c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001fa4:	4b73      	ldr	r3, [pc, #460]	@ (8002174 <HAL_RCC_GetSysClockFreq+0x204>)
 8001fa6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001fa8:	e0db      	b.n	8002162 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001faa:	4b73      	ldr	r3, [pc, #460]	@ (8002178 <HAL_RCC_GetSysClockFreq+0x208>)
 8001fac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001fae:	e0d8      	b.n	8002162 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001fb0:	4b6f      	ldr	r3, [pc, #444]	@ (8002170 <HAL_RCC_GetSysClockFreq+0x200>)
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001fb8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fba:	4b6d      	ldr	r3, [pc, #436]	@ (8002170 <HAL_RCC_GetSysClockFreq+0x200>)
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d063      	beq.n	800208e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fc6:	4b6a      	ldr	r3, [pc, #424]	@ (8002170 <HAL_RCC_GetSysClockFreq+0x200>)
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	099b      	lsrs	r3, r3, #6
 8001fcc:	2200      	movs	r2, #0
 8001fce:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001fd0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001fd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fd8:	633b      	str	r3, [r7, #48]	@ 0x30
 8001fda:	2300      	movs	r3, #0
 8001fdc:	637b      	str	r3, [r7, #52]	@ 0x34
 8001fde:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001fe2:	4622      	mov	r2, r4
 8001fe4:	462b      	mov	r3, r5
 8001fe6:	f04f 0000 	mov.w	r0, #0
 8001fea:	f04f 0100 	mov.w	r1, #0
 8001fee:	0159      	lsls	r1, r3, #5
 8001ff0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ff4:	0150      	lsls	r0, r2, #5
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	4621      	mov	r1, r4
 8001ffc:	1a51      	subs	r1, r2, r1
 8001ffe:	6139      	str	r1, [r7, #16]
 8002000:	4629      	mov	r1, r5
 8002002:	eb63 0301 	sbc.w	r3, r3, r1
 8002006:	617b      	str	r3, [r7, #20]
 8002008:	f04f 0200 	mov.w	r2, #0
 800200c:	f04f 0300 	mov.w	r3, #0
 8002010:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002014:	4659      	mov	r1, fp
 8002016:	018b      	lsls	r3, r1, #6
 8002018:	4651      	mov	r1, sl
 800201a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800201e:	4651      	mov	r1, sl
 8002020:	018a      	lsls	r2, r1, #6
 8002022:	4651      	mov	r1, sl
 8002024:	ebb2 0801 	subs.w	r8, r2, r1
 8002028:	4659      	mov	r1, fp
 800202a:	eb63 0901 	sbc.w	r9, r3, r1
 800202e:	f04f 0200 	mov.w	r2, #0
 8002032:	f04f 0300 	mov.w	r3, #0
 8002036:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800203a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800203e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002042:	4690      	mov	r8, r2
 8002044:	4699      	mov	r9, r3
 8002046:	4623      	mov	r3, r4
 8002048:	eb18 0303 	adds.w	r3, r8, r3
 800204c:	60bb      	str	r3, [r7, #8]
 800204e:	462b      	mov	r3, r5
 8002050:	eb49 0303 	adc.w	r3, r9, r3
 8002054:	60fb      	str	r3, [r7, #12]
 8002056:	f04f 0200 	mov.w	r2, #0
 800205a:	f04f 0300 	mov.w	r3, #0
 800205e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002062:	4629      	mov	r1, r5
 8002064:	024b      	lsls	r3, r1, #9
 8002066:	4621      	mov	r1, r4
 8002068:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800206c:	4621      	mov	r1, r4
 800206e:	024a      	lsls	r2, r1, #9
 8002070:	4610      	mov	r0, r2
 8002072:	4619      	mov	r1, r3
 8002074:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002076:	2200      	movs	r2, #0
 8002078:	62bb      	str	r3, [r7, #40]	@ 0x28
 800207a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800207c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002080:	f7fe f8b0 	bl	80001e4 <__aeabi_uldivmod>
 8002084:	4602      	mov	r2, r0
 8002086:	460b      	mov	r3, r1
 8002088:	4613      	mov	r3, r2
 800208a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800208c:	e058      	b.n	8002140 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800208e:	4b38      	ldr	r3, [pc, #224]	@ (8002170 <HAL_RCC_GetSysClockFreq+0x200>)
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	099b      	lsrs	r3, r3, #6
 8002094:	2200      	movs	r2, #0
 8002096:	4618      	mov	r0, r3
 8002098:	4611      	mov	r1, r2
 800209a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800209e:	623b      	str	r3, [r7, #32]
 80020a0:	2300      	movs	r3, #0
 80020a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80020a4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80020a8:	4642      	mov	r2, r8
 80020aa:	464b      	mov	r3, r9
 80020ac:	f04f 0000 	mov.w	r0, #0
 80020b0:	f04f 0100 	mov.w	r1, #0
 80020b4:	0159      	lsls	r1, r3, #5
 80020b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020ba:	0150      	lsls	r0, r2, #5
 80020bc:	4602      	mov	r2, r0
 80020be:	460b      	mov	r3, r1
 80020c0:	4641      	mov	r1, r8
 80020c2:	ebb2 0a01 	subs.w	sl, r2, r1
 80020c6:	4649      	mov	r1, r9
 80020c8:	eb63 0b01 	sbc.w	fp, r3, r1
 80020cc:	f04f 0200 	mov.w	r2, #0
 80020d0:	f04f 0300 	mov.w	r3, #0
 80020d4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80020d8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80020dc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80020e0:	ebb2 040a 	subs.w	r4, r2, sl
 80020e4:	eb63 050b 	sbc.w	r5, r3, fp
 80020e8:	f04f 0200 	mov.w	r2, #0
 80020ec:	f04f 0300 	mov.w	r3, #0
 80020f0:	00eb      	lsls	r3, r5, #3
 80020f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80020f6:	00e2      	lsls	r2, r4, #3
 80020f8:	4614      	mov	r4, r2
 80020fa:	461d      	mov	r5, r3
 80020fc:	4643      	mov	r3, r8
 80020fe:	18e3      	adds	r3, r4, r3
 8002100:	603b      	str	r3, [r7, #0]
 8002102:	464b      	mov	r3, r9
 8002104:	eb45 0303 	adc.w	r3, r5, r3
 8002108:	607b      	str	r3, [r7, #4]
 800210a:	f04f 0200 	mov.w	r2, #0
 800210e:	f04f 0300 	mov.w	r3, #0
 8002112:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002116:	4629      	mov	r1, r5
 8002118:	028b      	lsls	r3, r1, #10
 800211a:	4621      	mov	r1, r4
 800211c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002120:	4621      	mov	r1, r4
 8002122:	028a      	lsls	r2, r1, #10
 8002124:	4610      	mov	r0, r2
 8002126:	4619      	mov	r1, r3
 8002128:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800212a:	2200      	movs	r2, #0
 800212c:	61bb      	str	r3, [r7, #24]
 800212e:	61fa      	str	r2, [r7, #28]
 8002130:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002134:	f7fe f856 	bl	80001e4 <__aeabi_uldivmod>
 8002138:	4602      	mov	r2, r0
 800213a:	460b      	mov	r3, r1
 800213c:	4613      	mov	r3, r2
 800213e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002140:	4b0b      	ldr	r3, [pc, #44]	@ (8002170 <HAL_RCC_GetSysClockFreq+0x200>)
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	0c1b      	lsrs	r3, r3, #16
 8002146:	f003 0303 	and.w	r3, r3, #3
 800214a:	3301      	adds	r3, #1
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002150:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002152:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002154:	fbb2 f3f3 	udiv	r3, r2, r3
 8002158:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800215a:	e002      	b.n	8002162 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800215c:	4b05      	ldr	r3, [pc, #20]	@ (8002174 <HAL_RCC_GetSysClockFreq+0x204>)
 800215e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002160:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002162:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002164:	4618      	mov	r0, r3
 8002166:	3750      	adds	r7, #80	@ 0x50
 8002168:	46bd      	mov	sp, r7
 800216a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800216e:	bf00      	nop
 8002170:	40023800 	.word	0x40023800
 8002174:	00f42400 	.word	0x00f42400
 8002178:	007a1200 	.word	0x007a1200

0800217c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002180:	4b03      	ldr	r3, [pc, #12]	@ (8002190 <HAL_RCC_GetHCLKFreq+0x14>)
 8002182:	681b      	ldr	r3, [r3, #0]
}
 8002184:	4618      	mov	r0, r3
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	20000000 	.word	0x20000000

08002194 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002198:	f7ff fff0 	bl	800217c <HAL_RCC_GetHCLKFreq>
 800219c:	4602      	mov	r2, r0
 800219e:	4b05      	ldr	r3, [pc, #20]	@ (80021b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	0a9b      	lsrs	r3, r3, #10
 80021a4:	f003 0307 	and.w	r3, r3, #7
 80021a8:	4903      	ldr	r1, [pc, #12]	@ (80021b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021aa:	5ccb      	ldrb	r3, [r1, r3]
 80021ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	40023800 	.word	0x40023800
 80021b8:	080034b4 	.word	0x080034b4

080021bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80021c0:	f7ff ffdc 	bl	800217c <HAL_RCC_GetHCLKFreq>
 80021c4:	4602      	mov	r2, r0
 80021c6:	4b05      	ldr	r3, [pc, #20]	@ (80021dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	0b5b      	lsrs	r3, r3, #13
 80021cc:	f003 0307 	and.w	r3, r3, #7
 80021d0:	4903      	ldr	r1, [pc, #12]	@ (80021e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021d2:	5ccb      	ldrb	r3, [r1, r3]
 80021d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021d8:	4618      	mov	r0, r3
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	40023800 	.word	0x40023800
 80021e0:	080034b4 	.word	0x080034b4

080021e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d101      	bne.n	80021f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e042      	b.n	800227c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d106      	bne.n	8002210 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f7fe fe96 	bl	8000f3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2224      	movs	r2, #36	@ 0x24
 8002214:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	68da      	ldr	r2, [r3, #12]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002226:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f000 f97f 	bl	800252c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	691a      	ldr	r2, [r3, #16]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800223c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	695a      	ldr	r2, [r3, #20]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800224c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	68da      	ldr	r2, [r3, #12]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800225c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2220      	movs	r2, #32
 8002268:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2220      	movs	r2, #32
 8002270:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800227a:	2300      	movs	r3, #0
}
 800227c:	4618      	mov	r0, r3
 800227e:	3708      	adds	r7, #8
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}

08002284 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b08a      	sub	sp, #40	@ 0x28
 8002288:	af02      	add	r7, sp, #8
 800228a:	60f8      	str	r0, [r7, #12]
 800228c:	60b9      	str	r1, [r7, #8]
 800228e:	603b      	str	r3, [r7, #0]
 8002290:	4613      	mov	r3, r2
 8002292:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002294:	2300      	movs	r3, #0
 8002296:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	2b20      	cmp	r3, #32
 80022a2:	f040 8081 	bne.w	80023a8 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d002      	beq.n	80022b2 <HAL_UART_Receive+0x2e>
 80022ac:	88fb      	ldrh	r3, [r7, #6]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d101      	bne.n	80022b6 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e079      	b.n	80023aa <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2200      	movs	r2, #0
 80022ba:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2222      	movs	r2, #34	@ 0x22
 80022c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2200      	movs	r2, #0
 80022c8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80022ca:	f7ff f827 	bl	800131c <HAL_GetTick>
 80022ce:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	88fa      	ldrh	r2, [r7, #6]
 80022d4:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	88fa      	ldrh	r2, [r7, #6]
 80022da:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80022e4:	d108      	bne.n	80022f8 <HAL_UART_Receive+0x74>
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	691b      	ldr	r3, [r3, #16]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d104      	bne.n	80022f8 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80022ee:	2300      	movs	r3, #0
 80022f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	61bb      	str	r3, [r7, #24]
 80022f6:	e003      	b.n	8002300 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80022fc:	2300      	movs	r3, #0
 80022fe:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002300:	e047      	b.n	8002392 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	9300      	str	r3, [sp, #0]
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	2200      	movs	r2, #0
 800230a:	2120      	movs	r1, #32
 800230c:	68f8      	ldr	r0, [r7, #12]
 800230e:	f000 f850 	bl	80023b2 <UART_WaitOnFlagUntilTimeout>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d005      	beq.n	8002324 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2220      	movs	r2, #32
 800231c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e042      	b.n	80023aa <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d10c      	bne.n	8002344 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	b29b      	uxth	r3, r3
 8002332:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002336:	b29a      	uxth	r2, r3
 8002338:	69bb      	ldr	r3, [r7, #24]
 800233a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	3302      	adds	r3, #2
 8002340:	61bb      	str	r3, [r7, #24]
 8002342:	e01f      	b.n	8002384 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800234c:	d007      	beq.n	800235e <HAL_UART_Receive+0xda>
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d10a      	bne.n	800236c <HAL_UART_Receive+0xe8>
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	691b      	ldr	r3, [r3, #16]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d106      	bne.n	800236c <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	b2da      	uxtb	r2, r3
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	701a      	strb	r2, [r3, #0]
 800236a:	e008      	b.n	800237e <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	b2db      	uxtb	r3, r3
 8002374:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002378:	b2da      	uxtb	r2, r3
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	3301      	adds	r3, #1
 8002382:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002388:	b29b      	uxth	r3, r3
 800238a:	3b01      	subs	r3, #1
 800238c:	b29a      	uxth	r2, r3
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002396:	b29b      	uxth	r3, r3
 8002398:	2b00      	cmp	r3, #0
 800239a:	d1b2      	bne.n	8002302 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2220      	movs	r2, #32
 80023a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80023a4:	2300      	movs	r3, #0
 80023a6:	e000      	b.n	80023aa <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80023a8:	2302      	movs	r3, #2
  }
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3720      	adds	r7, #32
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b086      	sub	sp, #24
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	60f8      	str	r0, [r7, #12]
 80023ba:	60b9      	str	r1, [r7, #8]
 80023bc:	603b      	str	r3, [r7, #0]
 80023be:	4613      	mov	r3, r2
 80023c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023c2:	e03b      	b.n	800243c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023c4:	6a3b      	ldr	r3, [r7, #32]
 80023c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023ca:	d037      	beq.n	800243c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023cc:	f7fe ffa6 	bl	800131c <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	6a3a      	ldr	r2, [r7, #32]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d302      	bcc.n	80023e2 <UART_WaitOnFlagUntilTimeout+0x30>
 80023dc:	6a3b      	ldr	r3, [r7, #32]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d101      	bne.n	80023e6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e03a      	b.n	800245c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	f003 0304 	and.w	r3, r3, #4
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d023      	beq.n	800243c <UART_WaitOnFlagUntilTimeout+0x8a>
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	2b80      	cmp	r3, #128	@ 0x80
 80023f8:	d020      	beq.n	800243c <UART_WaitOnFlagUntilTimeout+0x8a>
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	2b40      	cmp	r3, #64	@ 0x40
 80023fe:	d01d      	beq.n	800243c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0308 	and.w	r3, r3, #8
 800240a:	2b08      	cmp	r3, #8
 800240c:	d116      	bne.n	800243c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800240e:	2300      	movs	r3, #0
 8002410:	617b      	str	r3, [r7, #20]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	617b      	str	r3, [r7, #20]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	617b      	str	r3, [r7, #20]
 8002422:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002424:	68f8      	ldr	r0, [r7, #12]
 8002426:	f000 f81d 	bl	8002464 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2208      	movs	r2, #8
 800242e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2200      	movs	r2, #0
 8002434:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e00f      	b.n	800245c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	4013      	ands	r3, r2
 8002446:	68ba      	ldr	r2, [r7, #8]
 8002448:	429a      	cmp	r2, r3
 800244a:	bf0c      	ite	eq
 800244c:	2301      	moveq	r3, #1
 800244e:	2300      	movne	r3, #0
 8002450:	b2db      	uxtb	r3, r3
 8002452:	461a      	mov	r2, r3
 8002454:	79fb      	ldrb	r3, [r7, #7]
 8002456:	429a      	cmp	r2, r3
 8002458:	d0b4      	beq.n	80023c4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800245a:	2300      	movs	r3, #0
}
 800245c:	4618      	mov	r0, r3
 800245e:	3718      	adds	r7, #24
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}

08002464 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002464:	b480      	push	{r7}
 8002466:	b095      	sub	sp, #84	@ 0x54
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	330c      	adds	r3, #12
 8002472:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002474:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002476:	e853 3f00 	ldrex	r3, [r3]
 800247a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800247c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800247e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002482:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	330c      	adds	r3, #12
 800248a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800248c:	643a      	str	r2, [r7, #64]	@ 0x40
 800248e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002490:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002492:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002494:	e841 2300 	strex	r3, r2, [r1]
 8002498:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800249a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800249c:	2b00      	cmp	r3, #0
 800249e:	d1e5      	bne.n	800246c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	3314      	adds	r3, #20
 80024a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024a8:	6a3b      	ldr	r3, [r7, #32]
 80024aa:	e853 3f00 	ldrex	r3, [r3]
 80024ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	f023 0301 	bic.w	r3, r3, #1
 80024b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	3314      	adds	r3, #20
 80024be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80024c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80024c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80024c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80024c8:	e841 2300 	strex	r3, r2, [r1]
 80024cc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80024ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d1e5      	bne.n	80024a0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d119      	bne.n	8002510 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	330c      	adds	r3, #12
 80024e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	e853 3f00 	ldrex	r3, [r3]
 80024ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	f023 0310 	bic.w	r3, r3, #16
 80024f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	330c      	adds	r3, #12
 80024fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80024fc:	61ba      	str	r2, [r7, #24]
 80024fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002500:	6979      	ldr	r1, [r7, #20]
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	e841 2300 	strex	r3, r2, [r1]
 8002508:	613b      	str	r3, [r7, #16]
   return(result);
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d1e5      	bne.n	80024dc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2220      	movs	r2, #32
 8002514:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2200      	movs	r2, #0
 800251c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800251e:	bf00      	nop
 8002520:	3754      	adds	r7, #84	@ 0x54
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
	...

0800252c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800252c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002530:	b0c0      	sub	sp, #256	@ 0x100
 8002532:	af00      	add	r7, sp, #0
 8002534:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	691b      	ldr	r3, [r3, #16]
 8002540:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002548:	68d9      	ldr	r1, [r3, #12]
 800254a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	ea40 0301 	orr.w	r3, r0, r1
 8002554:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800255a:	689a      	ldr	r2, [r3, #8]
 800255c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	431a      	orrs	r2, r3
 8002564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002568:	695b      	ldr	r3, [r3, #20]
 800256a:	431a      	orrs	r2, r3
 800256c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002570:	69db      	ldr	r3, [r3, #28]
 8002572:	4313      	orrs	r3, r2
 8002574:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002584:	f021 010c 	bic.w	r1, r1, #12
 8002588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002592:	430b      	orrs	r3, r1
 8002594:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002596:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	695b      	ldr	r3, [r3, #20]
 800259e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80025a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025a6:	6999      	ldr	r1, [r3, #24]
 80025a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	ea40 0301 	orr.w	r3, r0, r1
 80025b2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80025b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	4b8f      	ldr	r3, [pc, #572]	@ (80027f8 <UART_SetConfig+0x2cc>)
 80025bc:	429a      	cmp	r2, r3
 80025be:	d005      	beq.n	80025cc <UART_SetConfig+0xa0>
 80025c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	4b8d      	ldr	r3, [pc, #564]	@ (80027fc <UART_SetConfig+0x2d0>)
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d104      	bne.n	80025d6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80025cc:	f7ff fdf6 	bl	80021bc <HAL_RCC_GetPCLK2Freq>
 80025d0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80025d4:	e003      	b.n	80025de <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80025d6:	f7ff fddd 	bl	8002194 <HAL_RCC_GetPCLK1Freq>
 80025da:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025e2:	69db      	ldr	r3, [r3, #28]
 80025e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80025e8:	f040 810c 	bne.w	8002804 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80025ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80025f0:	2200      	movs	r2, #0
 80025f2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80025f6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80025fa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80025fe:	4622      	mov	r2, r4
 8002600:	462b      	mov	r3, r5
 8002602:	1891      	adds	r1, r2, r2
 8002604:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002606:	415b      	adcs	r3, r3
 8002608:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800260a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800260e:	4621      	mov	r1, r4
 8002610:	eb12 0801 	adds.w	r8, r2, r1
 8002614:	4629      	mov	r1, r5
 8002616:	eb43 0901 	adc.w	r9, r3, r1
 800261a:	f04f 0200 	mov.w	r2, #0
 800261e:	f04f 0300 	mov.w	r3, #0
 8002622:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002626:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800262a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800262e:	4690      	mov	r8, r2
 8002630:	4699      	mov	r9, r3
 8002632:	4623      	mov	r3, r4
 8002634:	eb18 0303 	adds.w	r3, r8, r3
 8002638:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800263c:	462b      	mov	r3, r5
 800263e:	eb49 0303 	adc.w	r3, r9, r3
 8002642:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002646:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002652:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002656:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800265a:	460b      	mov	r3, r1
 800265c:	18db      	adds	r3, r3, r3
 800265e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002660:	4613      	mov	r3, r2
 8002662:	eb42 0303 	adc.w	r3, r2, r3
 8002666:	657b      	str	r3, [r7, #84]	@ 0x54
 8002668:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800266c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002670:	f7fd fdb8 	bl	80001e4 <__aeabi_uldivmod>
 8002674:	4602      	mov	r2, r0
 8002676:	460b      	mov	r3, r1
 8002678:	4b61      	ldr	r3, [pc, #388]	@ (8002800 <UART_SetConfig+0x2d4>)
 800267a:	fba3 2302 	umull	r2, r3, r3, r2
 800267e:	095b      	lsrs	r3, r3, #5
 8002680:	011c      	lsls	r4, r3, #4
 8002682:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002686:	2200      	movs	r2, #0
 8002688:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800268c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002690:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002694:	4642      	mov	r2, r8
 8002696:	464b      	mov	r3, r9
 8002698:	1891      	adds	r1, r2, r2
 800269a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800269c:	415b      	adcs	r3, r3
 800269e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80026a0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80026a4:	4641      	mov	r1, r8
 80026a6:	eb12 0a01 	adds.w	sl, r2, r1
 80026aa:	4649      	mov	r1, r9
 80026ac:	eb43 0b01 	adc.w	fp, r3, r1
 80026b0:	f04f 0200 	mov.w	r2, #0
 80026b4:	f04f 0300 	mov.w	r3, #0
 80026b8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80026bc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80026c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80026c4:	4692      	mov	sl, r2
 80026c6:	469b      	mov	fp, r3
 80026c8:	4643      	mov	r3, r8
 80026ca:	eb1a 0303 	adds.w	r3, sl, r3
 80026ce:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80026d2:	464b      	mov	r3, r9
 80026d4:	eb4b 0303 	adc.w	r3, fp, r3
 80026d8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80026dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80026e8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80026ec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80026f0:	460b      	mov	r3, r1
 80026f2:	18db      	adds	r3, r3, r3
 80026f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80026f6:	4613      	mov	r3, r2
 80026f8:	eb42 0303 	adc.w	r3, r2, r3
 80026fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80026fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002702:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002706:	f7fd fd6d 	bl	80001e4 <__aeabi_uldivmod>
 800270a:	4602      	mov	r2, r0
 800270c:	460b      	mov	r3, r1
 800270e:	4611      	mov	r1, r2
 8002710:	4b3b      	ldr	r3, [pc, #236]	@ (8002800 <UART_SetConfig+0x2d4>)
 8002712:	fba3 2301 	umull	r2, r3, r3, r1
 8002716:	095b      	lsrs	r3, r3, #5
 8002718:	2264      	movs	r2, #100	@ 0x64
 800271a:	fb02 f303 	mul.w	r3, r2, r3
 800271e:	1acb      	subs	r3, r1, r3
 8002720:	00db      	lsls	r3, r3, #3
 8002722:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002726:	4b36      	ldr	r3, [pc, #216]	@ (8002800 <UART_SetConfig+0x2d4>)
 8002728:	fba3 2302 	umull	r2, r3, r3, r2
 800272c:	095b      	lsrs	r3, r3, #5
 800272e:	005b      	lsls	r3, r3, #1
 8002730:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002734:	441c      	add	r4, r3
 8002736:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800273a:	2200      	movs	r2, #0
 800273c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002740:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002744:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002748:	4642      	mov	r2, r8
 800274a:	464b      	mov	r3, r9
 800274c:	1891      	adds	r1, r2, r2
 800274e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002750:	415b      	adcs	r3, r3
 8002752:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002754:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002758:	4641      	mov	r1, r8
 800275a:	1851      	adds	r1, r2, r1
 800275c:	6339      	str	r1, [r7, #48]	@ 0x30
 800275e:	4649      	mov	r1, r9
 8002760:	414b      	adcs	r3, r1
 8002762:	637b      	str	r3, [r7, #52]	@ 0x34
 8002764:	f04f 0200 	mov.w	r2, #0
 8002768:	f04f 0300 	mov.w	r3, #0
 800276c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002770:	4659      	mov	r1, fp
 8002772:	00cb      	lsls	r3, r1, #3
 8002774:	4651      	mov	r1, sl
 8002776:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800277a:	4651      	mov	r1, sl
 800277c:	00ca      	lsls	r2, r1, #3
 800277e:	4610      	mov	r0, r2
 8002780:	4619      	mov	r1, r3
 8002782:	4603      	mov	r3, r0
 8002784:	4642      	mov	r2, r8
 8002786:	189b      	adds	r3, r3, r2
 8002788:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800278c:	464b      	mov	r3, r9
 800278e:	460a      	mov	r2, r1
 8002790:	eb42 0303 	adc.w	r3, r2, r3
 8002794:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80027a4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80027a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80027ac:	460b      	mov	r3, r1
 80027ae:	18db      	adds	r3, r3, r3
 80027b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80027b2:	4613      	mov	r3, r2
 80027b4:	eb42 0303 	adc.w	r3, r2, r3
 80027b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80027ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80027be:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80027c2:	f7fd fd0f 	bl	80001e4 <__aeabi_uldivmod>
 80027c6:	4602      	mov	r2, r0
 80027c8:	460b      	mov	r3, r1
 80027ca:	4b0d      	ldr	r3, [pc, #52]	@ (8002800 <UART_SetConfig+0x2d4>)
 80027cc:	fba3 1302 	umull	r1, r3, r3, r2
 80027d0:	095b      	lsrs	r3, r3, #5
 80027d2:	2164      	movs	r1, #100	@ 0x64
 80027d4:	fb01 f303 	mul.w	r3, r1, r3
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	00db      	lsls	r3, r3, #3
 80027dc:	3332      	adds	r3, #50	@ 0x32
 80027de:	4a08      	ldr	r2, [pc, #32]	@ (8002800 <UART_SetConfig+0x2d4>)
 80027e0:	fba2 2303 	umull	r2, r3, r2, r3
 80027e4:	095b      	lsrs	r3, r3, #5
 80027e6:	f003 0207 	and.w	r2, r3, #7
 80027ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4422      	add	r2, r4
 80027f2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80027f4:	e106      	b.n	8002a04 <UART_SetConfig+0x4d8>
 80027f6:	bf00      	nop
 80027f8:	40011000 	.word	0x40011000
 80027fc:	40011400 	.word	0x40011400
 8002800:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002804:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002808:	2200      	movs	r2, #0
 800280a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800280e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002812:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002816:	4642      	mov	r2, r8
 8002818:	464b      	mov	r3, r9
 800281a:	1891      	adds	r1, r2, r2
 800281c:	6239      	str	r1, [r7, #32]
 800281e:	415b      	adcs	r3, r3
 8002820:	627b      	str	r3, [r7, #36]	@ 0x24
 8002822:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002826:	4641      	mov	r1, r8
 8002828:	1854      	adds	r4, r2, r1
 800282a:	4649      	mov	r1, r9
 800282c:	eb43 0501 	adc.w	r5, r3, r1
 8002830:	f04f 0200 	mov.w	r2, #0
 8002834:	f04f 0300 	mov.w	r3, #0
 8002838:	00eb      	lsls	r3, r5, #3
 800283a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800283e:	00e2      	lsls	r2, r4, #3
 8002840:	4614      	mov	r4, r2
 8002842:	461d      	mov	r5, r3
 8002844:	4643      	mov	r3, r8
 8002846:	18e3      	adds	r3, r4, r3
 8002848:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800284c:	464b      	mov	r3, r9
 800284e:	eb45 0303 	adc.w	r3, r5, r3
 8002852:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002856:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002862:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002866:	f04f 0200 	mov.w	r2, #0
 800286a:	f04f 0300 	mov.w	r3, #0
 800286e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002872:	4629      	mov	r1, r5
 8002874:	008b      	lsls	r3, r1, #2
 8002876:	4621      	mov	r1, r4
 8002878:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800287c:	4621      	mov	r1, r4
 800287e:	008a      	lsls	r2, r1, #2
 8002880:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002884:	f7fd fcae 	bl	80001e4 <__aeabi_uldivmod>
 8002888:	4602      	mov	r2, r0
 800288a:	460b      	mov	r3, r1
 800288c:	4b60      	ldr	r3, [pc, #384]	@ (8002a10 <UART_SetConfig+0x4e4>)
 800288e:	fba3 2302 	umull	r2, r3, r3, r2
 8002892:	095b      	lsrs	r3, r3, #5
 8002894:	011c      	lsls	r4, r3, #4
 8002896:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800289a:	2200      	movs	r2, #0
 800289c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80028a0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80028a4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80028a8:	4642      	mov	r2, r8
 80028aa:	464b      	mov	r3, r9
 80028ac:	1891      	adds	r1, r2, r2
 80028ae:	61b9      	str	r1, [r7, #24]
 80028b0:	415b      	adcs	r3, r3
 80028b2:	61fb      	str	r3, [r7, #28]
 80028b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028b8:	4641      	mov	r1, r8
 80028ba:	1851      	adds	r1, r2, r1
 80028bc:	6139      	str	r1, [r7, #16]
 80028be:	4649      	mov	r1, r9
 80028c0:	414b      	adcs	r3, r1
 80028c2:	617b      	str	r3, [r7, #20]
 80028c4:	f04f 0200 	mov.w	r2, #0
 80028c8:	f04f 0300 	mov.w	r3, #0
 80028cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80028d0:	4659      	mov	r1, fp
 80028d2:	00cb      	lsls	r3, r1, #3
 80028d4:	4651      	mov	r1, sl
 80028d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028da:	4651      	mov	r1, sl
 80028dc:	00ca      	lsls	r2, r1, #3
 80028de:	4610      	mov	r0, r2
 80028e0:	4619      	mov	r1, r3
 80028e2:	4603      	mov	r3, r0
 80028e4:	4642      	mov	r2, r8
 80028e6:	189b      	adds	r3, r3, r2
 80028e8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80028ec:	464b      	mov	r3, r9
 80028ee:	460a      	mov	r2, r1
 80028f0:	eb42 0303 	adc.w	r3, r2, r3
 80028f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80028f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002902:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002904:	f04f 0200 	mov.w	r2, #0
 8002908:	f04f 0300 	mov.w	r3, #0
 800290c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002910:	4649      	mov	r1, r9
 8002912:	008b      	lsls	r3, r1, #2
 8002914:	4641      	mov	r1, r8
 8002916:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800291a:	4641      	mov	r1, r8
 800291c:	008a      	lsls	r2, r1, #2
 800291e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002922:	f7fd fc5f 	bl	80001e4 <__aeabi_uldivmod>
 8002926:	4602      	mov	r2, r0
 8002928:	460b      	mov	r3, r1
 800292a:	4611      	mov	r1, r2
 800292c:	4b38      	ldr	r3, [pc, #224]	@ (8002a10 <UART_SetConfig+0x4e4>)
 800292e:	fba3 2301 	umull	r2, r3, r3, r1
 8002932:	095b      	lsrs	r3, r3, #5
 8002934:	2264      	movs	r2, #100	@ 0x64
 8002936:	fb02 f303 	mul.w	r3, r2, r3
 800293a:	1acb      	subs	r3, r1, r3
 800293c:	011b      	lsls	r3, r3, #4
 800293e:	3332      	adds	r3, #50	@ 0x32
 8002940:	4a33      	ldr	r2, [pc, #204]	@ (8002a10 <UART_SetConfig+0x4e4>)
 8002942:	fba2 2303 	umull	r2, r3, r2, r3
 8002946:	095b      	lsrs	r3, r3, #5
 8002948:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800294c:	441c      	add	r4, r3
 800294e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002952:	2200      	movs	r2, #0
 8002954:	673b      	str	r3, [r7, #112]	@ 0x70
 8002956:	677a      	str	r2, [r7, #116]	@ 0x74
 8002958:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800295c:	4642      	mov	r2, r8
 800295e:	464b      	mov	r3, r9
 8002960:	1891      	adds	r1, r2, r2
 8002962:	60b9      	str	r1, [r7, #8]
 8002964:	415b      	adcs	r3, r3
 8002966:	60fb      	str	r3, [r7, #12]
 8002968:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800296c:	4641      	mov	r1, r8
 800296e:	1851      	adds	r1, r2, r1
 8002970:	6039      	str	r1, [r7, #0]
 8002972:	4649      	mov	r1, r9
 8002974:	414b      	adcs	r3, r1
 8002976:	607b      	str	r3, [r7, #4]
 8002978:	f04f 0200 	mov.w	r2, #0
 800297c:	f04f 0300 	mov.w	r3, #0
 8002980:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002984:	4659      	mov	r1, fp
 8002986:	00cb      	lsls	r3, r1, #3
 8002988:	4651      	mov	r1, sl
 800298a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800298e:	4651      	mov	r1, sl
 8002990:	00ca      	lsls	r2, r1, #3
 8002992:	4610      	mov	r0, r2
 8002994:	4619      	mov	r1, r3
 8002996:	4603      	mov	r3, r0
 8002998:	4642      	mov	r2, r8
 800299a:	189b      	adds	r3, r3, r2
 800299c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800299e:	464b      	mov	r3, r9
 80029a0:	460a      	mov	r2, r1
 80029a2:	eb42 0303 	adc.w	r3, r2, r3
 80029a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80029a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	2200      	movs	r2, #0
 80029b0:	663b      	str	r3, [r7, #96]	@ 0x60
 80029b2:	667a      	str	r2, [r7, #100]	@ 0x64
 80029b4:	f04f 0200 	mov.w	r2, #0
 80029b8:	f04f 0300 	mov.w	r3, #0
 80029bc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80029c0:	4649      	mov	r1, r9
 80029c2:	008b      	lsls	r3, r1, #2
 80029c4:	4641      	mov	r1, r8
 80029c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80029ca:	4641      	mov	r1, r8
 80029cc:	008a      	lsls	r2, r1, #2
 80029ce:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80029d2:	f7fd fc07 	bl	80001e4 <__aeabi_uldivmod>
 80029d6:	4602      	mov	r2, r0
 80029d8:	460b      	mov	r3, r1
 80029da:	4b0d      	ldr	r3, [pc, #52]	@ (8002a10 <UART_SetConfig+0x4e4>)
 80029dc:	fba3 1302 	umull	r1, r3, r3, r2
 80029e0:	095b      	lsrs	r3, r3, #5
 80029e2:	2164      	movs	r1, #100	@ 0x64
 80029e4:	fb01 f303 	mul.w	r3, r1, r3
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	011b      	lsls	r3, r3, #4
 80029ec:	3332      	adds	r3, #50	@ 0x32
 80029ee:	4a08      	ldr	r2, [pc, #32]	@ (8002a10 <UART_SetConfig+0x4e4>)
 80029f0:	fba2 2303 	umull	r2, r3, r2, r3
 80029f4:	095b      	lsrs	r3, r3, #5
 80029f6:	f003 020f 	and.w	r2, r3, #15
 80029fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4422      	add	r2, r4
 8002a02:	609a      	str	r2, [r3, #8]
}
 8002a04:	bf00      	nop
 8002a06:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a10:	51eb851f 	.word	0x51eb851f

08002a14 <malloc>:
 8002a14:	4b02      	ldr	r3, [pc, #8]	@ (8002a20 <malloc+0xc>)
 8002a16:	4601      	mov	r1, r0
 8002a18:	6818      	ldr	r0, [r3, #0]
 8002a1a:	f000 b82d 	b.w	8002a78 <_malloc_r>
 8002a1e:	bf00      	nop
 8002a20:	20000018 	.word	0x20000018

08002a24 <free>:
 8002a24:	4b02      	ldr	r3, [pc, #8]	@ (8002a30 <free+0xc>)
 8002a26:	4601      	mov	r1, r0
 8002a28:	6818      	ldr	r0, [r3, #0]
 8002a2a:	f000 bb79 	b.w	8003120 <_free_r>
 8002a2e:	bf00      	nop
 8002a30:	20000018 	.word	0x20000018

08002a34 <sbrk_aligned>:
 8002a34:	b570      	push	{r4, r5, r6, lr}
 8002a36:	4e0f      	ldr	r6, [pc, #60]	@ (8002a74 <sbrk_aligned+0x40>)
 8002a38:	460c      	mov	r4, r1
 8002a3a:	6831      	ldr	r1, [r6, #0]
 8002a3c:	4605      	mov	r5, r0
 8002a3e:	b911      	cbnz	r1, 8002a46 <sbrk_aligned+0x12>
 8002a40:	f000 fb10 	bl	8003064 <_sbrk_r>
 8002a44:	6030      	str	r0, [r6, #0]
 8002a46:	4621      	mov	r1, r4
 8002a48:	4628      	mov	r0, r5
 8002a4a:	f000 fb0b 	bl	8003064 <_sbrk_r>
 8002a4e:	1c43      	adds	r3, r0, #1
 8002a50:	d103      	bne.n	8002a5a <sbrk_aligned+0x26>
 8002a52:	f04f 34ff 	mov.w	r4, #4294967295
 8002a56:	4620      	mov	r0, r4
 8002a58:	bd70      	pop	{r4, r5, r6, pc}
 8002a5a:	1cc4      	adds	r4, r0, #3
 8002a5c:	f024 0403 	bic.w	r4, r4, #3
 8002a60:	42a0      	cmp	r0, r4
 8002a62:	d0f8      	beq.n	8002a56 <sbrk_aligned+0x22>
 8002a64:	1a21      	subs	r1, r4, r0
 8002a66:	4628      	mov	r0, r5
 8002a68:	f000 fafc 	bl	8003064 <_sbrk_r>
 8002a6c:	3001      	adds	r0, #1
 8002a6e:	d1f2      	bne.n	8002a56 <sbrk_aligned+0x22>
 8002a70:	e7ef      	b.n	8002a52 <sbrk_aligned+0x1e>
 8002a72:	bf00      	nop
 8002a74:	20000134 	.word	0x20000134

08002a78 <_malloc_r>:
 8002a78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002a7c:	1ccd      	adds	r5, r1, #3
 8002a7e:	f025 0503 	bic.w	r5, r5, #3
 8002a82:	3508      	adds	r5, #8
 8002a84:	2d0c      	cmp	r5, #12
 8002a86:	bf38      	it	cc
 8002a88:	250c      	movcc	r5, #12
 8002a8a:	2d00      	cmp	r5, #0
 8002a8c:	4606      	mov	r6, r0
 8002a8e:	db01      	blt.n	8002a94 <_malloc_r+0x1c>
 8002a90:	42a9      	cmp	r1, r5
 8002a92:	d904      	bls.n	8002a9e <_malloc_r+0x26>
 8002a94:	230c      	movs	r3, #12
 8002a96:	6033      	str	r3, [r6, #0]
 8002a98:	2000      	movs	r0, #0
 8002a9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002a9e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002b74 <_malloc_r+0xfc>
 8002aa2:	f000 f869 	bl	8002b78 <__malloc_lock>
 8002aa6:	f8d8 3000 	ldr.w	r3, [r8]
 8002aaa:	461c      	mov	r4, r3
 8002aac:	bb44      	cbnz	r4, 8002b00 <_malloc_r+0x88>
 8002aae:	4629      	mov	r1, r5
 8002ab0:	4630      	mov	r0, r6
 8002ab2:	f7ff ffbf 	bl	8002a34 <sbrk_aligned>
 8002ab6:	1c43      	adds	r3, r0, #1
 8002ab8:	4604      	mov	r4, r0
 8002aba:	d158      	bne.n	8002b6e <_malloc_r+0xf6>
 8002abc:	f8d8 4000 	ldr.w	r4, [r8]
 8002ac0:	4627      	mov	r7, r4
 8002ac2:	2f00      	cmp	r7, #0
 8002ac4:	d143      	bne.n	8002b4e <_malloc_r+0xd6>
 8002ac6:	2c00      	cmp	r4, #0
 8002ac8:	d04b      	beq.n	8002b62 <_malloc_r+0xea>
 8002aca:	6823      	ldr	r3, [r4, #0]
 8002acc:	4639      	mov	r1, r7
 8002ace:	4630      	mov	r0, r6
 8002ad0:	eb04 0903 	add.w	r9, r4, r3
 8002ad4:	f000 fac6 	bl	8003064 <_sbrk_r>
 8002ad8:	4581      	cmp	r9, r0
 8002ada:	d142      	bne.n	8002b62 <_malloc_r+0xea>
 8002adc:	6821      	ldr	r1, [r4, #0]
 8002ade:	1a6d      	subs	r5, r5, r1
 8002ae0:	4629      	mov	r1, r5
 8002ae2:	4630      	mov	r0, r6
 8002ae4:	f7ff ffa6 	bl	8002a34 <sbrk_aligned>
 8002ae8:	3001      	adds	r0, #1
 8002aea:	d03a      	beq.n	8002b62 <_malloc_r+0xea>
 8002aec:	6823      	ldr	r3, [r4, #0]
 8002aee:	442b      	add	r3, r5
 8002af0:	6023      	str	r3, [r4, #0]
 8002af2:	f8d8 3000 	ldr.w	r3, [r8]
 8002af6:	685a      	ldr	r2, [r3, #4]
 8002af8:	bb62      	cbnz	r2, 8002b54 <_malloc_r+0xdc>
 8002afa:	f8c8 7000 	str.w	r7, [r8]
 8002afe:	e00f      	b.n	8002b20 <_malloc_r+0xa8>
 8002b00:	6822      	ldr	r2, [r4, #0]
 8002b02:	1b52      	subs	r2, r2, r5
 8002b04:	d420      	bmi.n	8002b48 <_malloc_r+0xd0>
 8002b06:	2a0b      	cmp	r2, #11
 8002b08:	d917      	bls.n	8002b3a <_malloc_r+0xc2>
 8002b0a:	1961      	adds	r1, r4, r5
 8002b0c:	42a3      	cmp	r3, r4
 8002b0e:	6025      	str	r5, [r4, #0]
 8002b10:	bf18      	it	ne
 8002b12:	6059      	strne	r1, [r3, #4]
 8002b14:	6863      	ldr	r3, [r4, #4]
 8002b16:	bf08      	it	eq
 8002b18:	f8c8 1000 	streq.w	r1, [r8]
 8002b1c:	5162      	str	r2, [r4, r5]
 8002b1e:	604b      	str	r3, [r1, #4]
 8002b20:	4630      	mov	r0, r6
 8002b22:	f000 f82f 	bl	8002b84 <__malloc_unlock>
 8002b26:	f104 000b 	add.w	r0, r4, #11
 8002b2a:	1d23      	adds	r3, r4, #4
 8002b2c:	f020 0007 	bic.w	r0, r0, #7
 8002b30:	1ac2      	subs	r2, r0, r3
 8002b32:	bf1c      	itt	ne
 8002b34:	1a1b      	subne	r3, r3, r0
 8002b36:	50a3      	strne	r3, [r4, r2]
 8002b38:	e7af      	b.n	8002a9a <_malloc_r+0x22>
 8002b3a:	6862      	ldr	r2, [r4, #4]
 8002b3c:	42a3      	cmp	r3, r4
 8002b3e:	bf0c      	ite	eq
 8002b40:	f8c8 2000 	streq.w	r2, [r8]
 8002b44:	605a      	strne	r2, [r3, #4]
 8002b46:	e7eb      	b.n	8002b20 <_malloc_r+0xa8>
 8002b48:	4623      	mov	r3, r4
 8002b4a:	6864      	ldr	r4, [r4, #4]
 8002b4c:	e7ae      	b.n	8002aac <_malloc_r+0x34>
 8002b4e:	463c      	mov	r4, r7
 8002b50:	687f      	ldr	r7, [r7, #4]
 8002b52:	e7b6      	b.n	8002ac2 <_malloc_r+0x4a>
 8002b54:	461a      	mov	r2, r3
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	42a3      	cmp	r3, r4
 8002b5a:	d1fb      	bne.n	8002b54 <_malloc_r+0xdc>
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	6053      	str	r3, [r2, #4]
 8002b60:	e7de      	b.n	8002b20 <_malloc_r+0xa8>
 8002b62:	230c      	movs	r3, #12
 8002b64:	6033      	str	r3, [r6, #0]
 8002b66:	4630      	mov	r0, r6
 8002b68:	f000 f80c 	bl	8002b84 <__malloc_unlock>
 8002b6c:	e794      	b.n	8002a98 <_malloc_r+0x20>
 8002b6e:	6005      	str	r5, [r0, #0]
 8002b70:	e7d6      	b.n	8002b20 <_malloc_r+0xa8>
 8002b72:	bf00      	nop
 8002b74:	20000138 	.word	0x20000138

08002b78 <__malloc_lock>:
 8002b78:	4801      	ldr	r0, [pc, #4]	@ (8002b80 <__malloc_lock+0x8>)
 8002b7a:	f000 bac0 	b.w	80030fe <__retarget_lock_acquire_recursive>
 8002b7e:	bf00      	nop
 8002b80:	2000027c 	.word	0x2000027c

08002b84 <__malloc_unlock>:
 8002b84:	4801      	ldr	r0, [pc, #4]	@ (8002b8c <__malloc_unlock+0x8>)
 8002b86:	f000 babb 	b.w	8003100 <__retarget_lock_release_recursive>
 8002b8a:	bf00      	nop
 8002b8c:	2000027c 	.word	0x2000027c

08002b90 <realloc>:
 8002b90:	4b02      	ldr	r3, [pc, #8]	@ (8002b9c <realloc+0xc>)
 8002b92:	460a      	mov	r2, r1
 8002b94:	4601      	mov	r1, r0
 8002b96:	6818      	ldr	r0, [r3, #0]
 8002b98:	f000 b802 	b.w	8002ba0 <_realloc_r>
 8002b9c:	20000018 	.word	0x20000018

08002ba0 <_realloc_r>:
 8002ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ba4:	4680      	mov	r8, r0
 8002ba6:	4615      	mov	r5, r2
 8002ba8:	460c      	mov	r4, r1
 8002baa:	b921      	cbnz	r1, 8002bb6 <_realloc_r+0x16>
 8002bac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002bb0:	4611      	mov	r1, r2
 8002bb2:	f7ff bf61 	b.w	8002a78 <_malloc_r>
 8002bb6:	b92a      	cbnz	r2, 8002bc4 <_realloc_r+0x24>
 8002bb8:	f000 fab2 	bl	8003120 <_free_r>
 8002bbc:	2400      	movs	r4, #0
 8002bbe:	4620      	mov	r0, r4
 8002bc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002bc4:	f000 faf6 	bl	80031b4 <_malloc_usable_size_r>
 8002bc8:	4285      	cmp	r5, r0
 8002bca:	4606      	mov	r6, r0
 8002bcc:	d802      	bhi.n	8002bd4 <_realloc_r+0x34>
 8002bce:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8002bd2:	d8f4      	bhi.n	8002bbe <_realloc_r+0x1e>
 8002bd4:	4629      	mov	r1, r5
 8002bd6:	4640      	mov	r0, r8
 8002bd8:	f7ff ff4e 	bl	8002a78 <_malloc_r>
 8002bdc:	4607      	mov	r7, r0
 8002bde:	2800      	cmp	r0, #0
 8002be0:	d0ec      	beq.n	8002bbc <_realloc_r+0x1c>
 8002be2:	42b5      	cmp	r5, r6
 8002be4:	462a      	mov	r2, r5
 8002be6:	4621      	mov	r1, r4
 8002be8:	bf28      	it	cs
 8002bea:	4632      	movcs	r2, r6
 8002bec:	f000 fa89 	bl	8003102 <memcpy>
 8002bf0:	4621      	mov	r1, r4
 8002bf2:	4640      	mov	r0, r8
 8002bf4:	f000 fa94 	bl	8003120 <_free_r>
 8002bf8:	463c      	mov	r4, r7
 8002bfa:	e7e0      	b.n	8002bbe <_realloc_r+0x1e>

08002bfc <std>:
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	b510      	push	{r4, lr}
 8002c00:	4604      	mov	r4, r0
 8002c02:	e9c0 3300 	strd	r3, r3, [r0]
 8002c06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002c0a:	6083      	str	r3, [r0, #8]
 8002c0c:	8181      	strh	r1, [r0, #12]
 8002c0e:	6643      	str	r3, [r0, #100]	@ 0x64
 8002c10:	81c2      	strh	r2, [r0, #14]
 8002c12:	6183      	str	r3, [r0, #24]
 8002c14:	4619      	mov	r1, r3
 8002c16:	2208      	movs	r2, #8
 8002c18:	305c      	adds	r0, #92	@ 0x5c
 8002c1a:	f000 f9e7 	bl	8002fec <memset>
 8002c1e:	4b0d      	ldr	r3, [pc, #52]	@ (8002c54 <std+0x58>)
 8002c20:	6263      	str	r3, [r4, #36]	@ 0x24
 8002c22:	4b0d      	ldr	r3, [pc, #52]	@ (8002c58 <std+0x5c>)
 8002c24:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002c26:	4b0d      	ldr	r3, [pc, #52]	@ (8002c5c <std+0x60>)
 8002c28:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002c2a:	4b0d      	ldr	r3, [pc, #52]	@ (8002c60 <std+0x64>)
 8002c2c:	6323      	str	r3, [r4, #48]	@ 0x30
 8002c2e:	4b0d      	ldr	r3, [pc, #52]	@ (8002c64 <std+0x68>)
 8002c30:	6224      	str	r4, [r4, #32]
 8002c32:	429c      	cmp	r4, r3
 8002c34:	d006      	beq.n	8002c44 <std+0x48>
 8002c36:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002c3a:	4294      	cmp	r4, r2
 8002c3c:	d002      	beq.n	8002c44 <std+0x48>
 8002c3e:	33d0      	adds	r3, #208	@ 0xd0
 8002c40:	429c      	cmp	r4, r3
 8002c42:	d105      	bne.n	8002c50 <std+0x54>
 8002c44:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002c48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c4c:	f000 ba56 	b.w	80030fc <__retarget_lock_init_recursive>
 8002c50:	bd10      	pop	{r4, pc}
 8002c52:	bf00      	nop
 8002c54:	08002e3d 	.word	0x08002e3d
 8002c58:	08002e5f 	.word	0x08002e5f
 8002c5c:	08002e97 	.word	0x08002e97
 8002c60:	08002ebb 	.word	0x08002ebb
 8002c64:	2000013c 	.word	0x2000013c

08002c68 <stdio_exit_handler>:
 8002c68:	4a02      	ldr	r2, [pc, #8]	@ (8002c74 <stdio_exit_handler+0xc>)
 8002c6a:	4903      	ldr	r1, [pc, #12]	@ (8002c78 <stdio_exit_handler+0x10>)
 8002c6c:	4803      	ldr	r0, [pc, #12]	@ (8002c7c <stdio_exit_handler+0x14>)
 8002c6e:	f000 b869 	b.w	8002d44 <_fwalk_sglue>
 8002c72:	bf00      	nop
 8002c74:	2000000c 	.word	0x2000000c
 8002c78:	080032cd 	.word	0x080032cd
 8002c7c:	2000001c 	.word	0x2000001c

08002c80 <cleanup_stdio>:
 8002c80:	6841      	ldr	r1, [r0, #4]
 8002c82:	4b0c      	ldr	r3, [pc, #48]	@ (8002cb4 <cleanup_stdio+0x34>)
 8002c84:	4299      	cmp	r1, r3
 8002c86:	b510      	push	{r4, lr}
 8002c88:	4604      	mov	r4, r0
 8002c8a:	d001      	beq.n	8002c90 <cleanup_stdio+0x10>
 8002c8c:	f000 fb1e 	bl	80032cc <_fflush_r>
 8002c90:	68a1      	ldr	r1, [r4, #8]
 8002c92:	4b09      	ldr	r3, [pc, #36]	@ (8002cb8 <cleanup_stdio+0x38>)
 8002c94:	4299      	cmp	r1, r3
 8002c96:	d002      	beq.n	8002c9e <cleanup_stdio+0x1e>
 8002c98:	4620      	mov	r0, r4
 8002c9a:	f000 fb17 	bl	80032cc <_fflush_r>
 8002c9e:	68e1      	ldr	r1, [r4, #12]
 8002ca0:	4b06      	ldr	r3, [pc, #24]	@ (8002cbc <cleanup_stdio+0x3c>)
 8002ca2:	4299      	cmp	r1, r3
 8002ca4:	d004      	beq.n	8002cb0 <cleanup_stdio+0x30>
 8002ca6:	4620      	mov	r0, r4
 8002ca8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002cac:	f000 bb0e 	b.w	80032cc <_fflush_r>
 8002cb0:	bd10      	pop	{r4, pc}
 8002cb2:	bf00      	nop
 8002cb4:	2000013c 	.word	0x2000013c
 8002cb8:	200001a4 	.word	0x200001a4
 8002cbc:	2000020c 	.word	0x2000020c

08002cc0 <global_stdio_init.part.0>:
 8002cc0:	b510      	push	{r4, lr}
 8002cc2:	4b0b      	ldr	r3, [pc, #44]	@ (8002cf0 <global_stdio_init.part.0+0x30>)
 8002cc4:	4c0b      	ldr	r4, [pc, #44]	@ (8002cf4 <global_stdio_init.part.0+0x34>)
 8002cc6:	4a0c      	ldr	r2, [pc, #48]	@ (8002cf8 <global_stdio_init.part.0+0x38>)
 8002cc8:	601a      	str	r2, [r3, #0]
 8002cca:	4620      	mov	r0, r4
 8002ccc:	2200      	movs	r2, #0
 8002cce:	2104      	movs	r1, #4
 8002cd0:	f7ff ff94 	bl	8002bfc <std>
 8002cd4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002cd8:	2201      	movs	r2, #1
 8002cda:	2109      	movs	r1, #9
 8002cdc:	f7ff ff8e 	bl	8002bfc <std>
 8002ce0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002ce4:	2202      	movs	r2, #2
 8002ce6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002cea:	2112      	movs	r1, #18
 8002cec:	f7ff bf86 	b.w	8002bfc <std>
 8002cf0:	20000274 	.word	0x20000274
 8002cf4:	2000013c 	.word	0x2000013c
 8002cf8:	08002c69 	.word	0x08002c69

08002cfc <__sfp_lock_acquire>:
 8002cfc:	4801      	ldr	r0, [pc, #4]	@ (8002d04 <__sfp_lock_acquire+0x8>)
 8002cfe:	f000 b9fe 	b.w	80030fe <__retarget_lock_acquire_recursive>
 8002d02:	bf00      	nop
 8002d04:	2000027d 	.word	0x2000027d

08002d08 <__sfp_lock_release>:
 8002d08:	4801      	ldr	r0, [pc, #4]	@ (8002d10 <__sfp_lock_release+0x8>)
 8002d0a:	f000 b9f9 	b.w	8003100 <__retarget_lock_release_recursive>
 8002d0e:	bf00      	nop
 8002d10:	2000027d 	.word	0x2000027d

08002d14 <__sinit>:
 8002d14:	b510      	push	{r4, lr}
 8002d16:	4604      	mov	r4, r0
 8002d18:	f7ff fff0 	bl	8002cfc <__sfp_lock_acquire>
 8002d1c:	6a23      	ldr	r3, [r4, #32]
 8002d1e:	b11b      	cbz	r3, 8002d28 <__sinit+0x14>
 8002d20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d24:	f7ff bff0 	b.w	8002d08 <__sfp_lock_release>
 8002d28:	4b04      	ldr	r3, [pc, #16]	@ (8002d3c <__sinit+0x28>)
 8002d2a:	6223      	str	r3, [r4, #32]
 8002d2c:	4b04      	ldr	r3, [pc, #16]	@ (8002d40 <__sinit+0x2c>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d1f5      	bne.n	8002d20 <__sinit+0xc>
 8002d34:	f7ff ffc4 	bl	8002cc0 <global_stdio_init.part.0>
 8002d38:	e7f2      	b.n	8002d20 <__sinit+0xc>
 8002d3a:	bf00      	nop
 8002d3c:	08002c81 	.word	0x08002c81
 8002d40:	20000274 	.word	0x20000274

08002d44 <_fwalk_sglue>:
 8002d44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002d48:	4607      	mov	r7, r0
 8002d4a:	4688      	mov	r8, r1
 8002d4c:	4614      	mov	r4, r2
 8002d4e:	2600      	movs	r6, #0
 8002d50:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002d54:	f1b9 0901 	subs.w	r9, r9, #1
 8002d58:	d505      	bpl.n	8002d66 <_fwalk_sglue+0x22>
 8002d5a:	6824      	ldr	r4, [r4, #0]
 8002d5c:	2c00      	cmp	r4, #0
 8002d5e:	d1f7      	bne.n	8002d50 <_fwalk_sglue+0xc>
 8002d60:	4630      	mov	r0, r6
 8002d62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002d66:	89ab      	ldrh	r3, [r5, #12]
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d907      	bls.n	8002d7c <_fwalk_sglue+0x38>
 8002d6c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002d70:	3301      	adds	r3, #1
 8002d72:	d003      	beq.n	8002d7c <_fwalk_sglue+0x38>
 8002d74:	4629      	mov	r1, r5
 8002d76:	4638      	mov	r0, r7
 8002d78:	47c0      	blx	r8
 8002d7a:	4306      	orrs	r6, r0
 8002d7c:	3568      	adds	r5, #104	@ 0x68
 8002d7e:	e7e9      	b.n	8002d54 <_fwalk_sglue+0x10>

08002d80 <_puts_r>:
 8002d80:	6a03      	ldr	r3, [r0, #32]
 8002d82:	b570      	push	{r4, r5, r6, lr}
 8002d84:	6884      	ldr	r4, [r0, #8]
 8002d86:	4605      	mov	r5, r0
 8002d88:	460e      	mov	r6, r1
 8002d8a:	b90b      	cbnz	r3, 8002d90 <_puts_r+0x10>
 8002d8c:	f7ff ffc2 	bl	8002d14 <__sinit>
 8002d90:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002d92:	07db      	lsls	r3, r3, #31
 8002d94:	d405      	bmi.n	8002da2 <_puts_r+0x22>
 8002d96:	89a3      	ldrh	r3, [r4, #12]
 8002d98:	0598      	lsls	r0, r3, #22
 8002d9a:	d402      	bmi.n	8002da2 <_puts_r+0x22>
 8002d9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002d9e:	f000 f9ae 	bl	80030fe <__retarget_lock_acquire_recursive>
 8002da2:	89a3      	ldrh	r3, [r4, #12]
 8002da4:	0719      	lsls	r1, r3, #28
 8002da6:	d502      	bpl.n	8002dae <_puts_r+0x2e>
 8002da8:	6923      	ldr	r3, [r4, #16]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d135      	bne.n	8002e1a <_puts_r+0x9a>
 8002dae:	4621      	mov	r1, r4
 8002db0:	4628      	mov	r0, r5
 8002db2:	f000 f8c5 	bl	8002f40 <__swsetup_r>
 8002db6:	b380      	cbz	r0, 8002e1a <_puts_r+0x9a>
 8002db8:	f04f 35ff 	mov.w	r5, #4294967295
 8002dbc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002dbe:	07da      	lsls	r2, r3, #31
 8002dc0:	d405      	bmi.n	8002dce <_puts_r+0x4e>
 8002dc2:	89a3      	ldrh	r3, [r4, #12]
 8002dc4:	059b      	lsls	r3, r3, #22
 8002dc6:	d402      	bmi.n	8002dce <_puts_r+0x4e>
 8002dc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002dca:	f000 f999 	bl	8003100 <__retarget_lock_release_recursive>
 8002dce:	4628      	mov	r0, r5
 8002dd0:	bd70      	pop	{r4, r5, r6, pc}
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	da04      	bge.n	8002de0 <_puts_r+0x60>
 8002dd6:	69a2      	ldr	r2, [r4, #24]
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	dc17      	bgt.n	8002e0c <_puts_r+0x8c>
 8002ddc:	290a      	cmp	r1, #10
 8002dde:	d015      	beq.n	8002e0c <_puts_r+0x8c>
 8002de0:	6823      	ldr	r3, [r4, #0]
 8002de2:	1c5a      	adds	r2, r3, #1
 8002de4:	6022      	str	r2, [r4, #0]
 8002de6:	7019      	strb	r1, [r3, #0]
 8002de8:	68a3      	ldr	r3, [r4, #8]
 8002dea:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002dee:	3b01      	subs	r3, #1
 8002df0:	60a3      	str	r3, [r4, #8]
 8002df2:	2900      	cmp	r1, #0
 8002df4:	d1ed      	bne.n	8002dd2 <_puts_r+0x52>
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	da11      	bge.n	8002e1e <_puts_r+0x9e>
 8002dfa:	4622      	mov	r2, r4
 8002dfc:	210a      	movs	r1, #10
 8002dfe:	4628      	mov	r0, r5
 8002e00:	f000 f85f 	bl	8002ec2 <__swbuf_r>
 8002e04:	3001      	adds	r0, #1
 8002e06:	d0d7      	beq.n	8002db8 <_puts_r+0x38>
 8002e08:	250a      	movs	r5, #10
 8002e0a:	e7d7      	b.n	8002dbc <_puts_r+0x3c>
 8002e0c:	4622      	mov	r2, r4
 8002e0e:	4628      	mov	r0, r5
 8002e10:	f000 f857 	bl	8002ec2 <__swbuf_r>
 8002e14:	3001      	adds	r0, #1
 8002e16:	d1e7      	bne.n	8002de8 <_puts_r+0x68>
 8002e18:	e7ce      	b.n	8002db8 <_puts_r+0x38>
 8002e1a:	3e01      	subs	r6, #1
 8002e1c:	e7e4      	b.n	8002de8 <_puts_r+0x68>
 8002e1e:	6823      	ldr	r3, [r4, #0]
 8002e20:	1c5a      	adds	r2, r3, #1
 8002e22:	6022      	str	r2, [r4, #0]
 8002e24:	220a      	movs	r2, #10
 8002e26:	701a      	strb	r2, [r3, #0]
 8002e28:	e7ee      	b.n	8002e08 <_puts_r+0x88>
	...

08002e2c <puts>:
 8002e2c:	4b02      	ldr	r3, [pc, #8]	@ (8002e38 <puts+0xc>)
 8002e2e:	4601      	mov	r1, r0
 8002e30:	6818      	ldr	r0, [r3, #0]
 8002e32:	f7ff bfa5 	b.w	8002d80 <_puts_r>
 8002e36:	bf00      	nop
 8002e38:	20000018 	.word	0x20000018

08002e3c <__sread>:
 8002e3c:	b510      	push	{r4, lr}
 8002e3e:	460c      	mov	r4, r1
 8002e40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e44:	f000 f8fc 	bl	8003040 <_read_r>
 8002e48:	2800      	cmp	r0, #0
 8002e4a:	bfab      	itete	ge
 8002e4c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002e4e:	89a3      	ldrhlt	r3, [r4, #12]
 8002e50:	181b      	addge	r3, r3, r0
 8002e52:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002e56:	bfac      	ite	ge
 8002e58:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002e5a:	81a3      	strhlt	r3, [r4, #12]
 8002e5c:	bd10      	pop	{r4, pc}

08002e5e <__swrite>:
 8002e5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e62:	461f      	mov	r7, r3
 8002e64:	898b      	ldrh	r3, [r1, #12]
 8002e66:	05db      	lsls	r3, r3, #23
 8002e68:	4605      	mov	r5, r0
 8002e6a:	460c      	mov	r4, r1
 8002e6c:	4616      	mov	r6, r2
 8002e6e:	d505      	bpl.n	8002e7c <__swrite+0x1e>
 8002e70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e74:	2302      	movs	r3, #2
 8002e76:	2200      	movs	r2, #0
 8002e78:	f000 f8d0 	bl	800301c <_lseek_r>
 8002e7c:	89a3      	ldrh	r3, [r4, #12]
 8002e7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002e82:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002e86:	81a3      	strh	r3, [r4, #12]
 8002e88:	4632      	mov	r2, r6
 8002e8a:	463b      	mov	r3, r7
 8002e8c:	4628      	mov	r0, r5
 8002e8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002e92:	f000 b8f7 	b.w	8003084 <_write_r>

08002e96 <__sseek>:
 8002e96:	b510      	push	{r4, lr}
 8002e98:	460c      	mov	r4, r1
 8002e9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e9e:	f000 f8bd 	bl	800301c <_lseek_r>
 8002ea2:	1c43      	adds	r3, r0, #1
 8002ea4:	89a3      	ldrh	r3, [r4, #12]
 8002ea6:	bf15      	itete	ne
 8002ea8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002eaa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002eae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002eb2:	81a3      	strheq	r3, [r4, #12]
 8002eb4:	bf18      	it	ne
 8002eb6:	81a3      	strhne	r3, [r4, #12]
 8002eb8:	bd10      	pop	{r4, pc}

08002eba <__sclose>:
 8002eba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ebe:	f000 b89d 	b.w	8002ffc <_close_r>

08002ec2 <__swbuf_r>:
 8002ec2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ec4:	460e      	mov	r6, r1
 8002ec6:	4614      	mov	r4, r2
 8002ec8:	4605      	mov	r5, r0
 8002eca:	b118      	cbz	r0, 8002ed4 <__swbuf_r+0x12>
 8002ecc:	6a03      	ldr	r3, [r0, #32]
 8002ece:	b90b      	cbnz	r3, 8002ed4 <__swbuf_r+0x12>
 8002ed0:	f7ff ff20 	bl	8002d14 <__sinit>
 8002ed4:	69a3      	ldr	r3, [r4, #24]
 8002ed6:	60a3      	str	r3, [r4, #8]
 8002ed8:	89a3      	ldrh	r3, [r4, #12]
 8002eda:	071a      	lsls	r2, r3, #28
 8002edc:	d501      	bpl.n	8002ee2 <__swbuf_r+0x20>
 8002ede:	6923      	ldr	r3, [r4, #16]
 8002ee0:	b943      	cbnz	r3, 8002ef4 <__swbuf_r+0x32>
 8002ee2:	4621      	mov	r1, r4
 8002ee4:	4628      	mov	r0, r5
 8002ee6:	f000 f82b 	bl	8002f40 <__swsetup_r>
 8002eea:	b118      	cbz	r0, 8002ef4 <__swbuf_r+0x32>
 8002eec:	f04f 37ff 	mov.w	r7, #4294967295
 8002ef0:	4638      	mov	r0, r7
 8002ef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ef4:	6823      	ldr	r3, [r4, #0]
 8002ef6:	6922      	ldr	r2, [r4, #16]
 8002ef8:	1a98      	subs	r0, r3, r2
 8002efa:	6963      	ldr	r3, [r4, #20]
 8002efc:	b2f6      	uxtb	r6, r6
 8002efe:	4283      	cmp	r3, r0
 8002f00:	4637      	mov	r7, r6
 8002f02:	dc05      	bgt.n	8002f10 <__swbuf_r+0x4e>
 8002f04:	4621      	mov	r1, r4
 8002f06:	4628      	mov	r0, r5
 8002f08:	f000 f9e0 	bl	80032cc <_fflush_r>
 8002f0c:	2800      	cmp	r0, #0
 8002f0e:	d1ed      	bne.n	8002eec <__swbuf_r+0x2a>
 8002f10:	68a3      	ldr	r3, [r4, #8]
 8002f12:	3b01      	subs	r3, #1
 8002f14:	60a3      	str	r3, [r4, #8]
 8002f16:	6823      	ldr	r3, [r4, #0]
 8002f18:	1c5a      	adds	r2, r3, #1
 8002f1a:	6022      	str	r2, [r4, #0]
 8002f1c:	701e      	strb	r6, [r3, #0]
 8002f1e:	6962      	ldr	r2, [r4, #20]
 8002f20:	1c43      	adds	r3, r0, #1
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d004      	beq.n	8002f30 <__swbuf_r+0x6e>
 8002f26:	89a3      	ldrh	r3, [r4, #12]
 8002f28:	07db      	lsls	r3, r3, #31
 8002f2a:	d5e1      	bpl.n	8002ef0 <__swbuf_r+0x2e>
 8002f2c:	2e0a      	cmp	r6, #10
 8002f2e:	d1df      	bne.n	8002ef0 <__swbuf_r+0x2e>
 8002f30:	4621      	mov	r1, r4
 8002f32:	4628      	mov	r0, r5
 8002f34:	f000 f9ca 	bl	80032cc <_fflush_r>
 8002f38:	2800      	cmp	r0, #0
 8002f3a:	d0d9      	beq.n	8002ef0 <__swbuf_r+0x2e>
 8002f3c:	e7d6      	b.n	8002eec <__swbuf_r+0x2a>
	...

08002f40 <__swsetup_r>:
 8002f40:	b538      	push	{r3, r4, r5, lr}
 8002f42:	4b29      	ldr	r3, [pc, #164]	@ (8002fe8 <__swsetup_r+0xa8>)
 8002f44:	4605      	mov	r5, r0
 8002f46:	6818      	ldr	r0, [r3, #0]
 8002f48:	460c      	mov	r4, r1
 8002f4a:	b118      	cbz	r0, 8002f54 <__swsetup_r+0x14>
 8002f4c:	6a03      	ldr	r3, [r0, #32]
 8002f4e:	b90b      	cbnz	r3, 8002f54 <__swsetup_r+0x14>
 8002f50:	f7ff fee0 	bl	8002d14 <__sinit>
 8002f54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f58:	0719      	lsls	r1, r3, #28
 8002f5a:	d422      	bmi.n	8002fa2 <__swsetup_r+0x62>
 8002f5c:	06da      	lsls	r2, r3, #27
 8002f5e:	d407      	bmi.n	8002f70 <__swsetup_r+0x30>
 8002f60:	2209      	movs	r2, #9
 8002f62:	602a      	str	r2, [r5, #0]
 8002f64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f68:	81a3      	strh	r3, [r4, #12]
 8002f6a:	f04f 30ff 	mov.w	r0, #4294967295
 8002f6e:	e033      	b.n	8002fd8 <__swsetup_r+0x98>
 8002f70:	0758      	lsls	r0, r3, #29
 8002f72:	d512      	bpl.n	8002f9a <__swsetup_r+0x5a>
 8002f74:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002f76:	b141      	cbz	r1, 8002f8a <__swsetup_r+0x4a>
 8002f78:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002f7c:	4299      	cmp	r1, r3
 8002f7e:	d002      	beq.n	8002f86 <__swsetup_r+0x46>
 8002f80:	4628      	mov	r0, r5
 8002f82:	f000 f8cd 	bl	8003120 <_free_r>
 8002f86:	2300      	movs	r3, #0
 8002f88:	6363      	str	r3, [r4, #52]	@ 0x34
 8002f8a:	89a3      	ldrh	r3, [r4, #12]
 8002f8c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002f90:	81a3      	strh	r3, [r4, #12]
 8002f92:	2300      	movs	r3, #0
 8002f94:	6063      	str	r3, [r4, #4]
 8002f96:	6923      	ldr	r3, [r4, #16]
 8002f98:	6023      	str	r3, [r4, #0]
 8002f9a:	89a3      	ldrh	r3, [r4, #12]
 8002f9c:	f043 0308 	orr.w	r3, r3, #8
 8002fa0:	81a3      	strh	r3, [r4, #12]
 8002fa2:	6923      	ldr	r3, [r4, #16]
 8002fa4:	b94b      	cbnz	r3, 8002fba <__swsetup_r+0x7a>
 8002fa6:	89a3      	ldrh	r3, [r4, #12]
 8002fa8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002fac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002fb0:	d003      	beq.n	8002fba <__swsetup_r+0x7a>
 8002fb2:	4621      	mov	r1, r4
 8002fb4:	4628      	mov	r0, r5
 8002fb6:	f000 f9d7 	bl	8003368 <__smakebuf_r>
 8002fba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002fbe:	f013 0201 	ands.w	r2, r3, #1
 8002fc2:	d00a      	beq.n	8002fda <__swsetup_r+0x9a>
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	60a2      	str	r2, [r4, #8]
 8002fc8:	6962      	ldr	r2, [r4, #20]
 8002fca:	4252      	negs	r2, r2
 8002fcc:	61a2      	str	r2, [r4, #24]
 8002fce:	6922      	ldr	r2, [r4, #16]
 8002fd0:	b942      	cbnz	r2, 8002fe4 <__swsetup_r+0xa4>
 8002fd2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002fd6:	d1c5      	bne.n	8002f64 <__swsetup_r+0x24>
 8002fd8:	bd38      	pop	{r3, r4, r5, pc}
 8002fda:	0799      	lsls	r1, r3, #30
 8002fdc:	bf58      	it	pl
 8002fde:	6962      	ldrpl	r2, [r4, #20]
 8002fe0:	60a2      	str	r2, [r4, #8]
 8002fe2:	e7f4      	b.n	8002fce <__swsetup_r+0x8e>
 8002fe4:	2000      	movs	r0, #0
 8002fe6:	e7f7      	b.n	8002fd8 <__swsetup_r+0x98>
 8002fe8:	20000018 	.word	0x20000018

08002fec <memset>:
 8002fec:	4402      	add	r2, r0
 8002fee:	4603      	mov	r3, r0
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d100      	bne.n	8002ff6 <memset+0xa>
 8002ff4:	4770      	bx	lr
 8002ff6:	f803 1b01 	strb.w	r1, [r3], #1
 8002ffa:	e7f9      	b.n	8002ff0 <memset+0x4>

08002ffc <_close_r>:
 8002ffc:	b538      	push	{r3, r4, r5, lr}
 8002ffe:	4d06      	ldr	r5, [pc, #24]	@ (8003018 <_close_r+0x1c>)
 8003000:	2300      	movs	r3, #0
 8003002:	4604      	mov	r4, r0
 8003004:	4608      	mov	r0, r1
 8003006:	602b      	str	r3, [r5, #0]
 8003008:	f7fe f87c 	bl	8001104 <_close>
 800300c:	1c43      	adds	r3, r0, #1
 800300e:	d102      	bne.n	8003016 <_close_r+0x1a>
 8003010:	682b      	ldr	r3, [r5, #0]
 8003012:	b103      	cbz	r3, 8003016 <_close_r+0x1a>
 8003014:	6023      	str	r3, [r4, #0]
 8003016:	bd38      	pop	{r3, r4, r5, pc}
 8003018:	20000278 	.word	0x20000278

0800301c <_lseek_r>:
 800301c:	b538      	push	{r3, r4, r5, lr}
 800301e:	4d07      	ldr	r5, [pc, #28]	@ (800303c <_lseek_r+0x20>)
 8003020:	4604      	mov	r4, r0
 8003022:	4608      	mov	r0, r1
 8003024:	4611      	mov	r1, r2
 8003026:	2200      	movs	r2, #0
 8003028:	602a      	str	r2, [r5, #0]
 800302a:	461a      	mov	r2, r3
 800302c:	f7fe f891 	bl	8001152 <_lseek>
 8003030:	1c43      	adds	r3, r0, #1
 8003032:	d102      	bne.n	800303a <_lseek_r+0x1e>
 8003034:	682b      	ldr	r3, [r5, #0]
 8003036:	b103      	cbz	r3, 800303a <_lseek_r+0x1e>
 8003038:	6023      	str	r3, [r4, #0]
 800303a:	bd38      	pop	{r3, r4, r5, pc}
 800303c:	20000278 	.word	0x20000278

08003040 <_read_r>:
 8003040:	b538      	push	{r3, r4, r5, lr}
 8003042:	4d07      	ldr	r5, [pc, #28]	@ (8003060 <_read_r+0x20>)
 8003044:	4604      	mov	r4, r0
 8003046:	4608      	mov	r0, r1
 8003048:	4611      	mov	r1, r2
 800304a:	2200      	movs	r2, #0
 800304c:	602a      	str	r2, [r5, #0]
 800304e:	461a      	mov	r2, r3
 8003050:	f7fe f81f 	bl	8001092 <_read>
 8003054:	1c43      	adds	r3, r0, #1
 8003056:	d102      	bne.n	800305e <_read_r+0x1e>
 8003058:	682b      	ldr	r3, [r5, #0]
 800305a:	b103      	cbz	r3, 800305e <_read_r+0x1e>
 800305c:	6023      	str	r3, [r4, #0]
 800305e:	bd38      	pop	{r3, r4, r5, pc}
 8003060:	20000278 	.word	0x20000278

08003064 <_sbrk_r>:
 8003064:	b538      	push	{r3, r4, r5, lr}
 8003066:	4d06      	ldr	r5, [pc, #24]	@ (8003080 <_sbrk_r+0x1c>)
 8003068:	2300      	movs	r3, #0
 800306a:	4604      	mov	r4, r0
 800306c:	4608      	mov	r0, r1
 800306e:	602b      	str	r3, [r5, #0]
 8003070:	f7fe f87c 	bl	800116c <_sbrk>
 8003074:	1c43      	adds	r3, r0, #1
 8003076:	d102      	bne.n	800307e <_sbrk_r+0x1a>
 8003078:	682b      	ldr	r3, [r5, #0]
 800307a:	b103      	cbz	r3, 800307e <_sbrk_r+0x1a>
 800307c:	6023      	str	r3, [r4, #0]
 800307e:	bd38      	pop	{r3, r4, r5, pc}
 8003080:	20000278 	.word	0x20000278

08003084 <_write_r>:
 8003084:	b538      	push	{r3, r4, r5, lr}
 8003086:	4d07      	ldr	r5, [pc, #28]	@ (80030a4 <_write_r+0x20>)
 8003088:	4604      	mov	r4, r0
 800308a:	4608      	mov	r0, r1
 800308c:	4611      	mov	r1, r2
 800308e:	2200      	movs	r2, #0
 8003090:	602a      	str	r2, [r5, #0]
 8003092:	461a      	mov	r2, r3
 8003094:	f7fe f81a 	bl	80010cc <_write>
 8003098:	1c43      	adds	r3, r0, #1
 800309a:	d102      	bne.n	80030a2 <_write_r+0x1e>
 800309c:	682b      	ldr	r3, [r5, #0]
 800309e:	b103      	cbz	r3, 80030a2 <_write_r+0x1e>
 80030a0:	6023      	str	r3, [r4, #0]
 80030a2:	bd38      	pop	{r3, r4, r5, pc}
 80030a4:	20000278 	.word	0x20000278

080030a8 <__errno>:
 80030a8:	4b01      	ldr	r3, [pc, #4]	@ (80030b0 <__errno+0x8>)
 80030aa:	6818      	ldr	r0, [r3, #0]
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	20000018 	.word	0x20000018

080030b4 <__libc_init_array>:
 80030b4:	b570      	push	{r4, r5, r6, lr}
 80030b6:	4d0d      	ldr	r5, [pc, #52]	@ (80030ec <__libc_init_array+0x38>)
 80030b8:	4c0d      	ldr	r4, [pc, #52]	@ (80030f0 <__libc_init_array+0x3c>)
 80030ba:	1b64      	subs	r4, r4, r5
 80030bc:	10a4      	asrs	r4, r4, #2
 80030be:	2600      	movs	r6, #0
 80030c0:	42a6      	cmp	r6, r4
 80030c2:	d109      	bne.n	80030d8 <__libc_init_array+0x24>
 80030c4:	4d0b      	ldr	r5, [pc, #44]	@ (80030f4 <__libc_init_array+0x40>)
 80030c6:	4c0c      	ldr	r4, [pc, #48]	@ (80030f8 <__libc_init_array+0x44>)
 80030c8:	f000 f9ac 	bl	8003424 <_init>
 80030cc:	1b64      	subs	r4, r4, r5
 80030ce:	10a4      	asrs	r4, r4, #2
 80030d0:	2600      	movs	r6, #0
 80030d2:	42a6      	cmp	r6, r4
 80030d4:	d105      	bne.n	80030e2 <__libc_init_array+0x2e>
 80030d6:	bd70      	pop	{r4, r5, r6, pc}
 80030d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80030dc:	4798      	blx	r3
 80030de:	3601      	adds	r6, #1
 80030e0:	e7ee      	b.n	80030c0 <__libc_init_array+0xc>
 80030e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80030e6:	4798      	blx	r3
 80030e8:	3601      	adds	r6, #1
 80030ea:	e7f2      	b.n	80030d2 <__libc_init_array+0x1e>
 80030ec:	080034c4 	.word	0x080034c4
 80030f0:	080034c4 	.word	0x080034c4
 80030f4:	080034c4 	.word	0x080034c4
 80030f8:	080034c8 	.word	0x080034c8

080030fc <__retarget_lock_init_recursive>:
 80030fc:	4770      	bx	lr

080030fe <__retarget_lock_acquire_recursive>:
 80030fe:	4770      	bx	lr

08003100 <__retarget_lock_release_recursive>:
 8003100:	4770      	bx	lr

08003102 <memcpy>:
 8003102:	440a      	add	r2, r1
 8003104:	4291      	cmp	r1, r2
 8003106:	f100 33ff 	add.w	r3, r0, #4294967295
 800310a:	d100      	bne.n	800310e <memcpy+0xc>
 800310c:	4770      	bx	lr
 800310e:	b510      	push	{r4, lr}
 8003110:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003114:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003118:	4291      	cmp	r1, r2
 800311a:	d1f9      	bne.n	8003110 <memcpy+0xe>
 800311c:	bd10      	pop	{r4, pc}
	...

08003120 <_free_r>:
 8003120:	b538      	push	{r3, r4, r5, lr}
 8003122:	4605      	mov	r5, r0
 8003124:	2900      	cmp	r1, #0
 8003126:	d041      	beq.n	80031ac <_free_r+0x8c>
 8003128:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800312c:	1f0c      	subs	r4, r1, #4
 800312e:	2b00      	cmp	r3, #0
 8003130:	bfb8      	it	lt
 8003132:	18e4      	addlt	r4, r4, r3
 8003134:	f7ff fd20 	bl	8002b78 <__malloc_lock>
 8003138:	4a1d      	ldr	r2, [pc, #116]	@ (80031b0 <_free_r+0x90>)
 800313a:	6813      	ldr	r3, [r2, #0]
 800313c:	b933      	cbnz	r3, 800314c <_free_r+0x2c>
 800313e:	6063      	str	r3, [r4, #4]
 8003140:	6014      	str	r4, [r2, #0]
 8003142:	4628      	mov	r0, r5
 8003144:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003148:	f7ff bd1c 	b.w	8002b84 <__malloc_unlock>
 800314c:	42a3      	cmp	r3, r4
 800314e:	d908      	bls.n	8003162 <_free_r+0x42>
 8003150:	6820      	ldr	r0, [r4, #0]
 8003152:	1821      	adds	r1, r4, r0
 8003154:	428b      	cmp	r3, r1
 8003156:	bf01      	itttt	eq
 8003158:	6819      	ldreq	r1, [r3, #0]
 800315a:	685b      	ldreq	r3, [r3, #4]
 800315c:	1809      	addeq	r1, r1, r0
 800315e:	6021      	streq	r1, [r4, #0]
 8003160:	e7ed      	b.n	800313e <_free_r+0x1e>
 8003162:	461a      	mov	r2, r3
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	b10b      	cbz	r3, 800316c <_free_r+0x4c>
 8003168:	42a3      	cmp	r3, r4
 800316a:	d9fa      	bls.n	8003162 <_free_r+0x42>
 800316c:	6811      	ldr	r1, [r2, #0]
 800316e:	1850      	adds	r0, r2, r1
 8003170:	42a0      	cmp	r0, r4
 8003172:	d10b      	bne.n	800318c <_free_r+0x6c>
 8003174:	6820      	ldr	r0, [r4, #0]
 8003176:	4401      	add	r1, r0
 8003178:	1850      	adds	r0, r2, r1
 800317a:	4283      	cmp	r3, r0
 800317c:	6011      	str	r1, [r2, #0]
 800317e:	d1e0      	bne.n	8003142 <_free_r+0x22>
 8003180:	6818      	ldr	r0, [r3, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	6053      	str	r3, [r2, #4]
 8003186:	4408      	add	r0, r1
 8003188:	6010      	str	r0, [r2, #0]
 800318a:	e7da      	b.n	8003142 <_free_r+0x22>
 800318c:	d902      	bls.n	8003194 <_free_r+0x74>
 800318e:	230c      	movs	r3, #12
 8003190:	602b      	str	r3, [r5, #0]
 8003192:	e7d6      	b.n	8003142 <_free_r+0x22>
 8003194:	6820      	ldr	r0, [r4, #0]
 8003196:	1821      	adds	r1, r4, r0
 8003198:	428b      	cmp	r3, r1
 800319a:	bf04      	itt	eq
 800319c:	6819      	ldreq	r1, [r3, #0]
 800319e:	685b      	ldreq	r3, [r3, #4]
 80031a0:	6063      	str	r3, [r4, #4]
 80031a2:	bf04      	itt	eq
 80031a4:	1809      	addeq	r1, r1, r0
 80031a6:	6021      	streq	r1, [r4, #0]
 80031a8:	6054      	str	r4, [r2, #4]
 80031aa:	e7ca      	b.n	8003142 <_free_r+0x22>
 80031ac:	bd38      	pop	{r3, r4, r5, pc}
 80031ae:	bf00      	nop
 80031b0:	20000138 	.word	0x20000138

080031b4 <_malloc_usable_size_r>:
 80031b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80031b8:	1f18      	subs	r0, r3, #4
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	bfbc      	itt	lt
 80031be:	580b      	ldrlt	r3, [r1, r0]
 80031c0:	18c0      	addlt	r0, r0, r3
 80031c2:	4770      	bx	lr

080031c4 <__sflush_r>:
 80031c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80031c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031cc:	0716      	lsls	r6, r2, #28
 80031ce:	4605      	mov	r5, r0
 80031d0:	460c      	mov	r4, r1
 80031d2:	d454      	bmi.n	800327e <__sflush_r+0xba>
 80031d4:	684b      	ldr	r3, [r1, #4]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	dc02      	bgt.n	80031e0 <__sflush_r+0x1c>
 80031da:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80031dc:	2b00      	cmp	r3, #0
 80031de:	dd48      	ble.n	8003272 <__sflush_r+0xae>
 80031e0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80031e2:	2e00      	cmp	r6, #0
 80031e4:	d045      	beq.n	8003272 <__sflush_r+0xae>
 80031e6:	2300      	movs	r3, #0
 80031e8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80031ec:	682f      	ldr	r7, [r5, #0]
 80031ee:	6a21      	ldr	r1, [r4, #32]
 80031f0:	602b      	str	r3, [r5, #0]
 80031f2:	d030      	beq.n	8003256 <__sflush_r+0x92>
 80031f4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80031f6:	89a3      	ldrh	r3, [r4, #12]
 80031f8:	0759      	lsls	r1, r3, #29
 80031fa:	d505      	bpl.n	8003208 <__sflush_r+0x44>
 80031fc:	6863      	ldr	r3, [r4, #4]
 80031fe:	1ad2      	subs	r2, r2, r3
 8003200:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003202:	b10b      	cbz	r3, 8003208 <__sflush_r+0x44>
 8003204:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003206:	1ad2      	subs	r2, r2, r3
 8003208:	2300      	movs	r3, #0
 800320a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800320c:	6a21      	ldr	r1, [r4, #32]
 800320e:	4628      	mov	r0, r5
 8003210:	47b0      	blx	r6
 8003212:	1c43      	adds	r3, r0, #1
 8003214:	89a3      	ldrh	r3, [r4, #12]
 8003216:	d106      	bne.n	8003226 <__sflush_r+0x62>
 8003218:	6829      	ldr	r1, [r5, #0]
 800321a:	291d      	cmp	r1, #29
 800321c:	d82b      	bhi.n	8003276 <__sflush_r+0xb2>
 800321e:	4a2a      	ldr	r2, [pc, #168]	@ (80032c8 <__sflush_r+0x104>)
 8003220:	410a      	asrs	r2, r1
 8003222:	07d6      	lsls	r6, r2, #31
 8003224:	d427      	bmi.n	8003276 <__sflush_r+0xb2>
 8003226:	2200      	movs	r2, #0
 8003228:	6062      	str	r2, [r4, #4]
 800322a:	04d9      	lsls	r1, r3, #19
 800322c:	6922      	ldr	r2, [r4, #16]
 800322e:	6022      	str	r2, [r4, #0]
 8003230:	d504      	bpl.n	800323c <__sflush_r+0x78>
 8003232:	1c42      	adds	r2, r0, #1
 8003234:	d101      	bne.n	800323a <__sflush_r+0x76>
 8003236:	682b      	ldr	r3, [r5, #0]
 8003238:	b903      	cbnz	r3, 800323c <__sflush_r+0x78>
 800323a:	6560      	str	r0, [r4, #84]	@ 0x54
 800323c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800323e:	602f      	str	r7, [r5, #0]
 8003240:	b1b9      	cbz	r1, 8003272 <__sflush_r+0xae>
 8003242:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003246:	4299      	cmp	r1, r3
 8003248:	d002      	beq.n	8003250 <__sflush_r+0x8c>
 800324a:	4628      	mov	r0, r5
 800324c:	f7ff ff68 	bl	8003120 <_free_r>
 8003250:	2300      	movs	r3, #0
 8003252:	6363      	str	r3, [r4, #52]	@ 0x34
 8003254:	e00d      	b.n	8003272 <__sflush_r+0xae>
 8003256:	2301      	movs	r3, #1
 8003258:	4628      	mov	r0, r5
 800325a:	47b0      	blx	r6
 800325c:	4602      	mov	r2, r0
 800325e:	1c50      	adds	r0, r2, #1
 8003260:	d1c9      	bne.n	80031f6 <__sflush_r+0x32>
 8003262:	682b      	ldr	r3, [r5, #0]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d0c6      	beq.n	80031f6 <__sflush_r+0x32>
 8003268:	2b1d      	cmp	r3, #29
 800326a:	d001      	beq.n	8003270 <__sflush_r+0xac>
 800326c:	2b16      	cmp	r3, #22
 800326e:	d11e      	bne.n	80032ae <__sflush_r+0xea>
 8003270:	602f      	str	r7, [r5, #0]
 8003272:	2000      	movs	r0, #0
 8003274:	e022      	b.n	80032bc <__sflush_r+0xf8>
 8003276:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800327a:	b21b      	sxth	r3, r3
 800327c:	e01b      	b.n	80032b6 <__sflush_r+0xf2>
 800327e:	690f      	ldr	r7, [r1, #16]
 8003280:	2f00      	cmp	r7, #0
 8003282:	d0f6      	beq.n	8003272 <__sflush_r+0xae>
 8003284:	0793      	lsls	r3, r2, #30
 8003286:	680e      	ldr	r6, [r1, #0]
 8003288:	bf08      	it	eq
 800328a:	694b      	ldreq	r3, [r1, #20]
 800328c:	600f      	str	r7, [r1, #0]
 800328e:	bf18      	it	ne
 8003290:	2300      	movne	r3, #0
 8003292:	eba6 0807 	sub.w	r8, r6, r7
 8003296:	608b      	str	r3, [r1, #8]
 8003298:	f1b8 0f00 	cmp.w	r8, #0
 800329c:	dde9      	ble.n	8003272 <__sflush_r+0xae>
 800329e:	6a21      	ldr	r1, [r4, #32]
 80032a0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80032a2:	4643      	mov	r3, r8
 80032a4:	463a      	mov	r2, r7
 80032a6:	4628      	mov	r0, r5
 80032a8:	47b0      	blx	r6
 80032aa:	2800      	cmp	r0, #0
 80032ac:	dc08      	bgt.n	80032c0 <__sflush_r+0xfc>
 80032ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80032b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80032b6:	81a3      	strh	r3, [r4, #12]
 80032b8:	f04f 30ff 	mov.w	r0, #4294967295
 80032bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80032c0:	4407      	add	r7, r0
 80032c2:	eba8 0800 	sub.w	r8, r8, r0
 80032c6:	e7e7      	b.n	8003298 <__sflush_r+0xd4>
 80032c8:	dfbffffe 	.word	0xdfbffffe

080032cc <_fflush_r>:
 80032cc:	b538      	push	{r3, r4, r5, lr}
 80032ce:	690b      	ldr	r3, [r1, #16]
 80032d0:	4605      	mov	r5, r0
 80032d2:	460c      	mov	r4, r1
 80032d4:	b913      	cbnz	r3, 80032dc <_fflush_r+0x10>
 80032d6:	2500      	movs	r5, #0
 80032d8:	4628      	mov	r0, r5
 80032da:	bd38      	pop	{r3, r4, r5, pc}
 80032dc:	b118      	cbz	r0, 80032e6 <_fflush_r+0x1a>
 80032de:	6a03      	ldr	r3, [r0, #32]
 80032e0:	b90b      	cbnz	r3, 80032e6 <_fflush_r+0x1a>
 80032e2:	f7ff fd17 	bl	8002d14 <__sinit>
 80032e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d0f3      	beq.n	80032d6 <_fflush_r+0xa>
 80032ee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80032f0:	07d0      	lsls	r0, r2, #31
 80032f2:	d404      	bmi.n	80032fe <_fflush_r+0x32>
 80032f4:	0599      	lsls	r1, r3, #22
 80032f6:	d402      	bmi.n	80032fe <_fflush_r+0x32>
 80032f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80032fa:	f7ff ff00 	bl	80030fe <__retarget_lock_acquire_recursive>
 80032fe:	4628      	mov	r0, r5
 8003300:	4621      	mov	r1, r4
 8003302:	f7ff ff5f 	bl	80031c4 <__sflush_r>
 8003306:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003308:	07da      	lsls	r2, r3, #31
 800330a:	4605      	mov	r5, r0
 800330c:	d4e4      	bmi.n	80032d8 <_fflush_r+0xc>
 800330e:	89a3      	ldrh	r3, [r4, #12]
 8003310:	059b      	lsls	r3, r3, #22
 8003312:	d4e1      	bmi.n	80032d8 <_fflush_r+0xc>
 8003314:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003316:	f7ff fef3 	bl	8003100 <__retarget_lock_release_recursive>
 800331a:	e7dd      	b.n	80032d8 <_fflush_r+0xc>

0800331c <__swhatbuf_r>:
 800331c:	b570      	push	{r4, r5, r6, lr}
 800331e:	460c      	mov	r4, r1
 8003320:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003324:	2900      	cmp	r1, #0
 8003326:	b096      	sub	sp, #88	@ 0x58
 8003328:	4615      	mov	r5, r2
 800332a:	461e      	mov	r6, r3
 800332c:	da0d      	bge.n	800334a <__swhatbuf_r+0x2e>
 800332e:	89a3      	ldrh	r3, [r4, #12]
 8003330:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003334:	f04f 0100 	mov.w	r1, #0
 8003338:	bf14      	ite	ne
 800333a:	2340      	movne	r3, #64	@ 0x40
 800333c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003340:	2000      	movs	r0, #0
 8003342:	6031      	str	r1, [r6, #0]
 8003344:	602b      	str	r3, [r5, #0]
 8003346:	b016      	add	sp, #88	@ 0x58
 8003348:	bd70      	pop	{r4, r5, r6, pc}
 800334a:	466a      	mov	r2, sp
 800334c:	f000 f848 	bl	80033e0 <_fstat_r>
 8003350:	2800      	cmp	r0, #0
 8003352:	dbec      	blt.n	800332e <__swhatbuf_r+0x12>
 8003354:	9901      	ldr	r1, [sp, #4]
 8003356:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800335a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800335e:	4259      	negs	r1, r3
 8003360:	4159      	adcs	r1, r3
 8003362:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003366:	e7eb      	b.n	8003340 <__swhatbuf_r+0x24>

08003368 <__smakebuf_r>:
 8003368:	898b      	ldrh	r3, [r1, #12]
 800336a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800336c:	079d      	lsls	r5, r3, #30
 800336e:	4606      	mov	r6, r0
 8003370:	460c      	mov	r4, r1
 8003372:	d507      	bpl.n	8003384 <__smakebuf_r+0x1c>
 8003374:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003378:	6023      	str	r3, [r4, #0]
 800337a:	6123      	str	r3, [r4, #16]
 800337c:	2301      	movs	r3, #1
 800337e:	6163      	str	r3, [r4, #20]
 8003380:	b003      	add	sp, #12
 8003382:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003384:	ab01      	add	r3, sp, #4
 8003386:	466a      	mov	r2, sp
 8003388:	f7ff ffc8 	bl	800331c <__swhatbuf_r>
 800338c:	9f00      	ldr	r7, [sp, #0]
 800338e:	4605      	mov	r5, r0
 8003390:	4639      	mov	r1, r7
 8003392:	4630      	mov	r0, r6
 8003394:	f7ff fb70 	bl	8002a78 <_malloc_r>
 8003398:	b948      	cbnz	r0, 80033ae <__smakebuf_r+0x46>
 800339a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800339e:	059a      	lsls	r2, r3, #22
 80033a0:	d4ee      	bmi.n	8003380 <__smakebuf_r+0x18>
 80033a2:	f023 0303 	bic.w	r3, r3, #3
 80033a6:	f043 0302 	orr.w	r3, r3, #2
 80033aa:	81a3      	strh	r3, [r4, #12]
 80033ac:	e7e2      	b.n	8003374 <__smakebuf_r+0xc>
 80033ae:	89a3      	ldrh	r3, [r4, #12]
 80033b0:	6020      	str	r0, [r4, #0]
 80033b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80033b6:	81a3      	strh	r3, [r4, #12]
 80033b8:	9b01      	ldr	r3, [sp, #4]
 80033ba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80033be:	b15b      	cbz	r3, 80033d8 <__smakebuf_r+0x70>
 80033c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80033c4:	4630      	mov	r0, r6
 80033c6:	f000 f81d 	bl	8003404 <_isatty_r>
 80033ca:	b128      	cbz	r0, 80033d8 <__smakebuf_r+0x70>
 80033cc:	89a3      	ldrh	r3, [r4, #12]
 80033ce:	f023 0303 	bic.w	r3, r3, #3
 80033d2:	f043 0301 	orr.w	r3, r3, #1
 80033d6:	81a3      	strh	r3, [r4, #12]
 80033d8:	89a3      	ldrh	r3, [r4, #12]
 80033da:	431d      	orrs	r5, r3
 80033dc:	81a5      	strh	r5, [r4, #12]
 80033de:	e7cf      	b.n	8003380 <__smakebuf_r+0x18>

080033e0 <_fstat_r>:
 80033e0:	b538      	push	{r3, r4, r5, lr}
 80033e2:	4d07      	ldr	r5, [pc, #28]	@ (8003400 <_fstat_r+0x20>)
 80033e4:	2300      	movs	r3, #0
 80033e6:	4604      	mov	r4, r0
 80033e8:	4608      	mov	r0, r1
 80033ea:	4611      	mov	r1, r2
 80033ec:	602b      	str	r3, [r5, #0]
 80033ee:	f7fd fe95 	bl	800111c <_fstat>
 80033f2:	1c43      	adds	r3, r0, #1
 80033f4:	d102      	bne.n	80033fc <_fstat_r+0x1c>
 80033f6:	682b      	ldr	r3, [r5, #0]
 80033f8:	b103      	cbz	r3, 80033fc <_fstat_r+0x1c>
 80033fa:	6023      	str	r3, [r4, #0]
 80033fc:	bd38      	pop	{r3, r4, r5, pc}
 80033fe:	bf00      	nop
 8003400:	20000278 	.word	0x20000278

08003404 <_isatty_r>:
 8003404:	b538      	push	{r3, r4, r5, lr}
 8003406:	4d06      	ldr	r5, [pc, #24]	@ (8003420 <_isatty_r+0x1c>)
 8003408:	2300      	movs	r3, #0
 800340a:	4604      	mov	r4, r0
 800340c:	4608      	mov	r0, r1
 800340e:	602b      	str	r3, [r5, #0]
 8003410:	f7fd fe94 	bl	800113c <_isatty>
 8003414:	1c43      	adds	r3, r0, #1
 8003416:	d102      	bne.n	800341e <_isatty_r+0x1a>
 8003418:	682b      	ldr	r3, [r5, #0]
 800341a:	b103      	cbz	r3, 800341e <_isatty_r+0x1a>
 800341c:	6023      	str	r3, [r4, #0]
 800341e:	bd38      	pop	{r3, r4, r5, pc}
 8003420:	20000278 	.word	0x20000278

08003424 <_init>:
 8003424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003426:	bf00      	nop
 8003428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800342a:	bc08      	pop	{r3}
 800342c:	469e      	mov	lr, r3
 800342e:	4770      	bx	lr

08003430 <_fini>:
 8003430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003432:	bf00      	nop
 8003434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003436:	bc08      	pop	{r3}
 8003438:	469e      	mov	lr, r3
 800343a:	4770      	bx	lr
