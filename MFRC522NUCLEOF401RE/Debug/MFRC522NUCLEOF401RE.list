
MFRC522NUCLEOF401RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c14  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002da8  08002da8  00003da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002dc0  08002dc0  00004024  2**0
                  CONTENTS
  4 .ARM          00000008  08002dc0  08002dc0  00003dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002dc8  08002dc8  00004024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002dc8  08002dc8  00003dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002dcc  08002dcc  00003dcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20000000  08002dd0  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  20000024  08002df4  00004024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  08002df4  00004110  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000994a  00000000  00000000  00004054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001893  00000000  00000000  0000d99e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008c0  00000000  00000000  0000f238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006bb  00000000  00000000  0000faf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001584e  00000000  00000000  000101b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a5c0  00000000  00000000  00025a01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000867fd  00000000  00000000  0002ffc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b67be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002378  00000000  00000000  000b6804  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000b8b7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000024 	.word	0x20000024
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002d90 	.word	0x08002d90

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000028 	.word	0x20000028
 80001d0:	08002d90 	.word	0x08002d90

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96a 	b.w	80004c0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	460c      	mov	r4, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14e      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000210:	4694      	mov	ip, r2
 8000212:	458c      	cmp	ip, r1
 8000214:	4686      	mov	lr, r0
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	d962      	bls.n	80002e2 <__udivmoddi4+0xde>
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0320 	rsb	r3, r2, #32
 8000222:	4091      	lsls	r1, r2
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	fa0c fc02 	lsl.w	ip, ip, r2
 800022c:	4319      	orrs	r1, r3
 800022e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000232:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000236:	fa1f f68c 	uxth.w	r6, ip
 800023a:	fbb1 f4f7 	udiv	r4, r1, r7
 800023e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000242:	fb07 1114 	mls	r1, r7, r4, r1
 8000246:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024a:	fb04 f106 	mul.w	r1, r4, r6
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f104 30ff 	add.w	r0, r4, #4294967295
 800025a:	f080 8112 	bcs.w	8000482 <__udivmoddi4+0x27e>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 810f 	bls.w	8000482 <__udivmoddi4+0x27e>
 8000264:	3c02      	subs	r4, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a59      	subs	r1, r3, r1
 800026a:	fa1f f38e 	uxth.w	r3, lr
 800026e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000272:	fb07 1110 	mls	r1, r7, r0, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb00 f606 	mul.w	r6, r0, r6
 800027e:	429e      	cmp	r6, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x94>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f100 31ff 	add.w	r1, r0, #4294967295
 800028a:	f080 80fc 	bcs.w	8000486 <__udivmoddi4+0x282>
 800028e:	429e      	cmp	r6, r3
 8000290:	f240 80f9 	bls.w	8000486 <__udivmoddi4+0x282>
 8000294:	4463      	add	r3, ip
 8000296:	3802      	subs	r0, #2
 8000298:	1b9b      	subs	r3, r3, r6
 800029a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa6>
 80002a2:	40d3      	lsrs	r3, r2
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xba>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb4>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa6>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x150>
 80002c6:	42a3      	cmp	r3, r4
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xcc>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f0c0 80f0 	bcc.w	80004b0 <__udivmoddi4+0x2ac>
 80002d0:	1a86      	subs	r6, r0, r2
 80002d2:	eb64 0303 	sbc.w	r3, r4, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	2d00      	cmp	r5, #0
 80002da:	d0e6      	beq.n	80002aa <__udivmoddi4+0xa6>
 80002dc:	e9c5 6300 	strd	r6, r3, [r5]
 80002e0:	e7e3      	b.n	80002aa <__udivmoddi4+0xa6>
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x204>
 80002e8:	eba1 040c 	sub.w	r4, r1, ip
 80002ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f0:	fa1f f78c 	uxth.w	r7, ip
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000306:	fb07 f006 	mul.w	r0, r7, r6
 800030a:	4298      	cmp	r0, r3
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x11c>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 34ff 	add.w	r4, r6, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x11a>
 8000318:	4298      	cmp	r0, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 800031e:	4626      	mov	r6, r4
 8000320:	1a1c      	subs	r4, r3, r0
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb4 f0f8 	udiv	r0, r4, r8
 800032a:	fb08 4410 	mls	r4, r8, r0, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb00 f707 	mul.w	r7, r0, r7
 8000336:	429f      	cmp	r7, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x148>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x146>
 8000344:	429f      	cmp	r7, r3
 8000346:	f200 80b0 	bhi.w	80004aa <__udivmoddi4+0x2a6>
 800034a:	4620      	mov	r0, r4
 800034c:	1bdb      	subs	r3, r3, r7
 800034e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x9c>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa20 fc06 	lsr.w	ip, r0, r6
 8000364:	fa04 f301 	lsl.w	r3, r4, r1
 8000368:	ea43 030c 	orr.w	r3, r3, ip
 800036c:	40f4      	lsrs	r4, r6
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	0c38      	lsrs	r0, r7, #16
 8000374:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000378:	fbb4 fef0 	udiv	lr, r4, r0
 800037c:	fa1f fc87 	uxth.w	ip, r7
 8000380:	fb00 441e 	mls	r4, r0, lr, r4
 8000384:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000388:	fb0e f90c 	mul.w	r9, lr, ip
 800038c:	45a1      	cmp	r9, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x1a6>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039a:	f080 8084 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8081 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 80003a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a8:	443c      	add	r4, r7
 80003aa:	eba4 0409 	sub.w	r4, r4, r9
 80003ae:	fa1f f983 	uxth.w	r9, r3
 80003b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003be:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d907      	bls.n	80003d6 <__udivmoddi4+0x1d2>
 80003c6:	193c      	adds	r4, r7, r4
 80003c8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003cc:	d267      	bcs.n	800049e <__udivmoddi4+0x29a>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d965      	bls.n	800049e <__udivmoddi4+0x29a>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003da:	fba0 9302 	umull	r9, r3, r0, r2
 80003de:	eba4 040c 	sub.w	r4, r4, ip
 80003e2:	429c      	cmp	r4, r3
 80003e4:	46ce      	mov	lr, r9
 80003e6:	469c      	mov	ip, r3
 80003e8:	d351      	bcc.n	800048e <__udivmoddi4+0x28a>
 80003ea:	d04e      	beq.n	800048a <__udivmoddi4+0x286>
 80003ec:	b155      	cbz	r5, 8000404 <__udivmoddi4+0x200>
 80003ee:	ebb8 030e 	subs.w	r3, r8, lr
 80003f2:	eb64 040c 	sbc.w	r4, r4, ip
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	40cb      	lsrs	r3, r1
 80003fc:	431e      	orrs	r6, r3
 80003fe:	40cc      	lsrs	r4, r1
 8000400:	e9c5 6400 	strd	r6, r4, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	e750      	b.n	80002aa <__udivmoddi4+0xa6>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f103 	lsr.w	r1, r0, r3
 8000410:	fa0c fc02 	lsl.w	ip, ip, r2
 8000414:	fa24 f303 	lsr.w	r3, r4, r3
 8000418:	4094      	lsls	r4, r2
 800041a:	430c      	orrs	r4, r1
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa00 fe02 	lsl.w	lr, r0, r2
 8000424:	fa1f f78c 	uxth.w	r7, ip
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3110 	mls	r1, r8, r0, r3
 8000430:	0c23      	lsrs	r3, r4, #16
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f107 	mul.w	r1, r0, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x24c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 36ff 	add.w	r6, r0, #4294967295
 8000446:	d22c      	bcs.n	80004a2 <__udivmoddi4+0x29e>
 8000448:	4299      	cmp	r1, r3
 800044a:	d92a      	bls.n	80004a2 <__udivmoddi4+0x29e>
 800044c:	3802      	subs	r0, #2
 800044e:	4463      	add	r3, ip
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f1f8 	udiv	r1, r3, r8
 8000458:	fb08 3311 	mls	r3, r8, r1, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb01 f307 	mul.w	r3, r1, r7
 8000464:	42a3      	cmp	r3, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x276>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000470:	d213      	bcs.n	800049a <__udivmoddi4+0x296>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d911      	bls.n	800049a <__udivmoddi4+0x296>
 8000476:	3902      	subs	r1, #2
 8000478:	4464      	add	r4, ip
 800047a:	1ae4      	subs	r4, r4, r3
 800047c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000480:	e739      	b.n	80002f6 <__udivmoddi4+0xf2>
 8000482:	4604      	mov	r4, r0
 8000484:	e6f0      	b.n	8000268 <__udivmoddi4+0x64>
 8000486:	4608      	mov	r0, r1
 8000488:	e706      	b.n	8000298 <__udivmoddi4+0x94>
 800048a:	45c8      	cmp	r8, r9
 800048c:	d2ae      	bcs.n	80003ec <__udivmoddi4+0x1e8>
 800048e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000492:	eb63 0c07 	sbc.w	ip, r3, r7
 8000496:	3801      	subs	r0, #1
 8000498:	e7a8      	b.n	80003ec <__udivmoddi4+0x1e8>
 800049a:	4631      	mov	r1, r6
 800049c:	e7ed      	b.n	800047a <__udivmoddi4+0x276>
 800049e:	4603      	mov	r3, r0
 80004a0:	e799      	b.n	80003d6 <__udivmoddi4+0x1d2>
 80004a2:	4630      	mov	r0, r6
 80004a4:	e7d4      	b.n	8000450 <__udivmoddi4+0x24c>
 80004a6:	46d6      	mov	lr, sl
 80004a8:	e77f      	b.n	80003aa <__udivmoddi4+0x1a6>
 80004aa:	4463      	add	r3, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e74d      	b.n	800034c <__udivmoddi4+0x148>
 80004b0:	4606      	mov	r6, r0
 80004b2:	4623      	mov	r3, r4
 80004b4:	4608      	mov	r0, r1
 80004b6:	e70f      	b.n	80002d8 <__udivmoddi4+0xd4>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	e730      	b.n	8000320 <__udivmoddi4+0x11c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <encrypt>:
uint8_t key_2[] = {27, 25, 18, 48, 49};
uint8_t key_3[] = {35, 28, 24, 43, 21};

uint8_t transmit[5];

void encrypt(uint8_t *tx_buff, size_t size, uint8_t *destination) {
 80004c4:	b480      	push	{r7}
 80004c6:	b089      	sub	sp, #36	@ 0x24
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	60f8      	str	r0, [r7, #12]
 80004cc:	60b9      	str	r1, [r7, #8]
 80004ce:	607a      	str	r2, [r7, #4]

  for (size_t i = 0; i < size; i++) {
 80004d0:	2300      	movs	r3, #0
 80004d2:	61fb      	str	r3, [r7, #28]
 80004d4:	e010      	b.n	80004f8 <encrypt+0x34>
    destination[i] = tx_buff[i] ^ key_1[i];
 80004d6:	68fa      	ldr	r2, [r7, #12]
 80004d8:	69fb      	ldr	r3, [r7, #28]
 80004da:	4413      	add	r3, r2
 80004dc:	7819      	ldrb	r1, [r3, #0]
 80004de:	4a2e      	ldr	r2, [pc, #184]	@ (8000598 <encrypt+0xd4>)
 80004e0:	69fb      	ldr	r3, [r7, #28]
 80004e2:	4413      	add	r3, r2
 80004e4:	781a      	ldrb	r2, [r3, #0]
 80004e6:	6878      	ldr	r0, [r7, #4]
 80004e8:	69fb      	ldr	r3, [r7, #28]
 80004ea:	4403      	add	r3, r0
 80004ec:	404a      	eors	r2, r1
 80004ee:	b2d2      	uxtb	r2, r2
 80004f0:	701a      	strb	r2, [r3, #0]
  for (size_t i = 0; i < size; i++) {
 80004f2:	69fb      	ldr	r3, [r7, #28]
 80004f4:	3301      	adds	r3, #1
 80004f6:	61fb      	str	r3, [r7, #28]
 80004f8:	69fa      	ldr	r2, [r7, #28]
 80004fa:	68bb      	ldr	r3, [r7, #8]
 80004fc:	429a      	cmp	r2, r3
 80004fe:	d3ea      	bcc.n	80004d6 <encrypt+0x12>
  }
  for (size_t i = 0; i < size; i++) {
 8000500:	2300      	movs	r3, #0
 8000502:	61bb      	str	r3, [r7, #24]
 8000504:	e010      	b.n	8000528 <encrypt+0x64>
    destination[i] = tx_buff[i] ^ key_2[i];
 8000506:	68fa      	ldr	r2, [r7, #12]
 8000508:	69bb      	ldr	r3, [r7, #24]
 800050a:	4413      	add	r3, r2
 800050c:	7819      	ldrb	r1, [r3, #0]
 800050e:	4a23      	ldr	r2, [pc, #140]	@ (800059c <encrypt+0xd8>)
 8000510:	69bb      	ldr	r3, [r7, #24]
 8000512:	4413      	add	r3, r2
 8000514:	781a      	ldrb	r2, [r3, #0]
 8000516:	6878      	ldr	r0, [r7, #4]
 8000518:	69bb      	ldr	r3, [r7, #24]
 800051a:	4403      	add	r3, r0
 800051c:	404a      	eors	r2, r1
 800051e:	b2d2      	uxtb	r2, r2
 8000520:	701a      	strb	r2, [r3, #0]
  for (size_t i = 0; i < size; i++) {
 8000522:	69bb      	ldr	r3, [r7, #24]
 8000524:	3301      	adds	r3, #1
 8000526:	61bb      	str	r3, [r7, #24]
 8000528:	69ba      	ldr	r2, [r7, #24]
 800052a:	68bb      	ldr	r3, [r7, #8]
 800052c:	429a      	cmp	r2, r3
 800052e:	d3ea      	bcc.n	8000506 <encrypt+0x42>
  }

  for (size_t i = 0; i < size; i++) {
 8000530:	2300      	movs	r3, #0
 8000532:	617b      	str	r3, [r7, #20]
 8000534:	e010      	b.n	8000558 <encrypt+0x94>
    destination[i] = tx_buff[i] ^ key_3[i];
 8000536:	68fa      	ldr	r2, [r7, #12]
 8000538:	697b      	ldr	r3, [r7, #20]
 800053a:	4413      	add	r3, r2
 800053c:	7819      	ldrb	r1, [r3, #0]
 800053e:	4a18      	ldr	r2, [pc, #96]	@ (80005a0 <encrypt+0xdc>)
 8000540:	697b      	ldr	r3, [r7, #20]
 8000542:	4413      	add	r3, r2
 8000544:	781a      	ldrb	r2, [r3, #0]
 8000546:	6878      	ldr	r0, [r7, #4]
 8000548:	697b      	ldr	r3, [r7, #20]
 800054a:	4403      	add	r3, r0
 800054c:	404a      	eors	r2, r1
 800054e:	b2d2      	uxtb	r2, r2
 8000550:	701a      	strb	r2, [r3, #0]
  for (size_t i = 0; i < size; i++) {
 8000552:	697b      	ldr	r3, [r7, #20]
 8000554:	3301      	adds	r3, #1
 8000556:	617b      	str	r3, [r7, #20]
 8000558:	697a      	ldr	r2, [r7, #20]
 800055a:	68bb      	ldr	r3, [r7, #8]
 800055c:	429a      	cmp	r2, r3
 800055e:	d3ea      	bcc.n	8000536 <encrypt+0x72>
  }

  for (size_t i = 0; i < size; i++) {
 8000560:	2300      	movs	r3, #0
 8000562:	613b      	str	r3, [r7, #16]
 8000564:	e00c      	b.n	8000580 <encrypt+0xbc>
    destination[i] = ~(tx_buff[i]); // NOR operation
 8000566:	68fa      	ldr	r2, [r7, #12]
 8000568:	693b      	ldr	r3, [r7, #16]
 800056a:	4413      	add	r3, r2
 800056c:	781a      	ldrb	r2, [r3, #0]
 800056e:	6879      	ldr	r1, [r7, #4]
 8000570:	693b      	ldr	r3, [r7, #16]
 8000572:	440b      	add	r3, r1
 8000574:	43d2      	mvns	r2, r2
 8000576:	b2d2      	uxtb	r2, r2
 8000578:	701a      	strb	r2, [r3, #0]
  for (size_t i = 0; i < size; i++) {
 800057a:	693b      	ldr	r3, [r7, #16]
 800057c:	3301      	adds	r3, #1
 800057e:	613b      	str	r3, [r7, #16]
 8000580:	693a      	ldr	r2, [r7, #16]
 8000582:	68bb      	ldr	r3, [r7, #8]
 8000584:	429a      	cmp	r2, r3
 8000586:	d3ee      	bcc.n	8000566 <encrypt+0xa2>
  }
}
 8000588:	bf00      	nop
 800058a:	bf00      	nop
 800058c:	3724      	adds	r7, #36	@ 0x24
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	20000000 	.word	0x20000000
 800059c:	20000008 	.word	0x20000008
 80005a0:	20000010 	.word	0x20000010

080005a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a8:	f000 fcfa 	bl	8000fa0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ac:	f000 f872 	bl	8000694 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b0:	f000 f93a 	bl	8000828 <MX_GPIO_Init>
  MX_SPI1_Init();
 80005b4:	f000 f8d8 	bl	8000768 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80005b8:	f000 f90c 	bl	80007d4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80005bc:	2200      	movs	r2, #0
 80005be:	2120      	movs	r1, #32
 80005c0:	482d      	ldr	r0, [pc, #180]	@ (8000678 <main+0xd4>)
 80005c2:	f000 ffed 	bl	80015a0 <HAL_GPIO_WritePin>
  MFRC522_Init();
 80005c6:	f000 fa6d 	bl	8000aa4 <MFRC522_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  status = MFRC522_Request(PICC_REQIDL, str);
 80005ca:	492c      	ldr	r1, [pc, #176]	@ (800067c <main+0xd8>)
 80005cc:	2026      	movs	r0, #38	@ 0x26
 80005ce:	f000 fb60 	bl	8000c92 <MFRC522_Request>
 80005d2:	4603      	mov	r3, r0
 80005d4:	461a      	mov	r2, r3
 80005d6:	4b2a      	ldr	r3, [pc, #168]	@ (8000680 <main+0xdc>)
 80005d8:	701a      	strb	r2, [r3, #0]
	    status = MFRC522_Anticoll(str);
 80005da:	4828      	ldr	r0, [pc, #160]	@ (800067c <main+0xd8>)
 80005dc:	f000 fb7e 	bl	8000cdc <MFRC522_Anticoll>
 80005e0:	4603      	mov	r3, r0
 80005e2:	461a      	mov	r2, r3
 80005e4:	4b26      	ldr	r3, [pc, #152]	@ (8000680 <main+0xdc>)
 80005e6:	701a      	strb	r2, [r3, #0]
	    sComp[2] = sNum[2];
 80005e8:	4b26      	ldr	r3, [pc, #152]	@ (8000684 <main+0xe0>)
 80005ea:	789a      	ldrb	r2, [r3, #2]
 80005ec:	4b26      	ldr	r3, [pc, #152]	@ (8000688 <main+0xe4>)
 80005ee:	709a      	strb	r2, [r3, #2]
	    sComp[3] = sNum[3];
 80005f0:	4b24      	ldr	r3, [pc, #144]	@ (8000684 <main+0xe0>)
 80005f2:	78da      	ldrb	r2, [r3, #3]
 80005f4:	4b24      	ldr	r3, [pc, #144]	@ (8000688 <main+0xe4>)
 80005f6:	70da      	strb	r2, [r3, #3]
	    sComp[4] = sNum[4];
 80005f8:	4b22      	ldr	r3, [pc, #136]	@ (8000684 <main+0xe0>)
 80005fa:	791a      	ldrb	r2, [r3, #4]
 80005fc:	4b22      	ldr	r3, [pc, #136]	@ (8000688 <main+0xe4>)
 80005fe:	711a      	strb	r2, [r3, #4]
	    memcpy(sNum, str, 5);
 8000600:	4b20      	ldr	r3, [pc, #128]	@ (8000684 <main+0xe0>)
 8000602:	4a1e      	ldr	r2, [pc, #120]	@ (800067c <main+0xd8>)
 8000604:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000608:	6018      	str	r0, [r3, #0]
 800060a:	3304      	adds	r3, #4
 800060c:	7019      	strb	r1, [r3, #0]


	    if (sComp[2] != sNum[2] || sComp[3] != sNum[3] || sComp[4] != sNum[4]) {
 800060e:	4b1e      	ldr	r3, [pc, #120]	@ (8000688 <main+0xe4>)
 8000610:	789a      	ldrb	r2, [r3, #2]
 8000612:	4b1c      	ldr	r3, [pc, #112]	@ (8000684 <main+0xe0>)
 8000614:	789b      	ldrb	r3, [r3, #2]
 8000616:	429a      	cmp	r2, r3
 8000618:	d10b      	bne.n	8000632 <main+0x8e>
 800061a:	4b1b      	ldr	r3, [pc, #108]	@ (8000688 <main+0xe4>)
 800061c:	78da      	ldrb	r2, [r3, #3]
 800061e:	4b19      	ldr	r3, [pc, #100]	@ (8000684 <main+0xe0>)
 8000620:	78db      	ldrb	r3, [r3, #3]
 8000622:	429a      	cmp	r2, r3
 8000624:	d105      	bne.n	8000632 <main+0x8e>
 8000626:	4b18      	ldr	r3, [pc, #96]	@ (8000688 <main+0xe4>)
 8000628:	791a      	ldrb	r2, [r3, #4]
 800062a:	4b16      	ldr	r3, [pc, #88]	@ (8000684 <main+0xe0>)
 800062c:	791b      	ldrb	r3, [r3, #4]
 800062e:	429a      	cmp	r2, r3
 8000630:	d01d      	beq.n	800066e <main+0xca>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000632:	2201      	movs	r2, #1
 8000634:	2120      	movs	r1, #32
 8000636:	4810      	ldr	r0, [pc, #64]	@ (8000678 <main+0xd4>)
 8000638:	f000 ffb2 	bl	80015a0 <HAL_GPIO_WritePin>
	    HAL_Delay(1000);
 800063c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000640:	f000 fd20 	bl	8001084 <HAL_Delay>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000644:	2200      	movs	r2, #0
 8000646:	2120      	movs	r1, #32
 8000648:	480b      	ldr	r0, [pc, #44]	@ (8000678 <main+0xd4>)
 800064a:	f000 ffa9 	bl	80015a0 <HAL_GPIO_WritePin>
	    encrypt(sNum, 5, transmit);
 800064e:	4a0f      	ldr	r2, [pc, #60]	@ (800068c <main+0xe8>)
 8000650:	2105      	movs	r1, #5
 8000652:	480c      	ldr	r0, [pc, #48]	@ (8000684 <main+0xe0>)
 8000654:	f7ff ff36 	bl	80004c4 <encrypt>
		HAL_UART_Transmit(&huart1, transmit, 5, 1000); //change back to uart1
 8000658:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800065c:	2205      	movs	r2, #5
 800065e:	490b      	ldr	r1, [pc, #44]	@ (800068c <main+0xe8>)
 8000660:	480b      	ldr	r0, [pc, #44]	@ (8000690 <main+0xec>)
 8000662:	f001 ffad 	bl	80025c0 <HAL_UART_Transmit>
	    HAL_Delay(1000);
 8000666:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800066a:	f000 fd0b 	bl	8001084 <HAL_Delay>
	    }
	    HAL_Delay(100);
 800066e:	2064      	movs	r0, #100	@ 0x64
 8000670:	f000 fd08 	bl	8001084 <HAL_Delay>
	  status = MFRC522_Request(PICC_REQIDL, str);
 8000674:	e7a9      	b.n	80005ca <main+0x26>
 8000676:	bf00      	nop
 8000678:	40020400 	.word	0x40020400
 800067c:	200000e4 	.word	0x200000e4
 8000680:	200000e0 	.word	0x200000e0
 8000684:	200000f4 	.word	0x200000f4
 8000688:	200000fc 	.word	0x200000fc
 800068c:	20000104 	.word	0x20000104
 8000690:	20000098 	.word	0x20000098

08000694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b094      	sub	sp, #80	@ 0x50
 8000698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069a:	f107 0320 	add.w	r3, r7, #32
 800069e:	2230      	movs	r2, #48	@ 0x30
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f002 fb48 	bl	8002d38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a8:	f107 030c 	add.w	r3, r7, #12
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]
 80006b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b8:	2300      	movs	r3, #0
 80006ba:	60bb      	str	r3, [r7, #8]
 80006bc:	4b28      	ldr	r3, [pc, #160]	@ (8000760 <SystemClock_Config+0xcc>)
 80006be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006c0:	4a27      	ldr	r2, [pc, #156]	@ (8000760 <SystemClock_Config+0xcc>)
 80006c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80006c8:	4b25      	ldr	r3, [pc, #148]	@ (8000760 <SystemClock_Config+0xcc>)
 80006ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006d0:	60bb      	str	r3, [r7, #8]
 80006d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006d4:	2300      	movs	r3, #0
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	4b22      	ldr	r3, [pc, #136]	@ (8000764 <SystemClock_Config+0xd0>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006e0:	4a20      	ldr	r2, [pc, #128]	@ (8000764 <SystemClock_Config+0xd0>)
 80006e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80006e6:	6013      	str	r3, [r2, #0]
 80006e8:	4b1e      	ldr	r3, [pc, #120]	@ (8000764 <SystemClock_Config+0xd0>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f4:	2302      	movs	r3, #2
 80006f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f8:	2301      	movs	r3, #1
 80006fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006fc:	2310      	movs	r3, #16
 80006fe:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000700:	2302      	movs	r3, #2
 8000702:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000704:	2300      	movs	r3, #0
 8000706:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000708:	2308      	movs	r3, #8
 800070a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800070c:	2348      	movs	r3, #72	@ 0x48
 800070e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000710:	2302      	movs	r3, #2
 8000712:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000714:	2307      	movs	r3, #7
 8000716:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000718:	f107 0320 	add.w	r3, r7, #32
 800071c:	4618      	mov	r0, r3
 800071e:	f000 ff59 	bl	80015d4 <HAL_RCC_OscConfig>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000728:	f000 f904 	bl	8000934 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072c:	230f      	movs	r3, #15
 800072e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000730:	2302      	movs	r3, #2
 8000732:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000734:	2300      	movs	r3, #0
 8000736:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000738:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800073c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800073e:	2300      	movs	r3, #0
 8000740:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000742:	f107 030c 	add.w	r3, r7, #12
 8000746:	2102      	movs	r1, #2
 8000748:	4618      	mov	r0, r3
 800074a:	f001 f9bb 	bl	8001ac4 <HAL_RCC_ClockConfig>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000754:	f000 f8ee 	bl	8000934 <Error_Handler>
  }
}
 8000758:	bf00      	nop
 800075a:	3750      	adds	r7, #80	@ 0x50
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	40023800 	.word	0x40023800
 8000764:	40007000 	.word	0x40007000

08000768 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800076c:	4b17      	ldr	r3, [pc, #92]	@ (80007cc <MX_SPI1_Init+0x64>)
 800076e:	4a18      	ldr	r2, [pc, #96]	@ (80007d0 <MX_SPI1_Init+0x68>)
 8000770:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000772:	4b16      	ldr	r3, [pc, #88]	@ (80007cc <MX_SPI1_Init+0x64>)
 8000774:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000778:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800077a:	4b14      	ldr	r3, [pc, #80]	@ (80007cc <MX_SPI1_Init+0x64>)
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000780:	4b12      	ldr	r3, [pc, #72]	@ (80007cc <MX_SPI1_Init+0x64>)
 8000782:	2200      	movs	r2, #0
 8000784:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000786:	4b11      	ldr	r3, [pc, #68]	@ (80007cc <MX_SPI1_Init+0x64>)
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800078c:	4b0f      	ldr	r3, [pc, #60]	@ (80007cc <MX_SPI1_Init+0x64>)
 800078e:	2200      	movs	r2, #0
 8000790:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000792:	4b0e      	ldr	r3, [pc, #56]	@ (80007cc <MX_SPI1_Init+0x64>)
 8000794:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000798:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800079a:	4b0c      	ldr	r3, [pc, #48]	@ (80007cc <MX_SPI1_Init+0x64>)
 800079c:	2210      	movs	r2, #16
 800079e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007a0:	4b0a      	ldr	r3, [pc, #40]	@ (80007cc <MX_SPI1_Init+0x64>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007a6:	4b09      	ldr	r3, [pc, #36]	@ (80007cc <MX_SPI1_Init+0x64>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007ac:	4b07      	ldr	r3, [pc, #28]	@ (80007cc <MX_SPI1_Init+0x64>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007b2:	4b06      	ldr	r3, [pc, #24]	@ (80007cc <MX_SPI1_Init+0x64>)
 80007b4:	220a      	movs	r2, #10
 80007b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007b8:	4804      	ldr	r0, [pc, #16]	@ (80007cc <MX_SPI1_Init+0x64>)
 80007ba:	f001 fba3 	bl	8001f04 <HAL_SPI_Init>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007c4:	f000 f8b6 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007c8:	bf00      	nop
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	20000040 	.word	0x20000040
 80007d0:	40013000 	.word	0x40013000

080007d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007d8:	4b11      	ldr	r3, [pc, #68]	@ (8000820 <MX_USART1_UART_Init+0x4c>)
 80007da:	4a12      	ldr	r2, [pc, #72]	@ (8000824 <MX_USART1_UART_Init+0x50>)
 80007dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007de:	4b10      	ldr	r3, [pc, #64]	@ (8000820 <MX_USART1_UART_Init+0x4c>)
 80007e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000820 <MX_USART1_UART_Init+0x4c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000820 <MX_USART1_UART_Init+0x4c>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000820 <MX_USART1_UART_Init+0x4c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007f8:	4b09      	ldr	r3, [pc, #36]	@ (8000820 <MX_USART1_UART_Init+0x4c>)
 80007fa:	220c      	movs	r2, #12
 80007fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007fe:	4b08      	ldr	r3, [pc, #32]	@ (8000820 <MX_USART1_UART_Init+0x4c>)
 8000800:	2200      	movs	r2, #0
 8000802:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000804:	4b06      	ldr	r3, [pc, #24]	@ (8000820 <MX_USART1_UART_Init+0x4c>)
 8000806:	2200      	movs	r2, #0
 8000808:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800080a:	4805      	ldr	r0, [pc, #20]	@ (8000820 <MX_USART1_UART_Init+0x4c>)
 800080c:	f001 fe88 	bl	8002520 <HAL_UART_Init>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000816:	f000 f88d 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	20000098 	.word	0x20000098
 8000824:	40011000 	.word	0x40011000

08000828 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b08a      	sub	sp, #40	@ 0x28
 800082c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082e:	f107 0314 	add.w	r3, r7, #20
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
 8000836:	605a      	str	r2, [r3, #4]
 8000838:	609a      	str	r2, [r3, #8]
 800083a:	60da      	str	r2, [r3, #12]
 800083c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	613b      	str	r3, [r7, #16]
 8000842:	4b38      	ldr	r3, [pc, #224]	@ (8000924 <MX_GPIO_Init+0xfc>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000846:	4a37      	ldr	r2, [pc, #220]	@ (8000924 <MX_GPIO_Init+0xfc>)
 8000848:	f043 0304 	orr.w	r3, r3, #4
 800084c:	6313      	str	r3, [r2, #48]	@ 0x30
 800084e:	4b35      	ldr	r3, [pc, #212]	@ (8000924 <MX_GPIO_Init+0xfc>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000852:	f003 0304 	and.w	r3, r3, #4
 8000856:	613b      	str	r3, [r7, #16]
 8000858:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	60fb      	str	r3, [r7, #12]
 800085e:	4b31      	ldr	r3, [pc, #196]	@ (8000924 <MX_GPIO_Init+0xfc>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000862:	4a30      	ldr	r2, [pc, #192]	@ (8000924 <MX_GPIO_Init+0xfc>)
 8000864:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000868:	6313      	str	r3, [r2, #48]	@ 0x30
 800086a:	4b2e      	ldr	r3, [pc, #184]	@ (8000924 <MX_GPIO_Init+0xfc>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	60bb      	str	r3, [r7, #8]
 800087a:	4b2a      	ldr	r3, [pc, #168]	@ (8000924 <MX_GPIO_Init+0xfc>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087e:	4a29      	ldr	r2, [pc, #164]	@ (8000924 <MX_GPIO_Init+0xfc>)
 8000880:	f043 0301 	orr.w	r3, r3, #1
 8000884:	6313      	str	r3, [r2, #48]	@ 0x30
 8000886:	4b27      	ldr	r3, [pc, #156]	@ (8000924 <MX_GPIO_Init+0xfc>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	60bb      	str	r3, [r7, #8]
 8000890:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	607b      	str	r3, [r7, #4]
 8000896:	4b23      	ldr	r3, [pc, #140]	@ (8000924 <MX_GPIO_Init+0xfc>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089a:	4a22      	ldr	r2, [pc, #136]	@ (8000924 <MX_GPIO_Init+0xfc>)
 800089c:	f043 0302 	orr.w	r3, r3, #2
 80008a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008a2:	4b20      	ldr	r3, [pc, #128]	@ (8000924 <MX_GPIO_Init+0xfc>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a6:	f003 0302 	and.w	r3, r3, #2
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2180      	movs	r1, #128	@ 0x80
 80008b2:	481d      	ldr	r0, [pc, #116]	@ (8000928 <MX_GPIO_Init+0x100>)
 80008b4:	f000 fe74 	bl	80015a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 80008b8:	2200      	movs	r2, #0
 80008ba:	2160      	movs	r1, #96	@ 0x60
 80008bc:	481b      	ldr	r0, [pc, #108]	@ (800092c <MX_GPIO_Init+0x104>)
 80008be:	f000 fe6f 	bl	80015a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008c2:	230c      	movs	r3, #12
 80008c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c6:	2302      	movs	r3, #2
 80008c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ce:	2300      	movs	r3, #0
 80008d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008d2:	2307      	movs	r3, #7
 80008d4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d6:	f107 0314 	add.w	r3, r7, #20
 80008da:	4619      	mov	r1, r3
 80008dc:	4814      	ldr	r0, [pc, #80]	@ (8000930 <MX_GPIO_Init+0x108>)
 80008de:	f000 fcdb 	bl	8001298 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80008e2:	2380      	movs	r3, #128	@ 0x80
 80008e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e6:	2301      	movs	r3, #1
 80008e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ee:	2300      	movs	r3, #0
 80008f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008f2:	f107 0314 	add.w	r3, r7, #20
 80008f6:	4619      	mov	r1, r3
 80008f8:	480b      	ldr	r0, [pc, #44]	@ (8000928 <MX_GPIO_Init+0x100>)
 80008fa:	f000 fccd 	bl	8001298 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80008fe:	2360      	movs	r3, #96	@ 0x60
 8000900:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000902:	2301      	movs	r3, #1
 8000904:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090a:	2300      	movs	r3, #0
 800090c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800090e:	f107 0314 	add.w	r3, r7, #20
 8000912:	4619      	mov	r1, r3
 8000914:	4805      	ldr	r0, [pc, #20]	@ (800092c <MX_GPIO_Init+0x104>)
 8000916:	f000 fcbf 	bl	8001298 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800091a:	bf00      	nop
 800091c:	3728      	adds	r7, #40	@ 0x28
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40023800 	.word	0x40023800
 8000928:	40020800 	.word	0x40020800
 800092c:	40020400 	.word	0x40020400
 8000930:	40020000 	.word	0x40020000

08000934 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000938:	b672      	cpsid	i
}
 800093a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800093c:	bf00      	nop
 800093e:	e7fd      	b.n	800093c <Error_Handler+0x8>

08000940 <RC522_SPI_Transfer>:
 * Description: A common function used by Write_MFRC522 and Read_MFRC522
 * Input Parameters: data - the value to be written
 * Returns: a byte of data read from the module
 */
uint8_t RC522_SPI_Transfer(uchar data)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b086      	sub	sp, #24
 8000944:	af02      	add	r7, sp, #8
 8000946:	4603      	mov	r3, r0
 8000948:	71fb      	strb	r3, [r7, #7]
	uchar rx_data;
	HAL_SPI_TransmitReceive(HSPI_INSTANCE,&data,&rx_data,1,100);
 800094a:	f107 020f 	add.w	r2, r7, #15
 800094e:	1df9      	adds	r1, r7, #7
 8000950:	2364      	movs	r3, #100	@ 0x64
 8000952:	9300      	str	r3, [sp, #0]
 8000954:	2301      	movs	r3, #1
 8000956:	4804      	ldr	r0, [pc, #16]	@ (8000968 <RC522_SPI_Transfer+0x28>)
 8000958:	f001 fb5d 	bl	8002016 <HAL_SPI_TransmitReceive>

	return rx_data;
 800095c:	7bfb      	ldrb	r3, [r7, #15]
}
 800095e:	4618      	mov	r0, r3
 8000960:	3710      	adds	r7, #16
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	20000040 	.word	0x20000040

0800096c <Write_MFRC522>:
 * Function Description: To a certain MFRC522 register to write a byte of data
 * Input Parameters: addr - register address; val - the value to be written
 * Return value: None
 */
void Write_MFRC522(uchar addr, uchar val)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	4603      	mov	r3, r0
 8000974:	460a      	mov	r2, r1
 8000976:	71fb      	strb	r3, [r7, #7]
 8000978:	4613      	mov	r3, r2
 800097a:	71bb      	strb	r3, [r7, #6]
	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 800097c:	2200      	movs	r2, #0
 800097e:	2140      	movs	r1, #64	@ 0x40
 8000980:	480c      	ldr	r0, [pc, #48]	@ (80009b4 <Write_MFRC522+0x48>)
 8000982:	f000 fe0d 	bl	80015a0 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and clear the MSb to indicate a write
	  // - bottom 8 bits are the data bits being sent for that address, we send them
	RC522_SPI_Transfer((addr<<1)&0x7E);
 8000986:	79fb      	ldrb	r3, [r7, #7]
 8000988:	005b      	lsls	r3, r3, #1
 800098a:	b2db      	uxtb	r3, r3
 800098c:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8000990:	b2db      	uxtb	r3, r3
 8000992:	4618      	mov	r0, r3
 8000994:	f7ff ffd4 	bl	8000940 <RC522_SPI_Transfer>
	RC522_SPI_Transfer(val);
 8000998:	79bb      	ldrb	r3, [r7, #6]
 800099a:	4618      	mov	r0, r3
 800099c:	f7ff ffd0 	bl	8000940 <RC522_SPI_Transfer>

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 80009a0:	2201      	movs	r2, #1
 80009a2:	2140      	movs	r1, #64	@ 0x40
 80009a4:	4803      	ldr	r0, [pc, #12]	@ (80009b4 <Write_MFRC522+0x48>)
 80009a6:	f000 fdfb 	bl	80015a0 <HAL_GPIO_WritePin>
}
 80009aa:	bf00      	nop
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40020400 	.word	0x40020400

080009b8 <Read_MFRC522>:
 * Description: From a certain MFRC522 read a byte of data register
 * Input Parameters: addr - register address
 * Returns: a byte of data read from the module
 */
uchar Read_MFRC522(uchar addr)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0
 80009be:	4603      	mov	r3, r0
 80009c0:	71fb      	strb	r3, [r7, #7]
	uchar val;

	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 80009c2:	2200      	movs	r2, #0
 80009c4:	2140      	movs	r1, #64	@ 0x40
 80009c6:	480f      	ldr	r0, [pc, #60]	@ (8000a04 <Read_MFRC522+0x4c>)
 80009c8:	f000 fdea 	bl	80015a0 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and set the MSb to indicate a read
	  // - bottom 8 bits are all 0s on a read per 8.1.2.1 Table 6
	RC522_SPI_Transfer(((addr<<1)&0x7E) | 0x80);
 80009cc:	79fb      	ldrb	r3, [r7, #7]
 80009ce:	005b      	lsls	r3, r3, #1
 80009d0:	b25b      	sxtb	r3, r3
 80009d2:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 80009d6:	b25b      	sxtb	r3, r3
 80009d8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80009dc:	b25b      	sxtb	r3, r3
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	4618      	mov	r0, r3
 80009e2:	f7ff ffad 	bl	8000940 <RC522_SPI_Transfer>
	val = RC522_SPI_Transfer(0x00);
 80009e6:	2000      	movs	r0, #0
 80009e8:	f7ff ffaa 	bl	8000940 <RC522_SPI_Transfer>
 80009ec:	4603      	mov	r3, r0
 80009ee:	73fb      	strb	r3, [r7, #15]

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 80009f0:	2201      	movs	r2, #1
 80009f2:	2140      	movs	r1, #64	@ 0x40
 80009f4:	4803      	ldr	r0, [pc, #12]	@ (8000a04 <Read_MFRC522+0x4c>)
 80009f6:	f000 fdd3 	bl	80015a0 <HAL_GPIO_WritePin>

	return val;
 80009fa:	7bfb      	ldrb	r3, [r7, #15]

}
 80009fc:	4618      	mov	r0, r3
 80009fe:	3710      	adds	r7, #16
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	40020400 	.word	0x40020400

08000a08 <SetBitMask>:
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(uchar reg, uchar mask)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	4603      	mov	r3, r0
 8000a10:	460a      	mov	r2, r1
 8000a12:	71fb      	strb	r3, [r7, #7]
 8000a14:	4613      	mov	r3, r2
 8000a16:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 8000a18:	79fb      	ldrb	r3, [r7, #7]
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f7ff ffcc 	bl	80009b8 <Read_MFRC522>
 8000a20:	4603      	mov	r3, r0
 8000a22:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 8000a24:	7bfa      	ldrb	r2, [r7, #15]
 8000a26:	79bb      	ldrb	r3, [r7, #6]
 8000a28:	4313      	orrs	r3, r2
 8000a2a:	b2da      	uxtb	r2, r3
 8000a2c:	79fb      	ldrb	r3, [r7, #7]
 8000a2e:	4611      	mov	r1, r2
 8000a30:	4618      	mov	r0, r3
 8000a32:	f7ff ff9b 	bl	800096c <Write_MFRC522>
}
 8000a36:	bf00      	nop
 8000a38:	3710      	adds	r7, #16
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}

08000a3e <ClearBitMask>:
 * Description: clear RC522 register bit
 * Input parameters: reg - register address; mask - clear bit value
 * Return value: None
*/
void ClearBitMask(uchar reg, uchar mask)
{
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	b084      	sub	sp, #16
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	4603      	mov	r3, r0
 8000a46:	460a      	mov	r2, r1
 8000a48:	71fb      	strb	r3, [r7, #7]
 8000a4a:	4613      	mov	r3, r2
 8000a4c:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 8000a4e:	79fb      	ldrb	r3, [r7, #7]
 8000a50:	4618      	mov	r0, r3
 8000a52:	f7ff ffb1 	bl	80009b8 <Read_MFRC522>
 8000a56:	4603      	mov	r3, r0
 8000a58:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 8000a5a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000a5e:	43db      	mvns	r3, r3
 8000a60:	b25a      	sxtb	r2, r3
 8000a62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a66:	4013      	ands	r3, r2
 8000a68:	b25b      	sxtb	r3, r3
 8000a6a:	b2da      	uxtb	r2, r3
 8000a6c:	79fb      	ldrb	r3, [r7, #7]
 8000a6e:	4611      	mov	r1, r2
 8000a70:	4618      	mov	r0, r3
 8000a72:	f7ff ff7b 	bl	800096c <Write_MFRC522>
}
 8000a76:	bf00      	nop
 8000a78:	3710      	adds	r7, #16
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}

08000a7e <AntennaOn>:
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn(void)
{
 8000a7e:	b580      	push	{r7, lr}
 8000a80:	af00      	add	r7, sp, #0

	Read_MFRC522(TxControlReg);
 8000a82:	2014      	movs	r0, #20
 8000a84:	f7ff ff98 	bl	80009b8 <Read_MFRC522>
	SetBitMask(TxControlReg, 0x03);
 8000a88:	2103      	movs	r1, #3
 8000a8a:	2014      	movs	r0, #20
 8000a8c:	f7ff ffbc 	bl	8000a08 <SetBitMask>
}
 8000a90:	bf00      	nop
 8000a92:	bd80      	pop	{r7, pc}

08000a94 <MFRC522_Reset>:
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
    Write_MFRC522(CommandReg, PCD_RESETPHASE);
 8000a98:	210f      	movs	r1, #15
 8000a9a:	2001      	movs	r0, #1
 8000a9c:	f7ff ff66 	bl	800096c <Write_MFRC522>
}
 8000aa0:	bf00      	nop
 8000aa2:	bd80      	pop	{r7, pc}

08000aa4 <MFRC522_Init>:
 * Description: Initialize RC522
 * Input: None
 * Return value: None
*/
void MFRC522_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	2140      	movs	r1, #64	@ 0x40
 8000aac:	4812      	ldr	r0, [pc, #72]	@ (8000af8 <MFRC522_Init+0x54>)
 8000aae:	f000 fd77 	bl	80015a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MFRC522_RST_PORT,MFRC522_RST_PIN,GPIO_PIN_SET);
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	2180      	movs	r1, #128	@ 0x80
 8000ab6:	4811      	ldr	r0, [pc, #68]	@ (8000afc <MFRC522_Init+0x58>)
 8000ab8:	f000 fd72 	bl	80015a0 <HAL_GPIO_WritePin>
	MFRC522_Reset();
 8000abc:	f7ff ffea 	bl	8000a94 <MFRC522_Reset>

	//Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
	Write_MFRC522(TModeReg, 0x8D);		//Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 8000ac0:	218d      	movs	r1, #141	@ 0x8d
 8000ac2:	202a      	movs	r0, #42	@ 0x2a
 8000ac4:	f7ff ff52 	bl	800096c <Write_MFRC522>
	Write_MFRC522(TPrescalerReg, 0x3E);	//TModeReg[3..0] + TPrescalerReg
 8000ac8:	213e      	movs	r1, #62	@ 0x3e
 8000aca:	202b      	movs	r0, #43	@ 0x2b
 8000acc:	f7ff ff4e 	bl	800096c <Write_MFRC522>
	Write_MFRC522(TReloadRegL, 30);
 8000ad0:	211e      	movs	r1, #30
 8000ad2:	202d      	movs	r0, #45	@ 0x2d
 8000ad4:	f7ff ff4a 	bl	800096c <Write_MFRC522>
	Write_MFRC522(TReloadRegH, 0);
 8000ad8:	2100      	movs	r1, #0
 8000ada:	202c      	movs	r0, #44	@ 0x2c
 8000adc:	f7ff ff46 	bl	800096c <Write_MFRC522>

	Write_MFRC522(TxAutoReg, 0x40);		// force 100% ASK modulation
 8000ae0:	2140      	movs	r1, #64	@ 0x40
 8000ae2:	2015      	movs	r0, #21
 8000ae4:	f7ff ff42 	bl	800096c <Write_MFRC522>
	Write_MFRC522(ModeReg, 0x3D);		// CRC Initial value 0x6363
 8000ae8:	213d      	movs	r1, #61	@ 0x3d
 8000aea:	2011      	movs	r0, #17
 8000aec:	f7ff ff3e 	bl	800096c <Write_MFRC522>

	AntennaOn();
 8000af0:	f7ff ffc5 	bl	8000a7e <AntennaOn>
}
 8000af4:	bf00      	nop
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	40020400 	.word	0x40020400
 8000afc:	40020800 	.word	0x40020800

08000b00 <MFRC522_ToCard>:
 *			 backData--Received the card returns data,
 *			 backLen--Return data bit length
 * Return value: the successful return MI_OK
 */
uchar MFRC522_ToCard(uchar command, uchar *sendData, uchar sendLen, uchar *backData, uint *backLen)
{
 8000b00:	b590      	push	{r4, r7, lr}
 8000b02:	b089      	sub	sp, #36	@ 0x24
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	60b9      	str	r1, [r7, #8]
 8000b08:	607b      	str	r3, [r7, #4]
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	73fb      	strb	r3, [r7, #15]
 8000b0e:	4613      	mov	r3, r2
 8000b10:	73bb      	strb	r3, [r7, #14]
    uchar status = MI_ERR;
 8000b12:	2302      	movs	r3, #2
 8000b14:	77fb      	strb	r3, [r7, #31]
    uchar irqEn = 0x00;
 8000b16:	2300      	movs	r3, #0
 8000b18:	77bb      	strb	r3, [r7, #30]
    uchar waitIRq = 0x00;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	777b      	strb	r3, [r7, #29]
    uchar lastBits;
    uchar n;
    uint i;

    switch (command)
 8000b1e:	7bfb      	ldrb	r3, [r7, #15]
 8000b20:	2b0c      	cmp	r3, #12
 8000b22:	d006      	beq.n	8000b32 <MFRC522_ToCard+0x32>
 8000b24:	2b0e      	cmp	r3, #14
 8000b26:	d109      	bne.n	8000b3c <MFRC522_ToCard+0x3c>
    {
        case PCD_AUTHENT:		// Certification cards close
		{
			irqEn = 0x12;
 8000b28:	2312      	movs	r3, #18
 8000b2a:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x10;
 8000b2c:	2310      	movs	r3, #16
 8000b2e:	777b      	strb	r3, [r7, #29]
			break;
 8000b30:	e005      	b.n	8000b3e <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE:	// Transmit FIFO data
		{
			irqEn = 0x77;
 8000b32:	2377      	movs	r3, #119	@ 0x77
 8000b34:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x30;
 8000b36:	2330      	movs	r3, #48	@ 0x30
 8000b38:	777b      	strb	r3, [r7, #29]
			break;
 8000b3a:	e000      	b.n	8000b3e <MFRC522_ToCard+0x3e>
		}
		default:
			break;
 8000b3c:	bf00      	nop
    }

    Write_MFRC522(CommIEnReg, irqEn|0x80);	// Interrupt request
 8000b3e:	7fbb      	ldrb	r3, [r7, #30]
 8000b40:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000b44:	b2db      	uxtb	r3, r3
 8000b46:	4619      	mov	r1, r3
 8000b48:	2002      	movs	r0, #2
 8000b4a:	f7ff ff0f 	bl	800096c <Write_MFRC522>
    ClearBitMask(CommIrqReg, 0x80);			// Clear all interrupt request bit
 8000b4e:	2180      	movs	r1, #128	@ 0x80
 8000b50:	2004      	movs	r0, #4
 8000b52:	f7ff ff74 	bl	8000a3e <ClearBitMask>
    SetBitMask(FIFOLevelReg, 0x80);			// FlushBuffer=1, FIFO Initialization
 8000b56:	2180      	movs	r1, #128	@ 0x80
 8000b58:	200a      	movs	r0, #10
 8000b5a:	f7ff ff55 	bl	8000a08 <SetBitMask>

	Write_MFRC522(CommandReg, PCD_IDLE);	// NO action; Cancel the current command
 8000b5e:	2100      	movs	r1, #0
 8000b60:	2001      	movs	r0, #1
 8000b62:	f7ff ff03 	bl	800096c <Write_MFRC522>

	// Writing data to the FIFO
    for (i=0; i<sendLen; i++)
 8000b66:	2300      	movs	r3, #0
 8000b68:	61bb      	str	r3, [r7, #24]
 8000b6a:	e00a      	b.n	8000b82 <MFRC522_ToCard+0x82>
    {
		Write_MFRC522(FIFODataReg, sendData[i]);
 8000b6c:	68ba      	ldr	r2, [r7, #8]
 8000b6e:	69bb      	ldr	r3, [r7, #24]
 8000b70:	4413      	add	r3, r2
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	4619      	mov	r1, r3
 8000b76:	2009      	movs	r0, #9
 8000b78:	f7ff fef8 	bl	800096c <Write_MFRC522>
    for (i=0; i<sendLen; i++)
 8000b7c:	69bb      	ldr	r3, [r7, #24]
 8000b7e:	3301      	adds	r3, #1
 8000b80:	61bb      	str	r3, [r7, #24]
 8000b82:	7bbb      	ldrb	r3, [r7, #14]
 8000b84:	69ba      	ldr	r2, [r7, #24]
 8000b86:	429a      	cmp	r2, r3
 8000b88:	d3f0      	bcc.n	8000b6c <MFRC522_ToCard+0x6c>
	}

    // Execute the command
	Write_MFRC522(CommandReg, command);
 8000b8a:	7bfb      	ldrb	r3, [r7, #15]
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	2001      	movs	r0, #1
 8000b90:	f7ff feec 	bl	800096c <Write_MFRC522>
    if (command == PCD_TRANSCEIVE)
 8000b94:	7bfb      	ldrb	r3, [r7, #15]
 8000b96:	2b0c      	cmp	r3, #12
 8000b98:	d103      	bne.n	8000ba2 <MFRC522_ToCard+0xa2>
    {
		SetBitMask(BitFramingReg, 0x80);		// StartSend=1,transmission of data starts
 8000b9a:	2180      	movs	r1, #128	@ 0x80
 8000b9c:	200d      	movs	r0, #13
 8000b9e:	f7ff ff33 	bl	8000a08 <SetBitMask>
	}

    // Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 8000ba2:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000ba6:	61bb      	str	r3, [r7, #24]
    do
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = Read_MFRC522(CommIrqReg);
 8000ba8:	2004      	movs	r0, #4
 8000baa:	f7ff ff05 	bl	80009b8 <Read_MFRC522>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	773b      	strb	r3, [r7, #28]
        i--;
 8000bb2:	69bb      	ldr	r3, [r7, #24]
 8000bb4:	3b01      	subs	r3, #1
 8000bb6:	61bb      	str	r3, [r7, #24]
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8000bb8:	69bb      	ldr	r3, [r7, #24]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d00a      	beq.n	8000bd4 <MFRC522_ToCard+0xd4>
 8000bbe:	7f3b      	ldrb	r3, [r7, #28]
 8000bc0:	f003 0301 	and.w	r3, r3, #1
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d105      	bne.n	8000bd4 <MFRC522_ToCard+0xd4>
 8000bc8:	7f3a      	ldrb	r2, [r7, #28]
 8000bca:	7f7b      	ldrb	r3, [r7, #29]
 8000bcc:	4013      	ands	r3, r2
 8000bce:	b2db      	uxtb	r3, r3
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d0e9      	beq.n	8000ba8 <MFRC522_ToCard+0xa8>

    ClearBitMask(BitFramingReg, 0x80);			//StartSend=0
 8000bd4:	2180      	movs	r1, #128	@ 0x80
 8000bd6:	200d      	movs	r0, #13
 8000bd8:	f7ff ff31 	bl	8000a3e <ClearBitMask>

    if (i != 0)
 8000bdc:	69bb      	ldr	r3, [r7, #24]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d052      	beq.n	8000c88 <MFRC522_ToCard+0x188>
    {
        if(!(Read_MFRC522(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
 8000be2:	2006      	movs	r0, #6
 8000be4:	f7ff fee8 	bl	80009b8 <Read_MFRC522>
 8000be8:	4603      	mov	r3, r0
 8000bea:	f003 031b 	and.w	r3, r3, #27
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d148      	bne.n	8000c84 <MFRC522_ToCard+0x184>
        {
            status = MI_OK;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	77fb      	strb	r3, [r7, #31]
            if (n & irqEn & 0x01)
 8000bf6:	7f3a      	ldrb	r2, [r7, #28]
 8000bf8:	7fbb      	ldrb	r3, [r7, #30]
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <MFRC522_ToCard+0x10a>
            {
				status = MI_NOTAGERR;
 8000c06:	2301      	movs	r3, #1
 8000c08:	77fb      	strb	r3, [r7, #31]
			}

            if (command == PCD_TRANSCEIVE)
 8000c0a:	7bfb      	ldrb	r3, [r7, #15]
 8000c0c:	2b0c      	cmp	r3, #12
 8000c0e:	d13b      	bne.n	8000c88 <MFRC522_ToCard+0x188>
            {
               	n = Read_MFRC522(FIFOLevelReg);
 8000c10:	200a      	movs	r0, #10
 8000c12:	f7ff fed1 	bl	80009b8 <Read_MFRC522>
 8000c16:	4603      	mov	r3, r0
 8000c18:	773b      	strb	r3, [r7, #28]
              	lastBits = Read_MFRC522(ControlReg) & 0x07;
 8000c1a:	200c      	movs	r0, #12
 8000c1c:	f7ff fecc 	bl	80009b8 <Read_MFRC522>
 8000c20:	4603      	mov	r3, r0
 8000c22:	f003 0307 	and.w	r3, r3, #7
 8000c26:	75fb      	strb	r3, [r7, #23]
                if (lastBits)
 8000c28:	7dfb      	ldrb	r3, [r7, #23]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d008      	beq.n	8000c40 <MFRC522_ToCard+0x140>
                {
					*backLen = (n-1)*8 + lastBits;
 8000c2e:	7f3b      	ldrb	r3, [r7, #28]
 8000c30:	3b01      	subs	r3, #1
 8000c32:	00da      	lsls	r2, r3, #3
 8000c34:	7dfb      	ldrb	r3, [r7, #23]
 8000c36:	4413      	add	r3, r2
 8000c38:	461a      	mov	r2, r3
 8000c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000c3c:	601a      	str	r2, [r3, #0]
 8000c3e:	e004      	b.n	8000c4a <MFRC522_ToCard+0x14a>
				}
                else
                {
					*backLen = n*8;
 8000c40:	7f3b      	ldrb	r3, [r7, #28]
 8000c42:	00db      	lsls	r3, r3, #3
 8000c44:	461a      	mov	r2, r3
 8000c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000c48:	601a      	str	r2, [r3, #0]
				}

                if (n == 0)
 8000c4a:	7f3b      	ldrb	r3, [r7, #28]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d101      	bne.n	8000c54 <MFRC522_ToCard+0x154>
                {
					n = 1;
 8000c50:	2301      	movs	r3, #1
 8000c52:	773b      	strb	r3, [r7, #28]
				}
                if (n > MAX_LEN)
 8000c54:	7f3b      	ldrb	r3, [r7, #28]
 8000c56:	2b10      	cmp	r3, #16
 8000c58:	d901      	bls.n	8000c5e <MFRC522_ToCard+0x15e>
                {
					n = MAX_LEN;
 8000c5a:	2310      	movs	r3, #16
 8000c5c:	773b      	strb	r3, [r7, #28]
				}

                // Reading the received data in FIFO
                for (i=0; i<n; i++)
 8000c5e:	2300      	movs	r3, #0
 8000c60:	61bb      	str	r3, [r7, #24]
 8000c62:	e00a      	b.n	8000c7a <MFRC522_ToCard+0x17a>
                {
					backData[i] = Read_MFRC522(FIFODataReg);
 8000c64:	687a      	ldr	r2, [r7, #4]
 8000c66:	69bb      	ldr	r3, [r7, #24]
 8000c68:	18d4      	adds	r4, r2, r3
 8000c6a:	2009      	movs	r0, #9
 8000c6c:	f7ff fea4 	bl	80009b8 <Read_MFRC522>
 8000c70:	4603      	mov	r3, r0
 8000c72:	7023      	strb	r3, [r4, #0]
                for (i=0; i<n; i++)
 8000c74:	69bb      	ldr	r3, [r7, #24]
 8000c76:	3301      	adds	r3, #1
 8000c78:	61bb      	str	r3, [r7, #24]
 8000c7a:	7f3b      	ldrb	r3, [r7, #28]
 8000c7c:	69ba      	ldr	r2, [r7, #24]
 8000c7e:	429a      	cmp	r2, r3
 8000c80:	d3f0      	bcc.n	8000c64 <MFRC522_ToCard+0x164>
 8000c82:	e001      	b.n	8000c88 <MFRC522_ToCard+0x188>
				}
            }
        }
        else
        {
			status = MI_ERR;
 8000c84:	2302      	movs	r3, #2
 8000c86:	77fb      	strb	r3, [r7, #31]
    }

    //SetBitMask(ControlReg,0x80);           //timer stops
    //Write_MFRC522(CommandReg, PCD_IDLE);

    return status;
 8000c88:	7ffb      	ldrb	r3, [r7, #31]
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3724      	adds	r7, #36	@ 0x24
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd90      	pop	{r4, r7, pc}

08000c92 <MFRC522_Request>:
 *    0x0800 = Mifare_Pro(X)
 *    0x4403 = Mifare_DESFire
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Request(uchar reqMode, uchar *TagType)
{
 8000c92:	b580      	push	{r7, lr}
 8000c94:	b086      	sub	sp, #24
 8000c96:	af02      	add	r7, sp, #8
 8000c98:	4603      	mov	r3, r0
 8000c9a:	6039      	str	r1, [r7, #0]
 8000c9c:	71fb      	strb	r3, [r7, #7]
	uchar status;
	uint backBits;			 // The received data bits

	Write_MFRC522(BitFramingReg, 0x07);		//TxLastBists = BitFramingReg[2..0]
 8000c9e:	2107      	movs	r1, #7
 8000ca0:	200d      	movs	r0, #13
 8000ca2:	f7ff fe63 	bl	800096c <Write_MFRC522>

	TagType[0] = reqMode;
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	79fa      	ldrb	r2, [r7, #7]
 8000caa:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8000cac:	f107 0308 	add.w	r3, r7, #8
 8000cb0:	9300      	str	r3, [sp, #0]
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	6839      	ldr	r1, [r7, #0]
 8000cb8:	200c      	movs	r0, #12
 8000cba:	f7ff ff21 	bl	8000b00 <MFRC522_ToCard>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	73fb      	strb	r3, [r7, #15]

	if ((status != MI_OK) || (backBits != 0x10))
 8000cc2:	7bfb      	ldrb	r3, [r7, #15]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d102      	bne.n	8000cce <MFRC522_Request+0x3c>
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	2b10      	cmp	r3, #16
 8000ccc:	d001      	beq.n	8000cd2 <MFRC522_Request+0x40>
	{
		status = MI_ERR;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8000cd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3710      	adds	r7, #16
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <MFRC522_Anticoll>:
 * Description: Anti-collision detection, reading selected card serial number card
 * Input parameters: serNum - returns 4 bytes card serial number, the first 5 bytes for the checksum byte
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Anticoll(uchar *serNum)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b086      	sub	sp, #24
 8000ce0:	af02      	add	r7, sp, #8
 8000ce2:	6078      	str	r0, [r7, #4]
    uchar status;
    uchar i;
	uchar serNumCheck=0;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	737b      	strb	r3, [r7, #13]
    uint unLen;

	Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 8000ce8:	2100      	movs	r1, #0
 8000cea:	200d      	movs	r0, #13
 8000cec:	f7ff fe3e 	bl	800096c <Write_MFRC522>

    serNum[0] = PICC_ANTICOLL;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2293      	movs	r2, #147	@ 0x93
 8000cf4:	701a      	strb	r2, [r3, #0]
    serNum[1] = 0x20;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	2220      	movs	r2, #32
 8000cfc:	701a      	strb	r2, [r3, #0]
    status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8000cfe:	f107 0308 	add.w	r3, r7, #8
 8000d02:	9300      	str	r3, [sp, #0]
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2202      	movs	r2, #2
 8000d08:	6879      	ldr	r1, [r7, #4]
 8000d0a:	200c      	movs	r0, #12
 8000d0c:	f7ff fef8 	bl	8000b00 <MFRC522_ToCard>
 8000d10:	4603      	mov	r3, r0
 8000d12:	73fb      	strb	r3, [r7, #15]

    if (status == MI_OK)
 8000d14:	7bfb      	ldrb	r3, [r7, #15]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d118      	bne.n	8000d4c <MFRC522_Anticoll+0x70>
	{
    	 //Check card serial number
		for (i=0; i<4; i++)
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	73bb      	strb	r3, [r7, #14]
 8000d1e:	e009      	b.n	8000d34 <MFRC522_Anticoll+0x58>
		{
		 	serNumCheck ^= serNum[i];
 8000d20:	7bbb      	ldrb	r3, [r7, #14]
 8000d22:	687a      	ldr	r2, [r7, #4]
 8000d24:	4413      	add	r3, r2
 8000d26:	781a      	ldrb	r2, [r3, #0]
 8000d28:	7b7b      	ldrb	r3, [r7, #13]
 8000d2a:	4053      	eors	r3, r2
 8000d2c:	737b      	strb	r3, [r7, #13]
		for (i=0; i<4; i++)
 8000d2e:	7bbb      	ldrb	r3, [r7, #14]
 8000d30:	3301      	adds	r3, #1
 8000d32:	73bb      	strb	r3, [r7, #14]
 8000d34:	7bbb      	ldrb	r3, [r7, #14]
 8000d36:	2b03      	cmp	r3, #3
 8000d38:	d9f2      	bls.n	8000d20 <MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i])
 8000d3a:	7bbb      	ldrb	r3, [r7, #14]
 8000d3c:	687a      	ldr	r2, [r7, #4]
 8000d3e:	4413      	add	r3, r2
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	7b7a      	ldrb	r2, [r7, #13]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d001      	beq.n	8000d4c <MFRC522_Anticoll+0x70>
		{
			status = MI_ERR;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	73fb      	strb	r3, [r7, #15]
		}
    }

    return status;
 8000d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3710      	adds	r7, #16
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
	...

08000d58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	607b      	str	r3, [r7, #4]
 8000d62:	4b10      	ldr	r3, [pc, #64]	@ (8000da4 <HAL_MspInit+0x4c>)
 8000d64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d66:	4a0f      	ldr	r2, [pc, #60]	@ (8000da4 <HAL_MspInit+0x4c>)
 8000d68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d6e:	4b0d      	ldr	r3, [pc, #52]	@ (8000da4 <HAL_MspInit+0x4c>)
 8000d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d76:	607b      	str	r3, [r7, #4]
 8000d78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	603b      	str	r3, [r7, #0]
 8000d7e:	4b09      	ldr	r3, [pc, #36]	@ (8000da4 <HAL_MspInit+0x4c>)
 8000d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d82:	4a08      	ldr	r2, [pc, #32]	@ (8000da4 <HAL_MspInit+0x4c>)
 8000d84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d88:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d8a:	4b06      	ldr	r3, [pc, #24]	@ (8000da4 <HAL_MspInit+0x4c>)
 8000d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d92:	603b      	str	r3, [r7, #0]
 8000d94:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d96:	2007      	movs	r0, #7
 8000d98:	f000 fa4a 	bl	8001230 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d9c:	bf00      	nop
 8000d9e:	3708      	adds	r7, #8
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	40023800 	.word	0x40023800

08000da8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b08a      	sub	sp, #40	@ 0x28
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db0:	f107 0314 	add.w	r3, r7, #20
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
 8000dba:	609a      	str	r2, [r3, #8]
 8000dbc:	60da      	str	r2, [r3, #12]
 8000dbe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a19      	ldr	r2, [pc, #100]	@ (8000e2c <HAL_SPI_MspInit+0x84>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d12b      	bne.n	8000e22 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000dca:	2300      	movs	r3, #0
 8000dcc:	613b      	str	r3, [r7, #16]
 8000dce:	4b18      	ldr	r3, [pc, #96]	@ (8000e30 <HAL_SPI_MspInit+0x88>)
 8000dd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dd2:	4a17      	ldr	r2, [pc, #92]	@ (8000e30 <HAL_SPI_MspInit+0x88>)
 8000dd4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000dd8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dda:	4b15      	ldr	r3, [pc, #84]	@ (8000e30 <HAL_SPI_MspInit+0x88>)
 8000ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dde:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000de2:	613b      	str	r3, [r7, #16]
 8000de4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	60fb      	str	r3, [r7, #12]
 8000dea:	4b11      	ldr	r3, [pc, #68]	@ (8000e30 <HAL_SPI_MspInit+0x88>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dee:	4a10      	ldr	r2, [pc, #64]	@ (8000e30 <HAL_SPI_MspInit+0x88>)
 8000df0:	f043 0301 	orr.w	r3, r3, #1
 8000df4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000df6:	4b0e      	ldr	r3, [pc, #56]	@ (8000e30 <HAL_SPI_MspInit+0x88>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfa:	f003 0301 	and.w	r3, r3, #1
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000e02:	23e0      	movs	r3, #224	@ 0xe0
 8000e04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e06:	2302      	movs	r3, #2
 8000e08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e0e:	2303      	movs	r3, #3
 8000e10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e12:	2305      	movs	r3, #5
 8000e14:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e16:	f107 0314 	add.w	r3, r7, #20
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4805      	ldr	r0, [pc, #20]	@ (8000e34 <HAL_SPI_MspInit+0x8c>)
 8000e1e:	f000 fa3b 	bl	8001298 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000e22:	bf00      	nop
 8000e24:	3728      	adds	r7, #40	@ 0x28
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	40013000 	.word	0x40013000
 8000e30:	40023800 	.word	0x40023800
 8000e34:	40020000 	.word	0x40020000

08000e38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b08a      	sub	sp, #40	@ 0x28
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e40:	f107 0314 	add.w	r3, r7, #20
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	605a      	str	r2, [r3, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
 8000e4c:	60da      	str	r2, [r3, #12]
 8000e4e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a19      	ldr	r2, [pc, #100]	@ (8000ebc <HAL_UART_MspInit+0x84>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d12c      	bne.n	8000eb4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	613b      	str	r3, [r7, #16]
 8000e5e:	4b18      	ldr	r3, [pc, #96]	@ (8000ec0 <HAL_UART_MspInit+0x88>)
 8000e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e62:	4a17      	ldr	r2, [pc, #92]	@ (8000ec0 <HAL_UART_MspInit+0x88>)
 8000e64:	f043 0310 	orr.w	r3, r3, #16
 8000e68:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e6a:	4b15      	ldr	r3, [pc, #84]	@ (8000ec0 <HAL_UART_MspInit+0x88>)
 8000e6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e6e:	f003 0310 	and.w	r3, r3, #16
 8000e72:	613b      	str	r3, [r7, #16]
 8000e74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	60fb      	str	r3, [r7, #12]
 8000e7a:	4b11      	ldr	r3, [pc, #68]	@ (8000ec0 <HAL_UART_MspInit+0x88>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7e:	4a10      	ldr	r2, [pc, #64]	@ (8000ec0 <HAL_UART_MspInit+0x88>)
 8000e80:	f043 0301 	orr.w	r3, r3, #1
 8000e84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e86:	4b0e      	ldr	r3, [pc, #56]	@ (8000ec0 <HAL_UART_MspInit+0x88>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8a:	f003 0301 	and.w	r3, r3, #1
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000e92:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000e96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea0:	2303      	movs	r3, #3
 8000ea2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ea4:	2307      	movs	r3, #7
 8000ea6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea8:	f107 0314 	add.w	r3, r7, #20
 8000eac:	4619      	mov	r1, r3
 8000eae:	4805      	ldr	r0, [pc, #20]	@ (8000ec4 <HAL_UART_MspInit+0x8c>)
 8000eb0:	f000 f9f2 	bl	8001298 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000eb4:	bf00      	nop
 8000eb6:	3728      	adds	r7, #40	@ 0x28
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	40011000 	.word	0x40011000
 8000ec0:	40023800 	.word	0x40023800
 8000ec4:	40020000 	.word	0x40020000

08000ec8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ecc:	bf00      	nop
 8000ece:	e7fd      	b.n	8000ecc <NMI_Handler+0x4>

08000ed0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ed4:	bf00      	nop
 8000ed6:	e7fd      	b.n	8000ed4 <HardFault_Handler+0x4>

08000ed8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000edc:	bf00      	nop
 8000ede:	e7fd      	b.n	8000edc <MemManage_Handler+0x4>

08000ee0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ee4:	bf00      	nop
 8000ee6:	e7fd      	b.n	8000ee4 <BusFault_Handler+0x4>

08000ee8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eec:	bf00      	nop
 8000eee:	e7fd      	b.n	8000eec <UsageFault_Handler+0x4>

08000ef0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ef4:	bf00      	nop
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr

08000efe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000efe:	b480      	push	{r7}
 8000f00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f02:	bf00      	nop
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr

08000f1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f1e:	f000 f891 	bl	8001044 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
	...

08000f28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f2c:	4b06      	ldr	r3, [pc, #24]	@ (8000f48 <SystemInit+0x20>)
 8000f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f32:	4a05      	ldr	r2, [pc, #20]	@ (8000f48 <SystemInit+0x20>)
 8000f34:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f38:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	e000ed00 	.word	0xe000ed00

08000f4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f4c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f84 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000f50:	f7ff ffea 	bl	8000f28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f54:	480c      	ldr	r0, [pc, #48]	@ (8000f88 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f56:	490d      	ldr	r1, [pc, #52]	@ (8000f8c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f58:	4a0d      	ldr	r2, [pc, #52]	@ (8000f90 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f5c:	e002      	b.n	8000f64 <LoopCopyDataInit>

08000f5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f62:	3304      	adds	r3, #4

08000f64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f68:	d3f9      	bcc.n	8000f5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f6a:	4a0a      	ldr	r2, [pc, #40]	@ (8000f94 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f6c:	4c0a      	ldr	r4, [pc, #40]	@ (8000f98 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f70:	e001      	b.n	8000f76 <LoopFillZerobss>

08000f72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f74:	3204      	adds	r2, #4

08000f76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f78:	d3fb      	bcc.n	8000f72 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000f7a:	f001 fee5 	bl	8002d48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f7e:	f7ff fb11 	bl	80005a4 <main>
  bx  lr    
 8000f82:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f84:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000f88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f8c:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8000f90:	08002dd0 	.word	0x08002dd0
  ldr r2, =_sbss
 8000f94:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8000f98:	20000110 	.word	0x20000110

08000f9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f9c:	e7fe      	b.n	8000f9c <ADC_IRQHandler>
	...

08000fa0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fa4:	4b0e      	ldr	r3, [pc, #56]	@ (8000fe0 <HAL_Init+0x40>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a0d      	ldr	r2, [pc, #52]	@ (8000fe0 <HAL_Init+0x40>)
 8000faa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000fae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fb0:	4b0b      	ldr	r3, [pc, #44]	@ (8000fe0 <HAL_Init+0x40>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a0a      	ldr	r2, [pc, #40]	@ (8000fe0 <HAL_Init+0x40>)
 8000fb6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000fba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fbc:	4b08      	ldr	r3, [pc, #32]	@ (8000fe0 <HAL_Init+0x40>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a07      	ldr	r2, [pc, #28]	@ (8000fe0 <HAL_Init+0x40>)
 8000fc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fc8:	2003      	movs	r0, #3
 8000fca:	f000 f931 	bl	8001230 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fce:	2000      	movs	r0, #0
 8000fd0:	f000 f808 	bl	8000fe4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fd4:	f7ff fec0 	bl	8000d58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fd8:	2300      	movs	r3, #0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40023c00 	.word	0x40023c00

08000fe4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fec:	4b12      	ldr	r3, [pc, #72]	@ (8001038 <HAL_InitTick+0x54>)
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	4b12      	ldr	r3, [pc, #72]	@ (800103c <HAL_InitTick+0x58>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ffa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001002:	4618      	mov	r0, r3
 8001004:	f000 f93b 	bl	800127e <HAL_SYSTICK_Config>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
 8001010:	e00e      	b.n	8001030 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2b0f      	cmp	r3, #15
 8001016:	d80a      	bhi.n	800102e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001018:	2200      	movs	r2, #0
 800101a:	6879      	ldr	r1, [r7, #4]
 800101c:	f04f 30ff 	mov.w	r0, #4294967295
 8001020:	f000 f911 	bl	8001246 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001024:	4a06      	ldr	r2, [pc, #24]	@ (8001040 <HAL_InitTick+0x5c>)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800102a:	2300      	movs	r3, #0
 800102c:	e000      	b.n	8001030 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
}
 8001030:	4618      	mov	r0, r3
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20000018 	.word	0x20000018
 800103c:	20000020 	.word	0x20000020
 8001040:	2000001c 	.word	0x2000001c

08001044 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001048:	4b06      	ldr	r3, [pc, #24]	@ (8001064 <HAL_IncTick+0x20>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	461a      	mov	r2, r3
 800104e:	4b06      	ldr	r3, [pc, #24]	@ (8001068 <HAL_IncTick+0x24>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4413      	add	r3, r2
 8001054:	4a04      	ldr	r2, [pc, #16]	@ (8001068 <HAL_IncTick+0x24>)
 8001056:	6013      	str	r3, [r2, #0]
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	20000020 	.word	0x20000020
 8001068:	2000010c 	.word	0x2000010c

0800106c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  return uwTick;
 8001070:	4b03      	ldr	r3, [pc, #12]	@ (8001080 <HAL_GetTick+0x14>)
 8001072:	681b      	ldr	r3, [r3, #0]
}
 8001074:	4618      	mov	r0, r3
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	2000010c 	.word	0x2000010c

08001084 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800108c:	f7ff ffee 	bl	800106c <HAL_GetTick>
 8001090:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800109c:	d005      	beq.n	80010aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800109e:	4b0a      	ldr	r3, [pc, #40]	@ (80010c8 <HAL_Delay+0x44>)
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	461a      	mov	r2, r3
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	4413      	add	r3, r2
 80010a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010aa:	bf00      	nop
 80010ac:	f7ff ffde 	bl	800106c <HAL_GetTick>
 80010b0:	4602      	mov	r2, r0
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	68fa      	ldr	r2, [r7, #12]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d8f7      	bhi.n	80010ac <HAL_Delay+0x28>
  {
  }
}
 80010bc:	bf00      	nop
 80010be:	bf00      	nop
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	20000020 	.word	0x20000020

080010cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f003 0307 	and.w	r3, r3, #7
 80010da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001110 <__NVIC_SetPriorityGrouping+0x44>)
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010e2:	68ba      	ldr	r2, [r7, #8]
 80010e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010e8:	4013      	ands	r3, r2
 80010ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010fe:	4a04      	ldr	r2, [pc, #16]	@ (8001110 <__NVIC_SetPriorityGrouping+0x44>)
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	60d3      	str	r3, [r2, #12]
}
 8001104:	bf00      	nop
 8001106:	3714      	adds	r7, #20
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	e000ed00 	.word	0xe000ed00

08001114 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001118:	4b04      	ldr	r3, [pc, #16]	@ (800112c <__NVIC_GetPriorityGrouping+0x18>)
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	0a1b      	lsrs	r3, r3, #8
 800111e:	f003 0307 	and.w	r3, r3, #7
}
 8001122:	4618      	mov	r0, r3
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	e000ed00 	.word	0xe000ed00

08001130 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	6039      	str	r1, [r7, #0]
 800113a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800113c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001140:	2b00      	cmp	r3, #0
 8001142:	db0a      	blt.n	800115a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	b2da      	uxtb	r2, r3
 8001148:	490c      	ldr	r1, [pc, #48]	@ (800117c <__NVIC_SetPriority+0x4c>)
 800114a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114e:	0112      	lsls	r2, r2, #4
 8001150:	b2d2      	uxtb	r2, r2
 8001152:	440b      	add	r3, r1
 8001154:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001158:	e00a      	b.n	8001170 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	b2da      	uxtb	r2, r3
 800115e:	4908      	ldr	r1, [pc, #32]	@ (8001180 <__NVIC_SetPriority+0x50>)
 8001160:	79fb      	ldrb	r3, [r7, #7]
 8001162:	f003 030f 	and.w	r3, r3, #15
 8001166:	3b04      	subs	r3, #4
 8001168:	0112      	lsls	r2, r2, #4
 800116a:	b2d2      	uxtb	r2, r2
 800116c:	440b      	add	r3, r1
 800116e:	761a      	strb	r2, [r3, #24]
}
 8001170:	bf00      	nop
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	e000e100 	.word	0xe000e100
 8001180:	e000ed00 	.word	0xe000ed00

08001184 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001184:	b480      	push	{r7}
 8001186:	b089      	sub	sp, #36	@ 0x24
 8001188:	af00      	add	r7, sp, #0
 800118a:	60f8      	str	r0, [r7, #12]
 800118c:	60b9      	str	r1, [r7, #8]
 800118e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	f003 0307 	and.w	r3, r3, #7
 8001196:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	f1c3 0307 	rsb	r3, r3, #7
 800119e:	2b04      	cmp	r3, #4
 80011a0:	bf28      	it	cs
 80011a2:	2304      	movcs	r3, #4
 80011a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	3304      	adds	r3, #4
 80011aa:	2b06      	cmp	r3, #6
 80011ac:	d902      	bls.n	80011b4 <NVIC_EncodePriority+0x30>
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	3b03      	subs	r3, #3
 80011b2:	e000      	b.n	80011b6 <NVIC_EncodePriority+0x32>
 80011b4:	2300      	movs	r3, #0
 80011b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b8:	f04f 32ff 	mov.w	r2, #4294967295
 80011bc:	69bb      	ldr	r3, [r7, #24]
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	43da      	mvns	r2, r3
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	401a      	ands	r2, r3
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011cc:	f04f 31ff 	mov.w	r1, #4294967295
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	fa01 f303 	lsl.w	r3, r1, r3
 80011d6:	43d9      	mvns	r1, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011dc:	4313      	orrs	r3, r2
         );
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3724      	adds	r7, #36	@ 0x24
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
	...

080011ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	3b01      	subs	r3, #1
 80011f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011fc:	d301      	bcc.n	8001202 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011fe:	2301      	movs	r3, #1
 8001200:	e00f      	b.n	8001222 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001202:	4a0a      	ldr	r2, [pc, #40]	@ (800122c <SysTick_Config+0x40>)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	3b01      	subs	r3, #1
 8001208:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800120a:	210f      	movs	r1, #15
 800120c:	f04f 30ff 	mov.w	r0, #4294967295
 8001210:	f7ff ff8e 	bl	8001130 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001214:	4b05      	ldr	r3, [pc, #20]	@ (800122c <SysTick_Config+0x40>)
 8001216:	2200      	movs	r2, #0
 8001218:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800121a:	4b04      	ldr	r3, [pc, #16]	@ (800122c <SysTick_Config+0x40>)
 800121c:	2207      	movs	r2, #7
 800121e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	e000e010 	.word	0xe000e010

08001230 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f7ff ff47 	bl	80010cc <__NVIC_SetPriorityGrouping>
}
 800123e:	bf00      	nop
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001246:	b580      	push	{r7, lr}
 8001248:	b086      	sub	sp, #24
 800124a:	af00      	add	r7, sp, #0
 800124c:	4603      	mov	r3, r0
 800124e:	60b9      	str	r1, [r7, #8]
 8001250:	607a      	str	r2, [r7, #4]
 8001252:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001254:	2300      	movs	r3, #0
 8001256:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001258:	f7ff ff5c 	bl	8001114 <__NVIC_GetPriorityGrouping>
 800125c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	68b9      	ldr	r1, [r7, #8]
 8001262:	6978      	ldr	r0, [r7, #20]
 8001264:	f7ff ff8e 	bl	8001184 <NVIC_EncodePriority>
 8001268:	4602      	mov	r2, r0
 800126a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800126e:	4611      	mov	r1, r2
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff ff5d 	bl	8001130 <__NVIC_SetPriority>
}
 8001276:	bf00      	nop
 8001278:	3718      	adds	r7, #24
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b082      	sub	sp, #8
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f7ff ffb0 	bl	80011ec <SysTick_Config>
 800128c:	4603      	mov	r3, r0
}
 800128e:	4618      	mov	r0, r3
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
	...

08001298 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001298:	b480      	push	{r7}
 800129a:	b089      	sub	sp, #36	@ 0x24
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012a2:	2300      	movs	r3, #0
 80012a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012a6:	2300      	movs	r3, #0
 80012a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012aa:	2300      	movs	r3, #0
 80012ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012ae:	2300      	movs	r3, #0
 80012b0:	61fb      	str	r3, [r7, #28]
 80012b2:	e159      	b.n	8001568 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012b4:	2201      	movs	r2, #1
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	697a      	ldr	r2, [r7, #20]
 80012c4:	4013      	ands	r3, r2
 80012c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012c8:	693a      	ldr	r2, [r7, #16]
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	f040 8148 	bne.w	8001562 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f003 0303 	and.w	r3, r3, #3
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d005      	beq.n	80012ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012e6:	2b02      	cmp	r3, #2
 80012e8:	d130      	bne.n	800134c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	2203      	movs	r2, #3
 80012f6:	fa02 f303 	lsl.w	r3, r2, r3
 80012fa:	43db      	mvns	r3, r3
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	4013      	ands	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	68da      	ldr	r2, [r3, #12]
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	fa02 f303 	lsl.w	r3, r2, r3
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	4313      	orrs	r3, r2
 8001312:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	69ba      	ldr	r2, [r7, #24]
 8001318:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001320:	2201      	movs	r2, #1
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	43db      	mvns	r3, r3
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	4013      	ands	r3, r2
 800132e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	091b      	lsrs	r3, r3, #4
 8001336:	f003 0201 	and.w	r2, r3, #1
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	4313      	orrs	r3, r2
 8001344:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f003 0303 	and.w	r3, r3, #3
 8001354:	2b03      	cmp	r3, #3
 8001356:	d017      	beq.n	8001388 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	2203      	movs	r2, #3
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	43db      	mvns	r3, r3
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	4013      	ands	r3, r2
 800136e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	689a      	ldr	r2, [r3, #8]
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	005b      	lsls	r3, r3, #1
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	4313      	orrs	r3, r2
 8001380:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f003 0303 	and.w	r3, r3, #3
 8001390:	2b02      	cmp	r3, #2
 8001392:	d123      	bne.n	80013dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	08da      	lsrs	r2, r3, #3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	3208      	adds	r2, #8
 800139c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	f003 0307 	and.w	r3, r3, #7
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	220f      	movs	r2, #15
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	43db      	mvns	r3, r3
 80013b2:	69ba      	ldr	r2, [r7, #24]
 80013b4:	4013      	ands	r3, r2
 80013b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	691a      	ldr	r2, [r3, #16]
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	f003 0307 	and.w	r3, r3, #7
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	08da      	lsrs	r2, r3, #3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	3208      	adds	r2, #8
 80013d6:	69b9      	ldr	r1, [r7, #24]
 80013d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	2203      	movs	r2, #3
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	43db      	mvns	r3, r3
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	4013      	ands	r3, r2
 80013f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f003 0203 	and.w	r2, r3, #3
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	4313      	orrs	r3, r2
 8001408:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001418:	2b00      	cmp	r3, #0
 800141a:	f000 80a2 	beq.w	8001562 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	60fb      	str	r3, [r7, #12]
 8001422:	4b57      	ldr	r3, [pc, #348]	@ (8001580 <HAL_GPIO_Init+0x2e8>)
 8001424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001426:	4a56      	ldr	r2, [pc, #344]	@ (8001580 <HAL_GPIO_Init+0x2e8>)
 8001428:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800142c:	6453      	str	r3, [r2, #68]	@ 0x44
 800142e:	4b54      	ldr	r3, [pc, #336]	@ (8001580 <HAL_GPIO_Init+0x2e8>)
 8001430:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001432:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001436:	60fb      	str	r3, [r7, #12]
 8001438:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800143a:	4a52      	ldr	r2, [pc, #328]	@ (8001584 <HAL_GPIO_Init+0x2ec>)
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	089b      	lsrs	r3, r3, #2
 8001440:	3302      	adds	r3, #2
 8001442:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001446:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	f003 0303 	and.w	r3, r3, #3
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	220f      	movs	r2, #15
 8001452:	fa02 f303 	lsl.w	r3, r2, r3
 8001456:	43db      	mvns	r3, r3
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	4013      	ands	r3, r2
 800145c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4a49      	ldr	r2, [pc, #292]	@ (8001588 <HAL_GPIO_Init+0x2f0>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d019      	beq.n	800149a <HAL_GPIO_Init+0x202>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4a48      	ldr	r2, [pc, #288]	@ (800158c <HAL_GPIO_Init+0x2f4>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d013      	beq.n	8001496 <HAL_GPIO_Init+0x1fe>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4a47      	ldr	r2, [pc, #284]	@ (8001590 <HAL_GPIO_Init+0x2f8>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d00d      	beq.n	8001492 <HAL_GPIO_Init+0x1fa>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4a46      	ldr	r2, [pc, #280]	@ (8001594 <HAL_GPIO_Init+0x2fc>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d007      	beq.n	800148e <HAL_GPIO_Init+0x1f6>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4a45      	ldr	r2, [pc, #276]	@ (8001598 <HAL_GPIO_Init+0x300>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d101      	bne.n	800148a <HAL_GPIO_Init+0x1f2>
 8001486:	2304      	movs	r3, #4
 8001488:	e008      	b.n	800149c <HAL_GPIO_Init+0x204>
 800148a:	2307      	movs	r3, #7
 800148c:	e006      	b.n	800149c <HAL_GPIO_Init+0x204>
 800148e:	2303      	movs	r3, #3
 8001490:	e004      	b.n	800149c <HAL_GPIO_Init+0x204>
 8001492:	2302      	movs	r3, #2
 8001494:	e002      	b.n	800149c <HAL_GPIO_Init+0x204>
 8001496:	2301      	movs	r3, #1
 8001498:	e000      	b.n	800149c <HAL_GPIO_Init+0x204>
 800149a:	2300      	movs	r3, #0
 800149c:	69fa      	ldr	r2, [r7, #28]
 800149e:	f002 0203 	and.w	r2, r2, #3
 80014a2:	0092      	lsls	r2, r2, #2
 80014a4:	4093      	lsls	r3, r2
 80014a6:	69ba      	ldr	r2, [r7, #24]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014ac:	4935      	ldr	r1, [pc, #212]	@ (8001584 <HAL_GPIO_Init+0x2ec>)
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	089b      	lsrs	r3, r3, #2
 80014b2:	3302      	adds	r3, #2
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014ba:	4b38      	ldr	r3, [pc, #224]	@ (800159c <HAL_GPIO_Init+0x304>)
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	43db      	mvns	r3, r3
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	4013      	ands	r3, r2
 80014c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d003      	beq.n	80014de <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80014d6:	69ba      	ldr	r2, [r7, #24]
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	4313      	orrs	r3, r2
 80014dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014de:	4a2f      	ldr	r2, [pc, #188]	@ (800159c <HAL_GPIO_Init+0x304>)
 80014e0:	69bb      	ldr	r3, [r7, #24]
 80014e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014e4:	4b2d      	ldr	r3, [pc, #180]	@ (800159c <HAL_GPIO_Init+0x304>)
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	43db      	mvns	r3, r3
 80014ee:	69ba      	ldr	r2, [r7, #24]
 80014f0:	4013      	ands	r3, r2
 80014f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d003      	beq.n	8001508 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	4313      	orrs	r3, r2
 8001506:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001508:	4a24      	ldr	r2, [pc, #144]	@ (800159c <HAL_GPIO_Init+0x304>)
 800150a:	69bb      	ldr	r3, [r7, #24]
 800150c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800150e:	4b23      	ldr	r3, [pc, #140]	@ (800159c <HAL_GPIO_Init+0x304>)
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	43db      	mvns	r3, r3
 8001518:	69ba      	ldr	r2, [r7, #24]
 800151a:	4013      	ands	r3, r2
 800151c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d003      	beq.n	8001532 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800152a:	69ba      	ldr	r2, [r7, #24]
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	4313      	orrs	r3, r2
 8001530:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001532:	4a1a      	ldr	r2, [pc, #104]	@ (800159c <HAL_GPIO_Init+0x304>)
 8001534:	69bb      	ldr	r3, [r7, #24]
 8001536:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001538:	4b18      	ldr	r3, [pc, #96]	@ (800159c <HAL_GPIO_Init+0x304>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	43db      	mvns	r3, r3
 8001542:	69ba      	ldr	r2, [r7, #24]
 8001544:	4013      	ands	r3, r2
 8001546:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001550:	2b00      	cmp	r3, #0
 8001552:	d003      	beq.n	800155c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	4313      	orrs	r3, r2
 800155a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800155c:	4a0f      	ldr	r2, [pc, #60]	@ (800159c <HAL_GPIO_Init+0x304>)
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	3301      	adds	r3, #1
 8001566:	61fb      	str	r3, [r7, #28]
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	2b0f      	cmp	r3, #15
 800156c:	f67f aea2 	bls.w	80012b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001570:	bf00      	nop
 8001572:	bf00      	nop
 8001574:	3724      	adds	r7, #36	@ 0x24
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	40023800 	.word	0x40023800
 8001584:	40013800 	.word	0x40013800
 8001588:	40020000 	.word	0x40020000
 800158c:	40020400 	.word	0x40020400
 8001590:	40020800 	.word	0x40020800
 8001594:	40020c00 	.word	0x40020c00
 8001598:	40021000 	.word	0x40021000
 800159c:	40013c00 	.word	0x40013c00

080015a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	460b      	mov	r3, r1
 80015aa:	807b      	strh	r3, [r7, #2]
 80015ac:	4613      	mov	r3, r2
 80015ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015b0:	787b      	ldrb	r3, [r7, #1]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d003      	beq.n	80015be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015b6:	887a      	ldrh	r2, [r7, #2]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015bc:	e003      	b.n	80015c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015be:	887b      	ldrh	r3, [r7, #2]
 80015c0:	041a      	lsls	r2, r3, #16
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	619a      	str	r2, [r3, #24]
}
 80015c6:	bf00      	nop
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
	...

080015d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b086      	sub	sp, #24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d101      	bne.n	80015e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e267      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0301 	and.w	r3, r3, #1
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d075      	beq.n	80016de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80015f2:	4b88      	ldr	r3, [pc, #544]	@ (8001814 <HAL_RCC_OscConfig+0x240>)
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	f003 030c 	and.w	r3, r3, #12
 80015fa:	2b04      	cmp	r3, #4
 80015fc:	d00c      	beq.n	8001618 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015fe:	4b85      	ldr	r3, [pc, #532]	@ (8001814 <HAL_RCC_OscConfig+0x240>)
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001606:	2b08      	cmp	r3, #8
 8001608:	d112      	bne.n	8001630 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800160a:	4b82      	ldr	r3, [pc, #520]	@ (8001814 <HAL_RCC_OscConfig+0x240>)
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001612:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001616:	d10b      	bne.n	8001630 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001618:	4b7e      	ldr	r3, [pc, #504]	@ (8001814 <HAL_RCC_OscConfig+0x240>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001620:	2b00      	cmp	r3, #0
 8001622:	d05b      	beq.n	80016dc <HAL_RCC_OscConfig+0x108>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d157      	bne.n	80016dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	e242      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001638:	d106      	bne.n	8001648 <HAL_RCC_OscConfig+0x74>
 800163a:	4b76      	ldr	r3, [pc, #472]	@ (8001814 <HAL_RCC_OscConfig+0x240>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a75      	ldr	r2, [pc, #468]	@ (8001814 <HAL_RCC_OscConfig+0x240>)
 8001640:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001644:	6013      	str	r3, [r2, #0]
 8001646:	e01d      	b.n	8001684 <HAL_RCC_OscConfig+0xb0>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001650:	d10c      	bne.n	800166c <HAL_RCC_OscConfig+0x98>
 8001652:	4b70      	ldr	r3, [pc, #448]	@ (8001814 <HAL_RCC_OscConfig+0x240>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a6f      	ldr	r2, [pc, #444]	@ (8001814 <HAL_RCC_OscConfig+0x240>)
 8001658:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800165c:	6013      	str	r3, [r2, #0]
 800165e:	4b6d      	ldr	r3, [pc, #436]	@ (8001814 <HAL_RCC_OscConfig+0x240>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a6c      	ldr	r2, [pc, #432]	@ (8001814 <HAL_RCC_OscConfig+0x240>)
 8001664:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001668:	6013      	str	r3, [r2, #0]
 800166a:	e00b      	b.n	8001684 <HAL_RCC_OscConfig+0xb0>
 800166c:	4b69      	ldr	r3, [pc, #420]	@ (8001814 <HAL_RCC_OscConfig+0x240>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a68      	ldr	r2, [pc, #416]	@ (8001814 <HAL_RCC_OscConfig+0x240>)
 8001672:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001676:	6013      	str	r3, [r2, #0]
 8001678:	4b66      	ldr	r3, [pc, #408]	@ (8001814 <HAL_RCC_OscConfig+0x240>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a65      	ldr	r2, [pc, #404]	@ (8001814 <HAL_RCC_OscConfig+0x240>)
 800167e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001682:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d013      	beq.n	80016b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800168c:	f7ff fcee 	bl	800106c <HAL_GetTick>
 8001690:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001692:	e008      	b.n	80016a6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001694:	f7ff fcea 	bl	800106c <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b64      	cmp	r3, #100	@ 0x64
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e207      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016a6:	4b5b      	ldr	r3, [pc, #364]	@ (8001814 <HAL_RCC_OscConfig+0x240>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d0f0      	beq.n	8001694 <HAL_RCC_OscConfig+0xc0>
 80016b2:	e014      	b.n	80016de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b4:	f7ff fcda 	bl	800106c <HAL_GetTick>
 80016b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ba:	e008      	b.n	80016ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016bc:	f7ff fcd6 	bl	800106c <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	2b64      	cmp	r3, #100	@ 0x64
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e1f3      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ce:	4b51      	ldr	r3, [pc, #324]	@ (8001814 <HAL_RCC_OscConfig+0x240>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d1f0      	bne.n	80016bc <HAL_RCC_OscConfig+0xe8>
 80016da:	e000      	b.n	80016de <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0302 	and.w	r3, r3, #2
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d063      	beq.n	80017b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80016ea:	4b4a      	ldr	r3, [pc, #296]	@ (8001814 <HAL_RCC_OscConfig+0x240>)
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	f003 030c 	and.w	r3, r3, #12
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d00b      	beq.n	800170e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016f6:	4b47      	ldr	r3, [pc, #284]	@ (8001814 <HAL_RCC_OscConfig+0x240>)
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80016fe:	2b08      	cmp	r3, #8
 8001700:	d11c      	bne.n	800173c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001702:	4b44      	ldr	r3, [pc, #272]	@ (8001814 <HAL_RCC_OscConfig+0x240>)
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d116      	bne.n	800173c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800170e:	4b41      	ldr	r3, [pc, #260]	@ (8001814 <HAL_RCC_OscConfig+0x240>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0302 	and.w	r3, r3, #2
 8001716:	2b00      	cmp	r3, #0
 8001718:	d005      	beq.n	8001726 <HAL_RCC_OscConfig+0x152>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	68db      	ldr	r3, [r3, #12]
 800171e:	2b01      	cmp	r3, #1
 8001720:	d001      	beq.n	8001726 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e1c7      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001726:	4b3b      	ldr	r3, [pc, #236]	@ (8001814 <HAL_RCC_OscConfig+0x240>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	691b      	ldr	r3, [r3, #16]
 8001732:	00db      	lsls	r3, r3, #3
 8001734:	4937      	ldr	r1, [pc, #220]	@ (8001814 <HAL_RCC_OscConfig+0x240>)
 8001736:	4313      	orrs	r3, r2
 8001738:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800173a:	e03a      	b.n	80017b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d020      	beq.n	8001786 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001744:	4b34      	ldr	r3, [pc, #208]	@ (8001818 <HAL_RCC_OscConfig+0x244>)
 8001746:	2201      	movs	r2, #1
 8001748:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800174a:	f7ff fc8f 	bl	800106c <HAL_GetTick>
 800174e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001750:	e008      	b.n	8001764 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001752:	f7ff fc8b 	bl	800106c <HAL_GetTick>
 8001756:	4602      	mov	r2, r0
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	2b02      	cmp	r3, #2
 800175e:	d901      	bls.n	8001764 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001760:	2303      	movs	r3, #3
 8001762:	e1a8      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001764:	4b2b      	ldr	r3, [pc, #172]	@ (8001814 <HAL_RCC_OscConfig+0x240>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 0302 	and.w	r3, r3, #2
 800176c:	2b00      	cmp	r3, #0
 800176e:	d0f0      	beq.n	8001752 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001770:	4b28      	ldr	r3, [pc, #160]	@ (8001814 <HAL_RCC_OscConfig+0x240>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	691b      	ldr	r3, [r3, #16]
 800177c:	00db      	lsls	r3, r3, #3
 800177e:	4925      	ldr	r1, [pc, #148]	@ (8001814 <HAL_RCC_OscConfig+0x240>)
 8001780:	4313      	orrs	r3, r2
 8001782:	600b      	str	r3, [r1, #0]
 8001784:	e015      	b.n	80017b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001786:	4b24      	ldr	r3, [pc, #144]	@ (8001818 <HAL_RCC_OscConfig+0x244>)
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800178c:	f7ff fc6e 	bl	800106c <HAL_GetTick>
 8001790:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001792:	e008      	b.n	80017a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001794:	f7ff fc6a 	bl	800106c <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e187      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001814 <HAL_RCC_OscConfig+0x240>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0302 	and.w	r3, r3, #2
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d1f0      	bne.n	8001794 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0308 	and.w	r3, r3, #8
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d036      	beq.n	800182c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	695b      	ldr	r3, [r3, #20]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d016      	beq.n	80017f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017c6:	4b15      	ldr	r3, [pc, #84]	@ (800181c <HAL_RCC_OscConfig+0x248>)
 80017c8:	2201      	movs	r2, #1
 80017ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017cc:	f7ff fc4e 	bl	800106c <HAL_GetTick>
 80017d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017d2:	e008      	b.n	80017e6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017d4:	f7ff fc4a 	bl	800106c <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d901      	bls.n	80017e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e167      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001814 <HAL_RCC_OscConfig+0x240>)
 80017e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d0f0      	beq.n	80017d4 <HAL_RCC_OscConfig+0x200>
 80017f2:	e01b      	b.n	800182c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017f4:	4b09      	ldr	r3, [pc, #36]	@ (800181c <HAL_RCC_OscConfig+0x248>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017fa:	f7ff fc37 	bl	800106c <HAL_GetTick>
 80017fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001800:	e00e      	b.n	8001820 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001802:	f7ff fc33 	bl	800106c <HAL_GetTick>
 8001806:	4602      	mov	r2, r0
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	2b02      	cmp	r3, #2
 800180e:	d907      	bls.n	8001820 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001810:	2303      	movs	r3, #3
 8001812:	e150      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4e2>
 8001814:	40023800 	.word	0x40023800
 8001818:	42470000 	.word	0x42470000
 800181c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001820:	4b88      	ldr	r3, [pc, #544]	@ (8001a44 <HAL_RCC_OscConfig+0x470>)
 8001822:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001824:	f003 0302 	and.w	r3, r3, #2
 8001828:	2b00      	cmp	r3, #0
 800182a:	d1ea      	bne.n	8001802 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 0304 	and.w	r3, r3, #4
 8001834:	2b00      	cmp	r3, #0
 8001836:	f000 8097 	beq.w	8001968 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800183a:	2300      	movs	r3, #0
 800183c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800183e:	4b81      	ldr	r3, [pc, #516]	@ (8001a44 <HAL_RCC_OscConfig+0x470>)
 8001840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001842:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d10f      	bne.n	800186a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	60bb      	str	r3, [r7, #8]
 800184e:	4b7d      	ldr	r3, [pc, #500]	@ (8001a44 <HAL_RCC_OscConfig+0x470>)
 8001850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001852:	4a7c      	ldr	r2, [pc, #496]	@ (8001a44 <HAL_RCC_OscConfig+0x470>)
 8001854:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001858:	6413      	str	r3, [r2, #64]	@ 0x40
 800185a:	4b7a      	ldr	r3, [pc, #488]	@ (8001a44 <HAL_RCC_OscConfig+0x470>)
 800185c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800185e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001862:	60bb      	str	r3, [r7, #8]
 8001864:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001866:	2301      	movs	r3, #1
 8001868:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800186a:	4b77      	ldr	r3, [pc, #476]	@ (8001a48 <HAL_RCC_OscConfig+0x474>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001872:	2b00      	cmp	r3, #0
 8001874:	d118      	bne.n	80018a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001876:	4b74      	ldr	r3, [pc, #464]	@ (8001a48 <HAL_RCC_OscConfig+0x474>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a73      	ldr	r2, [pc, #460]	@ (8001a48 <HAL_RCC_OscConfig+0x474>)
 800187c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001880:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001882:	f7ff fbf3 	bl	800106c <HAL_GetTick>
 8001886:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001888:	e008      	b.n	800189c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800188a:	f7ff fbef 	bl	800106c <HAL_GetTick>
 800188e:	4602      	mov	r2, r0
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	2b02      	cmp	r3, #2
 8001896:	d901      	bls.n	800189c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001898:	2303      	movs	r3, #3
 800189a:	e10c      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800189c:	4b6a      	ldr	r3, [pc, #424]	@ (8001a48 <HAL_RCC_OscConfig+0x474>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d0f0      	beq.n	800188a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d106      	bne.n	80018be <HAL_RCC_OscConfig+0x2ea>
 80018b0:	4b64      	ldr	r3, [pc, #400]	@ (8001a44 <HAL_RCC_OscConfig+0x470>)
 80018b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018b4:	4a63      	ldr	r2, [pc, #396]	@ (8001a44 <HAL_RCC_OscConfig+0x470>)
 80018b6:	f043 0301 	orr.w	r3, r3, #1
 80018ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80018bc:	e01c      	b.n	80018f8 <HAL_RCC_OscConfig+0x324>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	2b05      	cmp	r3, #5
 80018c4:	d10c      	bne.n	80018e0 <HAL_RCC_OscConfig+0x30c>
 80018c6:	4b5f      	ldr	r3, [pc, #380]	@ (8001a44 <HAL_RCC_OscConfig+0x470>)
 80018c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018ca:	4a5e      	ldr	r2, [pc, #376]	@ (8001a44 <HAL_RCC_OscConfig+0x470>)
 80018cc:	f043 0304 	orr.w	r3, r3, #4
 80018d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80018d2:	4b5c      	ldr	r3, [pc, #368]	@ (8001a44 <HAL_RCC_OscConfig+0x470>)
 80018d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018d6:	4a5b      	ldr	r2, [pc, #364]	@ (8001a44 <HAL_RCC_OscConfig+0x470>)
 80018d8:	f043 0301 	orr.w	r3, r3, #1
 80018dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80018de:	e00b      	b.n	80018f8 <HAL_RCC_OscConfig+0x324>
 80018e0:	4b58      	ldr	r3, [pc, #352]	@ (8001a44 <HAL_RCC_OscConfig+0x470>)
 80018e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018e4:	4a57      	ldr	r2, [pc, #348]	@ (8001a44 <HAL_RCC_OscConfig+0x470>)
 80018e6:	f023 0301 	bic.w	r3, r3, #1
 80018ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80018ec:	4b55      	ldr	r3, [pc, #340]	@ (8001a44 <HAL_RCC_OscConfig+0x470>)
 80018ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018f0:	4a54      	ldr	r2, [pc, #336]	@ (8001a44 <HAL_RCC_OscConfig+0x470>)
 80018f2:	f023 0304 	bic.w	r3, r3, #4
 80018f6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d015      	beq.n	800192c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001900:	f7ff fbb4 	bl	800106c <HAL_GetTick>
 8001904:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001906:	e00a      	b.n	800191e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001908:	f7ff fbb0 	bl	800106c <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001916:	4293      	cmp	r3, r2
 8001918:	d901      	bls.n	800191e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e0cb      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800191e:	4b49      	ldr	r3, [pc, #292]	@ (8001a44 <HAL_RCC_OscConfig+0x470>)
 8001920:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	2b00      	cmp	r3, #0
 8001928:	d0ee      	beq.n	8001908 <HAL_RCC_OscConfig+0x334>
 800192a:	e014      	b.n	8001956 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800192c:	f7ff fb9e 	bl	800106c <HAL_GetTick>
 8001930:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001932:	e00a      	b.n	800194a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001934:	f7ff fb9a 	bl	800106c <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001942:	4293      	cmp	r3, r2
 8001944:	d901      	bls.n	800194a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e0b5      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800194a:	4b3e      	ldr	r3, [pc, #248]	@ (8001a44 <HAL_RCC_OscConfig+0x470>)
 800194c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	2b00      	cmp	r3, #0
 8001954:	d1ee      	bne.n	8001934 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001956:	7dfb      	ldrb	r3, [r7, #23]
 8001958:	2b01      	cmp	r3, #1
 800195a:	d105      	bne.n	8001968 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800195c:	4b39      	ldr	r3, [pc, #228]	@ (8001a44 <HAL_RCC_OscConfig+0x470>)
 800195e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001960:	4a38      	ldr	r2, [pc, #224]	@ (8001a44 <HAL_RCC_OscConfig+0x470>)
 8001962:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001966:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	699b      	ldr	r3, [r3, #24]
 800196c:	2b00      	cmp	r3, #0
 800196e:	f000 80a1 	beq.w	8001ab4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001972:	4b34      	ldr	r3, [pc, #208]	@ (8001a44 <HAL_RCC_OscConfig+0x470>)
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	f003 030c 	and.w	r3, r3, #12
 800197a:	2b08      	cmp	r3, #8
 800197c:	d05c      	beq.n	8001a38 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	699b      	ldr	r3, [r3, #24]
 8001982:	2b02      	cmp	r3, #2
 8001984:	d141      	bne.n	8001a0a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001986:	4b31      	ldr	r3, [pc, #196]	@ (8001a4c <HAL_RCC_OscConfig+0x478>)
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800198c:	f7ff fb6e 	bl	800106c <HAL_GetTick>
 8001990:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001992:	e008      	b.n	80019a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001994:	f7ff fb6a 	bl	800106c <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e087      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019a6:	4b27      	ldr	r3, [pc, #156]	@ (8001a44 <HAL_RCC_OscConfig+0x470>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d1f0      	bne.n	8001994 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	69da      	ldr	r2, [r3, #28]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6a1b      	ldr	r3, [r3, #32]
 80019ba:	431a      	orrs	r2, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019c0:	019b      	lsls	r3, r3, #6
 80019c2:	431a      	orrs	r2, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019c8:	085b      	lsrs	r3, r3, #1
 80019ca:	3b01      	subs	r3, #1
 80019cc:	041b      	lsls	r3, r3, #16
 80019ce:	431a      	orrs	r2, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019d4:	061b      	lsls	r3, r3, #24
 80019d6:	491b      	ldr	r1, [pc, #108]	@ (8001a44 <HAL_RCC_OscConfig+0x470>)
 80019d8:	4313      	orrs	r3, r2
 80019da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019dc:	4b1b      	ldr	r3, [pc, #108]	@ (8001a4c <HAL_RCC_OscConfig+0x478>)
 80019de:	2201      	movs	r2, #1
 80019e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e2:	f7ff fb43 	bl	800106c <HAL_GetTick>
 80019e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019e8:	e008      	b.n	80019fc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019ea:	f7ff fb3f 	bl	800106c <HAL_GetTick>
 80019ee:	4602      	mov	r2, r0
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d901      	bls.n	80019fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80019f8:	2303      	movs	r3, #3
 80019fa:	e05c      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019fc:	4b11      	ldr	r3, [pc, #68]	@ (8001a44 <HAL_RCC_OscConfig+0x470>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d0f0      	beq.n	80019ea <HAL_RCC_OscConfig+0x416>
 8001a08:	e054      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a0a:	4b10      	ldr	r3, [pc, #64]	@ (8001a4c <HAL_RCC_OscConfig+0x478>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a10:	f7ff fb2c 	bl	800106c <HAL_GetTick>
 8001a14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a16:	e008      	b.n	8001a2a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a18:	f7ff fb28 	bl	800106c <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d901      	bls.n	8001a2a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e045      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a2a:	4b06      	ldr	r3, [pc, #24]	@ (8001a44 <HAL_RCC_OscConfig+0x470>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d1f0      	bne.n	8001a18 <HAL_RCC_OscConfig+0x444>
 8001a36:	e03d      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	699b      	ldr	r3, [r3, #24]
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d107      	bne.n	8001a50 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e038      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4e2>
 8001a44:	40023800 	.word	0x40023800
 8001a48:	40007000 	.word	0x40007000
 8001a4c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a50:	4b1b      	ldr	r3, [pc, #108]	@ (8001ac0 <HAL_RCC_OscConfig+0x4ec>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	699b      	ldr	r3, [r3, #24]
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d028      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d121      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d11a      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a7a:	68fa      	ldr	r2, [r7, #12]
 8001a7c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001a80:	4013      	ands	r3, r2
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001a86:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d111      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a96:	085b      	lsrs	r3, r3, #1
 8001a98:	3b01      	subs	r3, #1
 8001a9a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d107      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aaa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d001      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e000      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3718      	adds	r7, #24
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	40023800 	.word	0x40023800

08001ac4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d101      	bne.n	8001ad8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e0cc      	b.n	8001c72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ad8:	4b68      	ldr	r3, [pc, #416]	@ (8001c7c <HAL_RCC_ClockConfig+0x1b8>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0307 	and.w	r3, r3, #7
 8001ae0:	683a      	ldr	r2, [r7, #0]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d90c      	bls.n	8001b00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ae6:	4b65      	ldr	r3, [pc, #404]	@ (8001c7c <HAL_RCC_ClockConfig+0x1b8>)
 8001ae8:	683a      	ldr	r2, [r7, #0]
 8001aea:	b2d2      	uxtb	r2, r2
 8001aec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aee:	4b63      	ldr	r3, [pc, #396]	@ (8001c7c <HAL_RCC_ClockConfig+0x1b8>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0307 	and.w	r3, r3, #7
 8001af6:	683a      	ldr	r2, [r7, #0]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d001      	beq.n	8001b00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e0b8      	b.n	8001c72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0302 	and.w	r3, r3, #2
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d020      	beq.n	8001b4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0304 	and.w	r3, r3, #4
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d005      	beq.n	8001b24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b18:	4b59      	ldr	r3, [pc, #356]	@ (8001c80 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	4a58      	ldr	r2, [pc, #352]	@ (8001c80 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001b22:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0308 	and.w	r3, r3, #8
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d005      	beq.n	8001b3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b30:	4b53      	ldr	r3, [pc, #332]	@ (8001c80 <HAL_RCC_ClockConfig+0x1bc>)
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	4a52      	ldr	r2, [pc, #328]	@ (8001c80 <HAL_RCC_ClockConfig+0x1bc>)
 8001b36:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001b3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b3c:	4b50      	ldr	r3, [pc, #320]	@ (8001c80 <HAL_RCC_ClockConfig+0x1bc>)
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	494d      	ldr	r1, [pc, #308]	@ (8001c80 <HAL_RCC_ClockConfig+0x1bc>)
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0301 	and.w	r3, r3, #1
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d044      	beq.n	8001be4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d107      	bne.n	8001b72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b62:	4b47      	ldr	r3, [pc, #284]	@ (8001c80 <HAL_RCC_ClockConfig+0x1bc>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d119      	bne.n	8001ba2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e07f      	b.n	8001c72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d003      	beq.n	8001b82 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b7e:	2b03      	cmp	r3, #3
 8001b80:	d107      	bne.n	8001b92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b82:	4b3f      	ldr	r3, [pc, #252]	@ (8001c80 <HAL_RCC_ClockConfig+0x1bc>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d109      	bne.n	8001ba2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e06f      	b.n	8001c72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b92:	4b3b      	ldr	r3, [pc, #236]	@ (8001c80 <HAL_RCC_ClockConfig+0x1bc>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d101      	bne.n	8001ba2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e067      	b.n	8001c72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ba2:	4b37      	ldr	r3, [pc, #220]	@ (8001c80 <HAL_RCC_ClockConfig+0x1bc>)
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	f023 0203 	bic.w	r2, r3, #3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	4934      	ldr	r1, [pc, #208]	@ (8001c80 <HAL_RCC_ClockConfig+0x1bc>)
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bb4:	f7ff fa5a 	bl	800106c <HAL_GetTick>
 8001bb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bba:	e00a      	b.n	8001bd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bbc:	f7ff fa56 	bl	800106c <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d901      	bls.n	8001bd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e04f      	b.n	8001c72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bd2:	4b2b      	ldr	r3, [pc, #172]	@ (8001c80 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	f003 020c 	and.w	r2, r3, #12
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d1eb      	bne.n	8001bbc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001be4:	4b25      	ldr	r3, [pc, #148]	@ (8001c7c <HAL_RCC_ClockConfig+0x1b8>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0307 	and.w	r3, r3, #7
 8001bec:	683a      	ldr	r2, [r7, #0]
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d20c      	bcs.n	8001c0c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bf2:	4b22      	ldr	r3, [pc, #136]	@ (8001c7c <HAL_RCC_ClockConfig+0x1b8>)
 8001bf4:	683a      	ldr	r2, [r7, #0]
 8001bf6:	b2d2      	uxtb	r2, r2
 8001bf8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bfa:	4b20      	ldr	r3, [pc, #128]	@ (8001c7c <HAL_RCC_ClockConfig+0x1b8>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0307 	and.w	r3, r3, #7
 8001c02:	683a      	ldr	r2, [r7, #0]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d001      	beq.n	8001c0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e032      	b.n	8001c72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0304 	and.w	r3, r3, #4
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d008      	beq.n	8001c2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c18:	4b19      	ldr	r3, [pc, #100]	@ (8001c80 <HAL_RCC_ClockConfig+0x1bc>)
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	4916      	ldr	r1, [pc, #88]	@ (8001c80 <HAL_RCC_ClockConfig+0x1bc>)
 8001c26:	4313      	orrs	r3, r2
 8001c28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0308 	and.w	r3, r3, #8
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d009      	beq.n	8001c4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c36:	4b12      	ldr	r3, [pc, #72]	@ (8001c80 <HAL_RCC_ClockConfig+0x1bc>)
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	691b      	ldr	r3, [r3, #16]
 8001c42:	00db      	lsls	r3, r3, #3
 8001c44:	490e      	ldr	r1, [pc, #56]	@ (8001c80 <HAL_RCC_ClockConfig+0x1bc>)
 8001c46:	4313      	orrs	r3, r2
 8001c48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c4a:	f000 f821 	bl	8001c90 <HAL_RCC_GetSysClockFreq>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	4b0b      	ldr	r3, [pc, #44]	@ (8001c80 <HAL_RCC_ClockConfig+0x1bc>)
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	091b      	lsrs	r3, r3, #4
 8001c56:	f003 030f 	and.w	r3, r3, #15
 8001c5a:	490a      	ldr	r1, [pc, #40]	@ (8001c84 <HAL_RCC_ClockConfig+0x1c0>)
 8001c5c:	5ccb      	ldrb	r3, [r1, r3]
 8001c5e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c62:	4a09      	ldr	r2, [pc, #36]	@ (8001c88 <HAL_RCC_ClockConfig+0x1c4>)
 8001c64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001c66:	4b09      	ldr	r3, [pc, #36]	@ (8001c8c <HAL_RCC_ClockConfig+0x1c8>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7ff f9ba 	bl	8000fe4 <HAL_InitTick>

  return HAL_OK;
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3710      	adds	r7, #16
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	40023c00 	.word	0x40023c00
 8001c80:	40023800 	.word	0x40023800
 8001c84:	08002da8 	.word	0x08002da8
 8001c88:	20000018 	.word	0x20000018
 8001c8c:	2000001c 	.word	0x2000001c

08001c90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c94:	b094      	sub	sp, #80	@ 0x50
 8001c96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ca8:	4b79      	ldr	r3, [pc, #484]	@ (8001e90 <HAL_RCC_GetSysClockFreq+0x200>)
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	f003 030c 	and.w	r3, r3, #12
 8001cb0:	2b08      	cmp	r3, #8
 8001cb2:	d00d      	beq.n	8001cd0 <HAL_RCC_GetSysClockFreq+0x40>
 8001cb4:	2b08      	cmp	r3, #8
 8001cb6:	f200 80e1 	bhi.w	8001e7c <HAL_RCC_GetSysClockFreq+0x1ec>
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d002      	beq.n	8001cc4 <HAL_RCC_GetSysClockFreq+0x34>
 8001cbe:	2b04      	cmp	r3, #4
 8001cc0:	d003      	beq.n	8001cca <HAL_RCC_GetSysClockFreq+0x3a>
 8001cc2:	e0db      	b.n	8001e7c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001cc4:	4b73      	ldr	r3, [pc, #460]	@ (8001e94 <HAL_RCC_GetSysClockFreq+0x204>)
 8001cc6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001cc8:	e0db      	b.n	8001e82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001cca:	4b73      	ldr	r3, [pc, #460]	@ (8001e98 <HAL_RCC_GetSysClockFreq+0x208>)
 8001ccc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001cce:	e0d8      	b.n	8001e82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cd0:	4b6f      	ldr	r3, [pc, #444]	@ (8001e90 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001cd8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cda:	4b6d      	ldr	r3, [pc, #436]	@ (8001e90 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d063      	beq.n	8001dae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ce6:	4b6a      	ldr	r3, [pc, #424]	@ (8001e90 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	099b      	lsrs	r3, r3, #6
 8001cec:	2200      	movs	r2, #0
 8001cee:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001cf0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001cf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001cf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cf8:	633b      	str	r3, [r7, #48]	@ 0x30
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	637b      	str	r3, [r7, #52]	@ 0x34
 8001cfe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001d02:	4622      	mov	r2, r4
 8001d04:	462b      	mov	r3, r5
 8001d06:	f04f 0000 	mov.w	r0, #0
 8001d0a:	f04f 0100 	mov.w	r1, #0
 8001d0e:	0159      	lsls	r1, r3, #5
 8001d10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d14:	0150      	lsls	r0, r2, #5
 8001d16:	4602      	mov	r2, r0
 8001d18:	460b      	mov	r3, r1
 8001d1a:	4621      	mov	r1, r4
 8001d1c:	1a51      	subs	r1, r2, r1
 8001d1e:	6139      	str	r1, [r7, #16]
 8001d20:	4629      	mov	r1, r5
 8001d22:	eb63 0301 	sbc.w	r3, r3, r1
 8001d26:	617b      	str	r3, [r7, #20]
 8001d28:	f04f 0200 	mov.w	r2, #0
 8001d2c:	f04f 0300 	mov.w	r3, #0
 8001d30:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001d34:	4659      	mov	r1, fp
 8001d36:	018b      	lsls	r3, r1, #6
 8001d38:	4651      	mov	r1, sl
 8001d3a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d3e:	4651      	mov	r1, sl
 8001d40:	018a      	lsls	r2, r1, #6
 8001d42:	4651      	mov	r1, sl
 8001d44:	ebb2 0801 	subs.w	r8, r2, r1
 8001d48:	4659      	mov	r1, fp
 8001d4a:	eb63 0901 	sbc.w	r9, r3, r1
 8001d4e:	f04f 0200 	mov.w	r2, #0
 8001d52:	f04f 0300 	mov.w	r3, #0
 8001d56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d62:	4690      	mov	r8, r2
 8001d64:	4699      	mov	r9, r3
 8001d66:	4623      	mov	r3, r4
 8001d68:	eb18 0303 	adds.w	r3, r8, r3
 8001d6c:	60bb      	str	r3, [r7, #8]
 8001d6e:	462b      	mov	r3, r5
 8001d70:	eb49 0303 	adc.w	r3, r9, r3
 8001d74:	60fb      	str	r3, [r7, #12]
 8001d76:	f04f 0200 	mov.w	r2, #0
 8001d7a:	f04f 0300 	mov.w	r3, #0
 8001d7e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001d82:	4629      	mov	r1, r5
 8001d84:	024b      	lsls	r3, r1, #9
 8001d86:	4621      	mov	r1, r4
 8001d88:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001d8c:	4621      	mov	r1, r4
 8001d8e:	024a      	lsls	r2, r1, #9
 8001d90:	4610      	mov	r0, r2
 8001d92:	4619      	mov	r1, r3
 8001d94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d96:	2200      	movs	r2, #0
 8001d98:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d9a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001d9c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001da0:	f7fe fa18 	bl	80001d4 <__aeabi_uldivmod>
 8001da4:	4602      	mov	r2, r0
 8001da6:	460b      	mov	r3, r1
 8001da8:	4613      	mov	r3, r2
 8001daa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001dac:	e058      	b.n	8001e60 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dae:	4b38      	ldr	r3, [pc, #224]	@ (8001e90 <HAL_RCC_GetSysClockFreq+0x200>)
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	099b      	lsrs	r3, r3, #6
 8001db4:	2200      	movs	r2, #0
 8001db6:	4618      	mov	r0, r3
 8001db8:	4611      	mov	r1, r2
 8001dba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001dbe:	623b      	str	r3, [r7, #32]
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001dc4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001dc8:	4642      	mov	r2, r8
 8001dca:	464b      	mov	r3, r9
 8001dcc:	f04f 0000 	mov.w	r0, #0
 8001dd0:	f04f 0100 	mov.w	r1, #0
 8001dd4:	0159      	lsls	r1, r3, #5
 8001dd6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001dda:	0150      	lsls	r0, r2, #5
 8001ddc:	4602      	mov	r2, r0
 8001dde:	460b      	mov	r3, r1
 8001de0:	4641      	mov	r1, r8
 8001de2:	ebb2 0a01 	subs.w	sl, r2, r1
 8001de6:	4649      	mov	r1, r9
 8001de8:	eb63 0b01 	sbc.w	fp, r3, r1
 8001dec:	f04f 0200 	mov.w	r2, #0
 8001df0:	f04f 0300 	mov.w	r3, #0
 8001df4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001df8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001dfc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001e00:	ebb2 040a 	subs.w	r4, r2, sl
 8001e04:	eb63 050b 	sbc.w	r5, r3, fp
 8001e08:	f04f 0200 	mov.w	r2, #0
 8001e0c:	f04f 0300 	mov.w	r3, #0
 8001e10:	00eb      	lsls	r3, r5, #3
 8001e12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e16:	00e2      	lsls	r2, r4, #3
 8001e18:	4614      	mov	r4, r2
 8001e1a:	461d      	mov	r5, r3
 8001e1c:	4643      	mov	r3, r8
 8001e1e:	18e3      	adds	r3, r4, r3
 8001e20:	603b      	str	r3, [r7, #0]
 8001e22:	464b      	mov	r3, r9
 8001e24:	eb45 0303 	adc.w	r3, r5, r3
 8001e28:	607b      	str	r3, [r7, #4]
 8001e2a:	f04f 0200 	mov.w	r2, #0
 8001e2e:	f04f 0300 	mov.w	r3, #0
 8001e32:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e36:	4629      	mov	r1, r5
 8001e38:	028b      	lsls	r3, r1, #10
 8001e3a:	4621      	mov	r1, r4
 8001e3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e40:	4621      	mov	r1, r4
 8001e42:	028a      	lsls	r2, r1, #10
 8001e44:	4610      	mov	r0, r2
 8001e46:	4619      	mov	r1, r3
 8001e48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	61bb      	str	r3, [r7, #24]
 8001e4e:	61fa      	str	r2, [r7, #28]
 8001e50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e54:	f7fe f9be 	bl	80001d4 <__aeabi_uldivmod>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	460b      	mov	r3, r1
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001e60:	4b0b      	ldr	r3, [pc, #44]	@ (8001e90 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	0c1b      	lsrs	r3, r3, #16
 8001e66:	f003 0303 	and.w	r3, r3, #3
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001e70:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001e72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e78:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e7a:	e002      	b.n	8001e82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e7c:	4b05      	ldr	r3, [pc, #20]	@ (8001e94 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e7e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3750      	adds	r7, #80	@ 0x50
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e8e:	bf00      	nop
 8001e90:	40023800 	.word	0x40023800
 8001e94:	00f42400 	.word	0x00f42400
 8001e98:	007a1200 	.word	0x007a1200

08001e9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ea0:	4b03      	ldr	r3, [pc, #12]	@ (8001eb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	20000018 	.word	0x20000018

08001eb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001eb8:	f7ff fff0 	bl	8001e9c <HAL_RCC_GetHCLKFreq>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	4b05      	ldr	r3, [pc, #20]	@ (8001ed4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	0a9b      	lsrs	r3, r3, #10
 8001ec4:	f003 0307 	and.w	r3, r3, #7
 8001ec8:	4903      	ldr	r1, [pc, #12]	@ (8001ed8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001eca:	5ccb      	ldrb	r3, [r1, r3]
 8001ecc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	40023800 	.word	0x40023800
 8001ed8:	08002db8 	.word	0x08002db8

08001edc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ee0:	f7ff ffdc 	bl	8001e9c <HAL_RCC_GetHCLKFreq>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	4b05      	ldr	r3, [pc, #20]	@ (8001efc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	0b5b      	lsrs	r3, r3, #13
 8001eec:	f003 0307 	and.w	r3, r3, #7
 8001ef0:	4903      	ldr	r1, [pc, #12]	@ (8001f00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ef2:	5ccb      	ldrb	r3, [r1, r3]
 8001ef4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	40023800 	.word	0x40023800
 8001f00:	08002db8 	.word	0x08002db8

08001f04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d101      	bne.n	8001f16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e07b      	b.n	800200e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d108      	bne.n	8001f30 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001f26:	d009      	beq.n	8001f3c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	61da      	str	r2, [r3, #28]
 8001f2e:	e005      	b.n	8001f3c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2200      	movs	r2, #0
 8001f34:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d106      	bne.n	8001f5c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2200      	movs	r2, #0
 8001f52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f7fe ff26 	bl	8000da8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2202      	movs	r2, #2
 8001f60:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001f72:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001f84:	431a      	orrs	r2, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f8e:	431a      	orrs	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	691b      	ldr	r3, [r3, #16]
 8001f94:	f003 0302 	and.w	r3, r3, #2
 8001f98:	431a      	orrs	r2, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	695b      	ldr	r3, [r3, #20]
 8001f9e:	f003 0301 	and.w	r3, r3, #1
 8001fa2:	431a      	orrs	r2, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	699b      	ldr	r3, [r3, #24]
 8001fa8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001fac:	431a      	orrs	r2, r3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	69db      	ldr	r3, [r3, #28]
 8001fb2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001fb6:	431a      	orrs	r2, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6a1b      	ldr	r3, [r3, #32]
 8001fbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fc0:	ea42 0103 	orr.w	r1, r2, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fc8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	430a      	orrs	r2, r1
 8001fd2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	699b      	ldr	r3, [r3, #24]
 8001fd8:	0c1b      	lsrs	r3, r3, #16
 8001fda:	f003 0104 	and.w	r1, r3, #4
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fe2:	f003 0210 	and.w	r2, r3, #16
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	430a      	orrs	r2, r1
 8001fec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	69da      	ldr	r2, [r3, #28]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ffc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2201      	movs	r2, #1
 8002008:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}

08002016 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	b08a      	sub	sp, #40	@ 0x28
 800201a:	af00      	add	r7, sp, #0
 800201c:	60f8      	str	r0, [r7, #12]
 800201e:	60b9      	str	r1, [r7, #8]
 8002020:	607a      	str	r2, [r7, #4]
 8002022:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002024:	2301      	movs	r3, #1
 8002026:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002028:	f7ff f820 	bl	800106c <HAL_GetTick>
 800202c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002034:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800203c:	887b      	ldrh	r3, [r7, #2]
 800203e:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002040:	7ffb      	ldrb	r3, [r7, #31]
 8002042:	2b01      	cmp	r3, #1
 8002044:	d00c      	beq.n	8002060 <HAL_SPI_TransmitReceive+0x4a>
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800204c:	d106      	bne.n	800205c <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d102      	bne.n	800205c <HAL_SPI_TransmitReceive+0x46>
 8002056:	7ffb      	ldrb	r3, [r7, #31]
 8002058:	2b04      	cmp	r3, #4
 800205a:	d001      	beq.n	8002060 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 800205c:	2302      	movs	r3, #2
 800205e:	e17f      	b.n	8002360 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d005      	beq.n	8002072 <HAL_SPI_TransmitReceive+0x5c>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d002      	beq.n	8002072 <HAL_SPI_TransmitReceive+0x5c>
 800206c:	887b      	ldrh	r3, [r7, #2]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d101      	bne.n	8002076 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e174      	b.n	8002360 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800207c:	2b01      	cmp	r3, #1
 800207e:	d101      	bne.n	8002084 <HAL_SPI_TransmitReceive+0x6e>
 8002080:	2302      	movs	r3, #2
 8002082:	e16d      	b.n	8002360 <HAL_SPI_TransmitReceive+0x34a>
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2201      	movs	r2, #1
 8002088:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002092:	b2db      	uxtb	r3, r3
 8002094:	2b04      	cmp	r3, #4
 8002096:	d003      	beq.n	80020a0 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2205      	movs	r2, #5
 800209c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2200      	movs	r2, #0
 80020a4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	887a      	ldrh	r2, [r7, #2]
 80020b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	887a      	ldrh	r2, [r7, #2]
 80020b6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	68ba      	ldr	r2, [r7, #8]
 80020bc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	887a      	ldrh	r2, [r7, #2]
 80020c2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	887a      	ldrh	r2, [r7, #2]
 80020c8:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2200      	movs	r2, #0
 80020ce:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2200      	movs	r2, #0
 80020d4:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020e0:	2b40      	cmp	r3, #64	@ 0x40
 80020e2:	d007      	beq.n	80020f4 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80020f2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80020fc:	d17e      	bne.n	80021fc <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d002      	beq.n	800210c <HAL_SPI_TransmitReceive+0xf6>
 8002106:	8afb      	ldrh	r3, [r7, #22]
 8002108:	2b01      	cmp	r3, #1
 800210a:	d16c      	bne.n	80021e6 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002110:	881a      	ldrh	r2, [r3, #0]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800211c:	1c9a      	adds	r2, r3, #2
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002126:	b29b      	uxth	r3, r3
 8002128:	3b01      	subs	r3, #1
 800212a:	b29a      	uxth	r2, r3
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002130:	e059      	b.n	80021e6 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f003 0302 	and.w	r3, r3, #2
 800213c:	2b02      	cmp	r3, #2
 800213e:	d11b      	bne.n	8002178 <HAL_SPI_TransmitReceive+0x162>
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002144:	b29b      	uxth	r3, r3
 8002146:	2b00      	cmp	r3, #0
 8002148:	d016      	beq.n	8002178 <HAL_SPI_TransmitReceive+0x162>
 800214a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800214c:	2b01      	cmp	r3, #1
 800214e:	d113      	bne.n	8002178 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002154:	881a      	ldrh	r2, [r3, #0]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002160:	1c9a      	adds	r2, r3, #2
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800216a:	b29b      	uxth	r3, r3
 800216c:	3b01      	subs	r3, #1
 800216e:	b29a      	uxth	r2, r3
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002174:	2300      	movs	r3, #0
 8002176:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	2b01      	cmp	r3, #1
 8002184:	d119      	bne.n	80021ba <HAL_SPI_TransmitReceive+0x1a4>
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800218a:	b29b      	uxth	r3, r3
 800218c:	2b00      	cmp	r3, #0
 800218e:	d014      	beq.n	80021ba <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	68da      	ldr	r2, [r3, #12]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800219a:	b292      	uxth	r2, r2
 800219c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021a2:	1c9a      	adds	r2, r3, #2
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80021ac:	b29b      	uxth	r3, r3
 80021ae:	3b01      	subs	r3, #1
 80021b0:	b29a      	uxth	r2, r3
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80021b6:	2301      	movs	r3, #1
 80021b8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80021ba:	f7fe ff57 	bl	800106c <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	6a3b      	ldr	r3, [r7, #32]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d80d      	bhi.n	80021e6 <HAL_SPI_TransmitReceive+0x1d0>
 80021ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021d0:	d009      	beq.n	80021e6 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2201      	movs	r2, #1
 80021d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e0bc      	b.n	8002360 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d1a0      	bne.n	8002132 <HAL_SPI_TransmitReceive+0x11c>
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d19b      	bne.n	8002132 <HAL_SPI_TransmitReceive+0x11c>
 80021fa:	e082      	b.n	8002302 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d002      	beq.n	800220a <HAL_SPI_TransmitReceive+0x1f4>
 8002204:	8afb      	ldrh	r3, [r7, #22]
 8002206:	2b01      	cmp	r3, #1
 8002208:	d171      	bne.n	80022ee <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	330c      	adds	r3, #12
 8002214:	7812      	ldrb	r2, [r2, #0]
 8002216:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800221c:	1c5a      	adds	r2, r3, #1
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002226:	b29b      	uxth	r3, r3
 8002228:	3b01      	subs	r3, #1
 800222a:	b29a      	uxth	r2, r3
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002230:	e05d      	b.n	80022ee <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	f003 0302 	and.w	r3, r3, #2
 800223c:	2b02      	cmp	r3, #2
 800223e:	d11c      	bne.n	800227a <HAL_SPI_TransmitReceive+0x264>
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002244:	b29b      	uxth	r3, r3
 8002246:	2b00      	cmp	r3, #0
 8002248:	d017      	beq.n	800227a <HAL_SPI_TransmitReceive+0x264>
 800224a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800224c:	2b01      	cmp	r3, #1
 800224e:	d114      	bne.n	800227a <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	330c      	adds	r3, #12
 800225a:	7812      	ldrb	r2, [r2, #0]
 800225c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002262:	1c5a      	adds	r2, r3, #1
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800226c:	b29b      	uxth	r3, r3
 800226e:	3b01      	subs	r3, #1
 8002270:	b29a      	uxth	r2, r3
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002276:	2300      	movs	r3, #0
 8002278:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	f003 0301 	and.w	r3, r3, #1
 8002284:	2b01      	cmp	r3, #1
 8002286:	d119      	bne.n	80022bc <HAL_SPI_TransmitReceive+0x2a6>
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800228c:	b29b      	uxth	r3, r3
 800228e:	2b00      	cmp	r3, #0
 8002290:	d014      	beq.n	80022bc <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	68da      	ldr	r2, [r3, #12]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800229c:	b2d2      	uxtb	r2, r2
 800229e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022a4:	1c5a      	adds	r2, r3, #1
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	3b01      	subs	r3, #1
 80022b2:	b29a      	uxth	r2, r3
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80022b8:	2301      	movs	r3, #1
 80022ba:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80022bc:	f7fe fed6 	bl	800106c <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	6a3b      	ldr	r3, [r7, #32]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d803      	bhi.n	80022d4 <HAL_SPI_TransmitReceive+0x2be>
 80022cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022d2:	d102      	bne.n	80022da <HAL_SPI_TransmitReceive+0x2c4>
 80022d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d109      	bne.n	80022ee <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2201      	movs	r2, #1
 80022de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2200      	movs	r2, #0
 80022e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e038      	b.n	8002360 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d19c      	bne.n	8002232 <HAL_SPI_TransmitReceive+0x21c>
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d197      	bne.n	8002232 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002302:	6a3a      	ldr	r2, [r7, #32]
 8002304:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002306:	68f8      	ldr	r0, [r7, #12]
 8002308:	f000 f8b6 	bl	8002478 <SPI_EndRxTxTransaction>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d008      	beq.n	8002324 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2220      	movs	r2, #32
 8002316:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2200      	movs	r2, #0
 800231c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e01d      	b.n	8002360 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d10a      	bne.n	8002342 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800232c:	2300      	movs	r3, #0
 800232e:	613b      	str	r3, [r7, #16]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	613b      	str	r3, [r7, #16]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	613b      	str	r3, [r7, #16]
 8002340:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2201      	movs	r2, #1
 8002346:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2200      	movs	r2, #0
 800234e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e000      	b.n	8002360 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800235e:	2300      	movs	r3, #0
  }
}
 8002360:	4618      	mov	r0, r3
 8002362:	3728      	adds	r7, #40	@ 0x28
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}

08002368 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b088      	sub	sp, #32
 800236c:	af00      	add	r7, sp, #0
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	603b      	str	r3, [r7, #0]
 8002374:	4613      	mov	r3, r2
 8002376:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002378:	f7fe fe78 	bl	800106c <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002380:	1a9b      	subs	r3, r3, r2
 8002382:	683a      	ldr	r2, [r7, #0]
 8002384:	4413      	add	r3, r2
 8002386:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002388:	f7fe fe70 	bl	800106c <HAL_GetTick>
 800238c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800238e:	4b39      	ldr	r3, [pc, #228]	@ (8002474 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	015b      	lsls	r3, r3, #5
 8002394:	0d1b      	lsrs	r3, r3, #20
 8002396:	69fa      	ldr	r2, [r7, #28]
 8002398:	fb02 f303 	mul.w	r3, r2, r3
 800239c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800239e:	e054      	b.n	800244a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023a6:	d050      	beq.n	800244a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80023a8:	f7fe fe60 	bl	800106c <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	69fa      	ldr	r2, [r7, #28]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d902      	bls.n	80023be <SPI_WaitFlagStateUntilTimeout+0x56>
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d13d      	bne.n	800243a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	685a      	ldr	r2, [r3, #4]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80023cc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80023d6:	d111      	bne.n	80023fc <SPI_WaitFlagStateUntilTimeout+0x94>
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80023e0:	d004      	beq.n	80023ec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023ea:	d107      	bne.n	80023fc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80023fa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002400:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002404:	d10f      	bne.n	8002426 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002414:	601a      	str	r2, [r3, #0]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002424:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2201      	movs	r2, #1
 800242a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e017      	b.n	800246a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d101      	bne.n	8002444 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002440:	2300      	movs	r3, #0
 8002442:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	3b01      	subs	r3, #1
 8002448:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	689a      	ldr	r2, [r3, #8]
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	4013      	ands	r3, r2
 8002454:	68ba      	ldr	r2, [r7, #8]
 8002456:	429a      	cmp	r2, r3
 8002458:	bf0c      	ite	eq
 800245a:	2301      	moveq	r3, #1
 800245c:	2300      	movne	r3, #0
 800245e:	b2db      	uxtb	r3, r3
 8002460:	461a      	mov	r2, r3
 8002462:	79fb      	ldrb	r3, [r7, #7]
 8002464:	429a      	cmp	r2, r3
 8002466:	d19b      	bne.n	80023a0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	3720      	adds	r7, #32
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	20000018 	.word	0x20000018

08002478 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b088      	sub	sp, #32
 800247c:	af02      	add	r7, sp, #8
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	9300      	str	r3, [sp, #0]
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	2201      	movs	r2, #1
 800248c:	2102      	movs	r1, #2
 800248e:	68f8      	ldr	r0, [r7, #12]
 8002490:	f7ff ff6a 	bl	8002368 <SPI_WaitFlagStateUntilTimeout>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d007      	beq.n	80024aa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800249e:	f043 0220 	orr.w	r2, r3, #32
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e032      	b.n	8002510 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80024aa:	4b1b      	ldr	r3, [pc, #108]	@ (8002518 <SPI_EndRxTxTransaction+0xa0>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a1b      	ldr	r2, [pc, #108]	@ (800251c <SPI_EndRxTxTransaction+0xa4>)
 80024b0:	fba2 2303 	umull	r2, r3, r2, r3
 80024b4:	0d5b      	lsrs	r3, r3, #21
 80024b6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80024ba:	fb02 f303 	mul.w	r3, r2, r3
 80024be:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80024c8:	d112      	bne.n	80024f0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	9300      	str	r3, [sp, #0]
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	2200      	movs	r2, #0
 80024d2:	2180      	movs	r1, #128	@ 0x80
 80024d4:	68f8      	ldr	r0, [r7, #12]
 80024d6:	f7ff ff47 	bl	8002368 <SPI_WaitFlagStateUntilTimeout>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d016      	beq.n	800250e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024e4:	f043 0220 	orr.w	r2, r3, #32
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e00f      	b.n	8002510 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d00a      	beq.n	800250c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	3b01      	subs	r3, #1
 80024fa:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002506:	2b80      	cmp	r3, #128	@ 0x80
 8002508:	d0f2      	beq.n	80024f0 <SPI_EndRxTxTransaction+0x78>
 800250a:	e000      	b.n	800250e <SPI_EndRxTxTransaction+0x96>
        break;
 800250c:	bf00      	nop
  }

  return HAL_OK;
 800250e:	2300      	movs	r3, #0
}
 8002510:	4618      	mov	r0, r3
 8002512:	3718      	adds	r7, #24
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	20000018 	.word	0x20000018
 800251c:	165e9f81 	.word	0x165e9f81

08002520 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d101      	bne.n	8002532 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e042      	b.n	80025b8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b00      	cmp	r3, #0
 800253c:	d106      	bne.n	800254c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f7fe fc76 	bl	8000e38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2224      	movs	r2, #36	@ 0x24
 8002550:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	68da      	ldr	r2, [r3, #12]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002562:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f000 f973 	bl	8002850 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	691a      	ldr	r2, [r3, #16]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002578:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	695a      	ldr	r2, [r3, #20]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002588:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	68da      	ldr	r2, [r3, #12]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002598:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2200      	movs	r2, #0
 800259e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2220      	movs	r2, #32
 80025a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2220      	movs	r2, #32
 80025ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80025b6:	2300      	movs	r3, #0
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3708      	adds	r7, #8
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b08a      	sub	sp, #40	@ 0x28
 80025c4:	af02      	add	r7, sp, #8
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	603b      	str	r3, [r7, #0]
 80025cc:	4613      	mov	r3, r2
 80025ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80025d0:	2300      	movs	r3, #0
 80025d2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	2b20      	cmp	r3, #32
 80025de:	d175      	bne.n	80026cc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d002      	beq.n	80025ec <HAL_UART_Transmit+0x2c>
 80025e6:	88fb      	ldrh	r3, [r7, #6]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d101      	bne.n	80025f0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e06e      	b.n	80026ce <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2200      	movs	r2, #0
 80025f4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2221      	movs	r2, #33	@ 0x21
 80025fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80025fe:	f7fe fd35 	bl	800106c <HAL_GetTick>
 8002602:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	88fa      	ldrh	r2, [r7, #6]
 8002608:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	88fa      	ldrh	r2, [r7, #6]
 800260e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002618:	d108      	bne.n	800262c <HAL_UART_Transmit+0x6c>
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	691b      	ldr	r3, [r3, #16]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d104      	bne.n	800262c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002622:	2300      	movs	r3, #0
 8002624:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	61bb      	str	r3, [r7, #24]
 800262a:	e003      	b.n	8002634 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002630:	2300      	movs	r3, #0
 8002632:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002634:	e02e      	b.n	8002694 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	9300      	str	r3, [sp, #0]
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	2200      	movs	r2, #0
 800263e:	2180      	movs	r1, #128	@ 0x80
 8002640:	68f8      	ldr	r0, [r7, #12]
 8002642:	f000 f848 	bl	80026d6 <UART_WaitOnFlagUntilTimeout>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d005      	beq.n	8002658 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2220      	movs	r2, #32
 8002650:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002654:	2303      	movs	r3, #3
 8002656:	e03a      	b.n	80026ce <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d10b      	bne.n	8002676 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	881b      	ldrh	r3, [r3, #0]
 8002662:	461a      	mov	r2, r3
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800266c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	3302      	adds	r3, #2
 8002672:	61bb      	str	r3, [r7, #24]
 8002674:	e007      	b.n	8002686 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	781a      	ldrb	r2, [r3, #0]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	3301      	adds	r3, #1
 8002684:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800268a:	b29b      	uxth	r3, r3
 800268c:	3b01      	subs	r3, #1
 800268e:	b29a      	uxth	r2, r3
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002698:	b29b      	uxth	r3, r3
 800269a:	2b00      	cmp	r3, #0
 800269c:	d1cb      	bne.n	8002636 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	9300      	str	r3, [sp, #0]
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	2200      	movs	r2, #0
 80026a6:	2140      	movs	r1, #64	@ 0x40
 80026a8:	68f8      	ldr	r0, [r7, #12]
 80026aa:	f000 f814 	bl	80026d6 <UART_WaitOnFlagUntilTimeout>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d005      	beq.n	80026c0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2220      	movs	r2, #32
 80026b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e006      	b.n	80026ce <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2220      	movs	r2, #32
 80026c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80026c8:	2300      	movs	r3, #0
 80026ca:	e000      	b.n	80026ce <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80026cc:	2302      	movs	r3, #2
  }
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3720      	adds	r7, #32
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}

080026d6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80026d6:	b580      	push	{r7, lr}
 80026d8:	b086      	sub	sp, #24
 80026da:	af00      	add	r7, sp, #0
 80026dc:	60f8      	str	r0, [r7, #12]
 80026de:	60b9      	str	r1, [r7, #8]
 80026e0:	603b      	str	r3, [r7, #0]
 80026e2:	4613      	mov	r3, r2
 80026e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026e6:	e03b      	b.n	8002760 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026e8:	6a3b      	ldr	r3, [r7, #32]
 80026ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026ee:	d037      	beq.n	8002760 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026f0:	f7fe fcbc 	bl	800106c <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	6a3a      	ldr	r2, [r7, #32]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d302      	bcc.n	8002706 <UART_WaitOnFlagUntilTimeout+0x30>
 8002700:	6a3b      	ldr	r3, [r7, #32]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d101      	bne.n	800270a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e03a      	b.n	8002780 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	f003 0304 	and.w	r3, r3, #4
 8002714:	2b00      	cmp	r3, #0
 8002716:	d023      	beq.n	8002760 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	2b80      	cmp	r3, #128	@ 0x80
 800271c:	d020      	beq.n	8002760 <UART_WaitOnFlagUntilTimeout+0x8a>
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	2b40      	cmp	r3, #64	@ 0x40
 8002722:	d01d      	beq.n	8002760 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0308 	and.w	r3, r3, #8
 800272e:	2b08      	cmp	r3, #8
 8002730:	d116      	bne.n	8002760 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002732:	2300      	movs	r3, #0
 8002734:	617b      	str	r3, [r7, #20]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	617b      	str	r3, [r7, #20]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	617b      	str	r3, [r7, #20]
 8002746:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002748:	68f8      	ldr	r0, [r7, #12]
 800274a:	f000 f81d 	bl	8002788 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2208      	movs	r2, #8
 8002752:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2200      	movs	r2, #0
 8002758:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e00f      	b.n	8002780 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	4013      	ands	r3, r2
 800276a:	68ba      	ldr	r2, [r7, #8]
 800276c:	429a      	cmp	r2, r3
 800276e:	bf0c      	ite	eq
 8002770:	2301      	moveq	r3, #1
 8002772:	2300      	movne	r3, #0
 8002774:	b2db      	uxtb	r3, r3
 8002776:	461a      	mov	r2, r3
 8002778:	79fb      	ldrb	r3, [r7, #7]
 800277a:	429a      	cmp	r2, r3
 800277c:	d0b4      	beq.n	80026e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800277e:	2300      	movs	r3, #0
}
 8002780:	4618      	mov	r0, r3
 8002782:	3718      	adds	r7, #24
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}

08002788 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002788:	b480      	push	{r7}
 800278a:	b095      	sub	sp, #84	@ 0x54
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	330c      	adds	r3, #12
 8002796:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002798:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800279a:	e853 3f00 	ldrex	r3, [r3]
 800279e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80027a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027a2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80027a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	330c      	adds	r3, #12
 80027ae:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80027b0:	643a      	str	r2, [r7, #64]	@ 0x40
 80027b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027b4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80027b6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80027b8:	e841 2300 	strex	r3, r2, [r1]
 80027bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80027be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d1e5      	bne.n	8002790 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	3314      	adds	r3, #20
 80027ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027cc:	6a3b      	ldr	r3, [r7, #32]
 80027ce:	e853 3f00 	ldrex	r3, [r3]
 80027d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	f023 0301 	bic.w	r3, r3, #1
 80027da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	3314      	adds	r3, #20
 80027e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80027e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80027e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80027ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80027ec:	e841 2300 	strex	r3, r2, [r1]
 80027f0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80027f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d1e5      	bne.n	80027c4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d119      	bne.n	8002834 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	330c      	adds	r3, #12
 8002806:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	e853 3f00 	ldrex	r3, [r3]
 800280e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	f023 0310 	bic.w	r3, r3, #16
 8002816:	647b      	str	r3, [r7, #68]	@ 0x44
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	330c      	adds	r3, #12
 800281e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002820:	61ba      	str	r2, [r7, #24]
 8002822:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002824:	6979      	ldr	r1, [r7, #20]
 8002826:	69ba      	ldr	r2, [r7, #24]
 8002828:	e841 2300 	strex	r3, r2, [r1]
 800282c:	613b      	str	r3, [r7, #16]
   return(result);
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d1e5      	bne.n	8002800 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2220      	movs	r2, #32
 8002838:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002842:	bf00      	nop
 8002844:	3754      	adds	r7, #84	@ 0x54
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
	...

08002850 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002850:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002854:	b0c0      	sub	sp, #256	@ 0x100
 8002856:	af00      	add	r7, sp, #0
 8002858:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800285c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	691b      	ldr	r3, [r3, #16]
 8002864:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800286c:	68d9      	ldr	r1, [r3, #12]
 800286e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	ea40 0301 	orr.w	r3, r0, r1
 8002878:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800287a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800287e:	689a      	ldr	r2, [r3, #8]
 8002880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002884:	691b      	ldr	r3, [r3, #16]
 8002886:	431a      	orrs	r2, r3
 8002888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800288c:	695b      	ldr	r3, [r3, #20]
 800288e:	431a      	orrs	r2, r3
 8002890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002894:	69db      	ldr	r3, [r3, #28]
 8002896:	4313      	orrs	r3, r2
 8002898:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800289c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80028a8:	f021 010c 	bic.w	r1, r1, #12
 80028ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80028b6:	430b      	orrs	r3, r1
 80028b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80028ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	695b      	ldr	r3, [r3, #20]
 80028c2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80028c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028ca:	6999      	ldr	r1, [r3, #24]
 80028cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	ea40 0301 	orr.w	r3, r0, r1
 80028d6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80028d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	4b8f      	ldr	r3, [pc, #572]	@ (8002b1c <UART_SetConfig+0x2cc>)
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d005      	beq.n	80028f0 <UART_SetConfig+0xa0>
 80028e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	4b8d      	ldr	r3, [pc, #564]	@ (8002b20 <UART_SetConfig+0x2d0>)
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d104      	bne.n	80028fa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80028f0:	f7ff faf4 	bl	8001edc <HAL_RCC_GetPCLK2Freq>
 80028f4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80028f8:	e003      	b.n	8002902 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80028fa:	f7ff fadb 	bl	8001eb4 <HAL_RCC_GetPCLK1Freq>
 80028fe:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002902:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002906:	69db      	ldr	r3, [r3, #28]
 8002908:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800290c:	f040 810c 	bne.w	8002b28 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002910:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002914:	2200      	movs	r2, #0
 8002916:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800291a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800291e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002922:	4622      	mov	r2, r4
 8002924:	462b      	mov	r3, r5
 8002926:	1891      	adds	r1, r2, r2
 8002928:	65b9      	str	r1, [r7, #88]	@ 0x58
 800292a:	415b      	adcs	r3, r3
 800292c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800292e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002932:	4621      	mov	r1, r4
 8002934:	eb12 0801 	adds.w	r8, r2, r1
 8002938:	4629      	mov	r1, r5
 800293a:	eb43 0901 	adc.w	r9, r3, r1
 800293e:	f04f 0200 	mov.w	r2, #0
 8002942:	f04f 0300 	mov.w	r3, #0
 8002946:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800294a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800294e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002952:	4690      	mov	r8, r2
 8002954:	4699      	mov	r9, r3
 8002956:	4623      	mov	r3, r4
 8002958:	eb18 0303 	adds.w	r3, r8, r3
 800295c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002960:	462b      	mov	r3, r5
 8002962:	eb49 0303 	adc.w	r3, r9, r3
 8002966:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800296a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002976:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800297a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800297e:	460b      	mov	r3, r1
 8002980:	18db      	adds	r3, r3, r3
 8002982:	653b      	str	r3, [r7, #80]	@ 0x50
 8002984:	4613      	mov	r3, r2
 8002986:	eb42 0303 	adc.w	r3, r2, r3
 800298a:	657b      	str	r3, [r7, #84]	@ 0x54
 800298c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002990:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002994:	f7fd fc1e 	bl	80001d4 <__aeabi_uldivmod>
 8002998:	4602      	mov	r2, r0
 800299a:	460b      	mov	r3, r1
 800299c:	4b61      	ldr	r3, [pc, #388]	@ (8002b24 <UART_SetConfig+0x2d4>)
 800299e:	fba3 2302 	umull	r2, r3, r3, r2
 80029a2:	095b      	lsrs	r3, r3, #5
 80029a4:	011c      	lsls	r4, r3, #4
 80029a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80029aa:	2200      	movs	r2, #0
 80029ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80029b0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80029b4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80029b8:	4642      	mov	r2, r8
 80029ba:	464b      	mov	r3, r9
 80029bc:	1891      	adds	r1, r2, r2
 80029be:	64b9      	str	r1, [r7, #72]	@ 0x48
 80029c0:	415b      	adcs	r3, r3
 80029c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80029c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80029c8:	4641      	mov	r1, r8
 80029ca:	eb12 0a01 	adds.w	sl, r2, r1
 80029ce:	4649      	mov	r1, r9
 80029d0:	eb43 0b01 	adc.w	fp, r3, r1
 80029d4:	f04f 0200 	mov.w	r2, #0
 80029d8:	f04f 0300 	mov.w	r3, #0
 80029dc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80029e0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80029e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80029e8:	4692      	mov	sl, r2
 80029ea:	469b      	mov	fp, r3
 80029ec:	4643      	mov	r3, r8
 80029ee:	eb1a 0303 	adds.w	r3, sl, r3
 80029f2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80029f6:	464b      	mov	r3, r9
 80029f8:	eb4b 0303 	adc.w	r3, fp, r3
 80029fc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002a0c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002a10:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002a14:	460b      	mov	r3, r1
 8002a16:	18db      	adds	r3, r3, r3
 8002a18:	643b      	str	r3, [r7, #64]	@ 0x40
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	eb42 0303 	adc.w	r3, r2, r3
 8002a20:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a22:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002a26:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002a2a:	f7fd fbd3 	bl	80001d4 <__aeabi_uldivmod>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	460b      	mov	r3, r1
 8002a32:	4611      	mov	r1, r2
 8002a34:	4b3b      	ldr	r3, [pc, #236]	@ (8002b24 <UART_SetConfig+0x2d4>)
 8002a36:	fba3 2301 	umull	r2, r3, r3, r1
 8002a3a:	095b      	lsrs	r3, r3, #5
 8002a3c:	2264      	movs	r2, #100	@ 0x64
 8002a3e:	fb02 f303 	mul.w	r3, r2, r3
 8002a42:	1acb      	subs	r3, r1, r3
 8002a44:	00db      	lsls	r3, r3, #3
 8002a46:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002a4a:	4b36      	ldr	r3, [pc, #216]	@ (8002b24 <UART_SetConfig+0x2d4>)
 8002a4c:	fba3 2302 	umull	r2, r3, r3, r2
 8002a50:	095b      	lsrs	r3, r3, #5
 8002a52:	005b      	lsls	r3, r3, #1
 8002a54:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002a58:	441c      	add	r4, r3
 8002a5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002a64:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002a68:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002a6c:	4642      	mov	r2, r8
 8002a6e:	464b      	mov	r3, r9
 8002a70:	1891      	adds	r1, r2, r2
 8002a72:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002a74:	415b      	adcs	r3, r3
 8002a76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a78:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002a7c:	4641      	mov	r1, r8
 8002a7e:	1851      	adds	r1, r2, r1
 8002a80:	6339      	str	r1, [r7, #48]	@ 0x30
 8002a82:	4649      	mov	r1, r9
 8002a84:	414b      	adcs	r3, r1
 8002a86:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a88:	f04f 0200 	mov.w	r2, #0
 8002a8c:	f04f 0300 	mov.w	r3, #0
 8002a90:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002a94:	4659      	mov	r1, fp
 8002a96:	00cb      	lsls	r3, r1, #3
 8002a98:	4651      	mov	r1, sl
 8002a9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a9e:	4651      	mov	r1, sl
 8002aa0:	00ca      	lsls	r2, r1, #3
 8002aa2:	4610      	mov	r0, r2
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	4642      	mov	r2, r8
 8002aaa:	189b      	adds	r3, r3, r2
 8002aac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002ab0:	464b      	mov	r3, r9
 8002ab2:	460a      	mov	r2, r1
 8002ab4:	eb42 0303 	adc.w	r3, r2, r3
 8002ab8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002ac8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002acc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	18db      	adds	r3, r3, r3
 8002ad4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	eb42 0303 	adc.w	r3, r2, r3
 8002adc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ade:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002ae2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002ae6:	f7fd fb75 	bl	80001d4 <__aeabi_uldivmod>
 8002aea:	4602      	mov	r2, r0
 8002aec:	460b      	mov	r3, r1
 8002aee:	4b0d      	ldr	r3, [pc, #52]	@ (8002b24 <UART_SetConfig+0x2d4>)
 8002af0:	fba3 1302 	umull	r1, r3, r3, r2
 8002af4:	095b      	lsrs	r3, r3, #5
 8002af6:	2164      	movs	r1, #100	@ 0x64
 8002af8:	fb01 f303 	mul.w	r3, r1, r3
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	00db      	lsls	r3, r3, #3
 8002b00:	3332      	adds	r3, #50	@ 0x32
 8002b02:	4a08      	ldr	r2, [pc, #32]	@ (8002b24 <UART_SetConfig+0x2d4>)
 8002b04:	fba2 2303 	umull	r2, r3, r2, r3
 8002b08:	095b      	lsrs	r3, r3, #5
 8002b0a:	f003 0207 	and.w	r2, r3, #7
 8002b0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4422      	add	r2, r4
 8002b16:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002b18:	e106      	b.n	8002d28 <UART_SetConfig+0x4d8>
 8002b1a:	bf00      	nop
 8002b1c:	40011000 	.word	0x40011000
 8002b20:	40011400 	.word	0x40011400
 8002b24:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002b32:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002b36:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002b3a:	4642      	mov	r2, r8
 8002b3c:	464b      	mov	r3, r9
 8002b3e:	1891      	adds	r1, r2, r2
 8002b40:	6239      	str	r1, [r7, #32]
 8002b42:	415b      	adcs	r3, r3
 8002b44:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b46:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002b4a:	4641      	mov	r1, r8
 8002b4c:	1854      	adds	r4, r2, r1
 8002b4e:	4649      	mov	r1, r9
 8002b50:	eb43 0501 	adc.w	r5, r3, r1
 8002b54:	f04f 0200 	mov.w	r2, #0
 8002b58:	f04f 0300 	mov.w	r3, #0
 8002b5c:	00eb      	lsls	r3, r5, #3
 8002b5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b62:	00e2      	lsls	r2, r4, #3
 8002b64:	4614      	mov	r4, r2
 8002b66:	461d      	mov	r5, r3
 8002b68:	4643      	mov	r3, r8
 8002b6a:	18e3      	adds	r3, r4, r3
 8002b6c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002b70:	464b      	mov	r3, r9
 8002b72:	eb45 0303 	adc.w	r3, r5, r3
 8002b76:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002b7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002b86:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002b8a:	f04f 0200 	mov.w	r2, #0
 8002b8e:	f04f 0300 	mov.w	r3, #0
 8002b92:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002b96:	4629      	mov	r1, r5
 8002b98:	008b      	lsls	r3, r1, #2
 8002b9a:	4621      	mov	r1, r4
 8002b9c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ba0:	4621      	mov	r1, r4
 8002ba2:	008a      	lsls	r2, r1, #2
 8002ba4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002ba8:	f7fd fb14 	bl	80001d4 <__aeabi_uldivmod>
 8002bac:	4602      	mov	r2, r0
 8002bae:	460b      	mov	r3, r1
 8002bb0:	4b60      	ldr	r3, [pc, #384]	@ (8002d34 <UART_SetConfig+0x4e4>)
 8002bb2:	fba3 2302 	umull	r2, r3, r3, r2
 8002bb6:	095b      	lsrs	r3, r3, #5
 8002bb8:	011c      	lsls	r4, r3, #4
 8002bba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002bc4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002bc8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002bcc:	4642      	mov	r2, r8
 8002bce:	464b      	mov	r3, r9
 8002bd0:	1891      	adds	r1, r2, r2
 8002bd2:	61b9      	str	r1, [r7, #24]
 8002bd4:	415b      	adcs	r3, r3
 8002bd6:	61fb      	str	r3, [r7, #28]
 8002bd8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bdc:	4641      	mov	r1, r8
 8002bde:	1851      	adds	r1, r2, r1
 8002be0:	6139      	str	r1, [r7, #16]
 8002be2:	4649      	mov	r1, r9
 8002be4:	414b      	adcs	r3, r1
 8002be6:	617b      	str	r3, [r7, #20]
 8002be8:	f04f 0200 	mov.w	r2, #0
 8002bec:	f04f 0300 	mov.w	r3, #0
 8002bf0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002bf4:	4659      	mov	r1, fp
 8002bf6:	00cb      	lsls	r3, r1, #3
 8002bf8:	4651      	mov	r1, sl
 8002bfa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002bfe:	4651      	mov	r1, sl
 8002c00:	00ca      	lsls	r2, r1, #3
 8002c02:	4610      	mov	r0, r2
 8002c04:	4619      	mov	r1, r3
 8002c06:	4603      	mov	r3, r0
 8002c08:	4642      	mov	r2, r8
 8002c0a:	189b      	adds	r3, r3, r2
 8002c0c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002c10:	464b      	mov	r3, r9
 8002c12:	460a      	mov	r2, r1
 8002c14:	eb42 0303 	adc.w	r3, r2, r3
 8002c18:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002c26:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002c28:	f04f 0200 	mov.w	r2, #0
 8002c2c:	f04f 0300 	mov.w	r3, #0
 8002c30:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002c34:	4649      	mov	r1, r9
 8002c36:	008b      	lsls	r3, r1, #2
 8002c38:	4641      	mov	r1, r8
 8002c3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c3e:	4641      	mov	r1, r8
 8002c40:	008a      	lsls	r2, r1, #2
 8002c42:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002c46:	f7fd fac5 	bl	80001d4 <__aeabi_uldivmod>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	460b      	mov	r3, r1
 8002c4e:	4611      	mov	r1, r2
 8002c50:	4b38      	ldr	r3, [pc, #224]	@ (8002d34 <UART_SetConfig+0x4e4>)
 8002c52:	fba3 2301 	umull	r2, r3, r3, r1
 8002c56:	095b      	lsrs	r3, r3, #5
 8002c58:	2264      	movs	r2, #100	@ 0x64
 8002c5a:	fb02 f303 	mul.w	r3, r2, r3
 8002c5e:	1acb      	subs	r3, r1, r3
 8002c60:	011b      	lsls	r3, r3, #4
 8002c62:	3332      	adds	r3, #50	@ 0x32
 8002c64:	4a33      	ldr	r2, [pc, #204]	@ (8002d34 <UART_SetConfig+0x4e4>)
 8002c66:	fba2 2303 	umull	r2, r3, r2, r3
 8002c6a:	095b      	lsrs	r3, r3, #5
 8002c6c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c70:	441c      	add	r4, r3
 8002c72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c76:	2200      	movs	r2, #0
 8002c78:	673b      	str	r3, [r7, #112]	@ 0x70
 8002c7a:	677a      	str	r2, [r7, #116]	@ 0x74
 8002c7c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002c80:	4642      	mov	r2, r8
 8002c82:	464b      	mov	r3, r9
 8002c84:	1891      	adds	r1, r2, r2
 8002c86:	60b9      	str	r1, [r7, #8]
 8002c88:	415b      	adcs	r3, r3
 8002c8a:	60fb      	str	r3, [r7, #12]
 8002c8c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c90:	4641      	mov	r1, r8
 8002c92:	1851      	adds	r1, r2, r1
 8002c94:	6039      	str	r1, [r7, #0]
 8002c96:	4649      	mov	r1, r9
 8002c98:	414b      	adcs	r3, r1
 8002c9a:	607b      	str	r3, [r7, #4]
 8002c9c:	f04f 0200 	mov.w	r2, #0
 8002ca0:	f04f 0300 	mov.w	r3, #0
 8002ca4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002ca8:	4659      	mov	r1, fp
 8002caa:	00cb      	lsls	r3, r1, #3
 8002cac:	4651      	mov	r1, sl
 8002cae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002cb2:	4651      	mov	r1, sl
 8002cb4:	00ca      	lsls	r2, r1, #3
 8002cb6:	4610      	mov	r0, r2
 8002cb8:	4619      	mov	r1, r3
 8002cba:	4603      	mov	r3, r0
 8002cbc:	4642      	mov	r2, r8
 8002cbe:	189b      	adds	r3, r3, r2
 8002cc0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002cc2:	464b      	mov	r3, r9
 8002cc4:	460a      	mov	r2, r1
 8002cc6:	eb42 0303 	adc.w	r3, r2, r3
 8002cca:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	663b      	str	r3, [r7, #96]	@ 0x60
 8002cd6:	667a      	str	r2, [r7, #100]	@ 0x64
 8002cd8:	f04f 0200 	mov.w	r2, #0
 8002cdc:	f04f 0300 	mov.w	r3, #0
 8002ce0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002ce4:	4649      	mov	r1, r9
 8002ce6:	008b      	lsls	r3, r1, #2
 8002ce8:	4641      	mov	r1, r8
 8002cea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002cee:	4641      	mov	r1, r8
 8002cf0:	008a      	lsls	r2, r1, #2
 8002cf2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002cf6:	f7fd fa6d 	bl	80001d4 <__aeabi_uldivmod>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	4b0d      	ldr	r3, [pc, #52]	@ (8002d34 <UART_SetConfig+0x4e4>)
 8002d00:	fba3 1302 	umull	r1, r3, r3, r2
 8002d04:	095b      	lsrs	r3, r3, #5
 8002d06:	2164      	movs	r1, #100	@ 0x64
 8002d08:	fb01 f303 	mul.w	r3, r1, r3
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	011b      	lsls	r3, r3, #4
 8002d10:	3332      	adds	r3, #50	@ 0x32
 8002d12:	4a08      	ldr	r2, [pc, #32]	@ (8002d34 <UART_SetConfig+0x4e4>)
 8002d14:	fba2 2303 	umull	r2, r3, r2, r3
 8002d18:	095b      	lsrs	r3, r3, #5
 8002d1a:	f003 020f 	and.w	r2, r3, #15
 8002d1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4422      	add	r2, r4
 8002d26:	609a      	str	r2, [r3, #8]
}
 8002d28:	bf00      	nop
 8002d2a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d34:	51eb851f 	.word	0x51eb851f

08002d38 <memset>:
 8002d38:	4402      	add	r2, r0
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d100      	bne.n	8002d42 <memset+0xa>
 8002d40:	4770      	bx	lr
 8002d42:	f803 1b01 	strb.w	r1, [r3], #1
 8002d46:	e7f9      	b.n	8002d3c <memset+0x4>

08002d48 <__libc_init_array>:
 8002d48:	b570      	push	{r4, r5, r6, lr}
 8002d4a:	4d0d      	ldr	r5, [pc, #52]	@ (8002d80 <__libc_init_array+0x38>)
 8002d4c:	4c0d      	ldr	r4, [pc, #52]	@ (8002d84 <__libc_init_array+0x3c>)
 8002d4e:	1b64      	subs	r4, r4, r5
 8002d50:	10a4      	asrs	r4, r4, #2
 8002d52:	2600      	movs	r6, #0
 8002d54:	42a6      	cmp	r6, r4
 8002d56:	d109      	bne.n	8002d6c <__libc_init_array+0x24>
 8002d58:	4d0b      	ldr	r5, [pc, #44]	@ (8002d88 <__libc_init_array+0x40>)
 8002d5a:	4c0c      	ldr	r4, [pc, #48]	@ (8002d8c <__libc_init_array+0x44>)
 8002d5c:	f000 f818 	bl	8002d90 <_init>
 8002d60:	1b64      	subs	r4, r4, r5
 8002d62:	10a4      	asrs	r4, r4, #2
 8002d64:	2600      	movs	r6, #0
 8002d66:	42a6      	cmp	r6, r4
 8002d68:	d105      	bne.n	8002d76 <__libc_init_array+0x2e>
 8002d6a:	bd70      	pop	{r4, r5, r6, pc}
 8002d6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d70:	4798      	blx	r3
 8002d72:	3601      	adds	r6, #1
 8002d74:	e7ee      	b.n	8002d54 <__libc_init_array+0xc>
 8002d76:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d7a:	4798      	blx	r3
 8002d7c:	3601      	adds	r6, #1
 8002d7e:	e7f2      	b.n	8002d66 <__libc_init_array+0x1e>
 8002d80:	08002dc8 	.word	0x08002dc8
 8002d84:	08002dc8 	.word	0x08002dc8
 8002d88:	08002dc8 	.word	0x08002dc8
 8002d8c:	08002dcc 	.word	0x08002dcc

08002d90 <_init>:
 8002d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d92:	bf00      	nop
 8002d94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d96:	bc08      	pop	{r3}
 8002d98:	469e      	mov	lr, r3
 8002d9a:	4770      	bx	lr

08002d9c <_fini>:
 8002d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d9e:	bf00      	nop
 8002da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002da2:	bc08      	pop	{r3}
 8002da4:	469e      	mov	lr, r3
 8002da6:	4770      	bx	lr
